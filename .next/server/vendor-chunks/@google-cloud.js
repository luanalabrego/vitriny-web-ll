/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@google-cloud";
exports.ids = ["vendor-chunks/@google-cloud"];
exports.modules = {

/***/ "(rsc)/./node_modules/@google-cloud/paginator/build/src/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@google-cloud/paginator/build/src/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*!\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ResourceStream = exports.paginator = exports.Paginator = void 0;\n/*!\n * @module common/paginator\n */\nconst arrify = __webpack_require__(/*! arrify */ \"(rsc)/./node_modules/arrify/index.js\");\nconst extend = __webpack_require__(/*! extend */ \"(rsc)/./node_modules/extend/index.js\");\nconst resource_stream_1 = __webpack_require__(/*! ./resource-stream */ \"(rsc)/./node_modules/@google-cloud/paginator/build/src/resource-stream.js\");\nObject.defineProperty(exports, \"ResourceStream\", ({ enumerable: true, get: function () { return resource_stream_1.ResourceStream; } }));\n/*! Developer Documentation\n *\n * paginator is used to auto-paginate `nextQuery` methods as well as\n * streamifying them.\n *\n * Before:\n *\n *   search.query('done=true', function(err, results, nextQuery) {\n *     search.query(nextQuery, function(err, results, nextQuery) {});\n *   });\n *\n * After:\n *\n *   search.query('done=true', function(err, results) {});\n *\n * Methods to extend should be written to accept callbacks and return a\n * `nextQuery`.\n */\nclass Paginator {\n    /**\n     * Cache the original method, then overwrite it on the Class's prototype.\n     *\n     * @param {function} Class - The parent class of the methods to extend.\n     * @param {string|string[]} methodNames - Name(s) of the methods to extend.\n     */\n    // tslint:disable-next-line:variable-name\n    extend(Class, methodNames) {\n        methodNames = arrify(methodNames);\n        methodNames.forEach(methodName => {\n            const originalMethod = Class.prototype[methodName];\n            // map the original method to a private member\n            Class.prototype[methodName + '_'] = originalMethod;\n            // overwrite the original to auto-paginate\n            /* eslint-disable  @typescript-eslint/no-explicit-any */\n            Class.prototype[methodName] = function (...args) {\n                const parsedArguments = paginator.parseArguments_(args);\n                return paginator.run_(parsedArguments, originalMethod.bind(this));\n            };\n        });\n    }\n    /**\n     * Wraps paginated API calls in a readable object stream.\n     *\n     * This method simply calls the nextQuery recursively, emitting results to a\n     * stream. The stream ends when `nextQuery` is null.\n     *\n     * `maxResults` will act as a cap for how many results are fetched and emitted\n     * to the stream.\n     *\n     * @param {string} methodName - Name of the method to streamify.\n     * @return {function} - Wrapped function.\n     */\n    /* eslint-disable  @typescript-eslint/no-explicit-any */\n    streamify(methodName) {\n        return function (\n        /* eslint-disable  @typescript-eslint/no-explicit-any */\n        ...args) {\n            const parsedArguments = paginator.parseArguments_(args);\n            const originalMethod = this[methodName + '_'] || this[methodName];\n            return paginator.runAsStream_(parsedArguments, originalMethod.bind(this));\n        };\n    }\n    /**\n     * Parse a pseudo-array `arguments` for a query and callback.\n     *\n     * @param {array} args - The original `arguments` pseduo-array that the original\n     *     method received.\n     */\n    /* eslint-disable  @typescript-eslint/no-explicit-any */\n    parseArguments_(args) {\n        let query;\n        let autoPaginate = true;\n        let maxApiCalls = -1;\n        let maxResults = -1;\n        let callback;\n        const firstArgument = args[0];\n        const lastArgument = args[args.length - 1];\n        if (typeof firstArgument === 'function') {\n            callback = firstArgument;\n        }\n        else {\n            query = firstArgument;\n        }\n        if (typeof lastArgument === 'function') {\n            callback = lastArgument;\n        }\n        if (typeof query === 'object') {\n            query = extend(true, {}, query);\n            // Check if the user only asked for a certain amount of results.\n            if (query.maxResults && typeof query.maxResults === 'number') {\n                // `maxResults` is used API-wide.\n                maxResults = query.maxResults;\n            }\n            else if (typeof query.pageSize === 'number') {\n                // `pageSize` is Pub/Sub's `maxResults`.\n                maxResults = query.pageSize;\n            }\n            if (query.maxApiCalls && typeof query.maxApiCalls === 'number') {\n                maxApiCalls = query.maxApiCalls;\n                delete query.maxApiCalls;\n            }\n            // maxResults is the user specified limit.\n            if (maxResults !== -1 || query.autoPaginate === false) {\n                autoPaginate = false;\n            }\n        }\n        const parsedArguments = {\n            query: query || {},\n            autoPaginate,\n            maxApiCalls,\n            maxResults,\n            callback,\n        };\n        parsedArguments.streamOptions = extend(true, {}, parsedArguments.query);\n        delete parsedArguments.streamOptions.autoPaginate;\n        delete parsedArguments.streamOptions.maxResults;\n        delete parsedArguments.streamOptions.pageSize;\n        return parsedArguments;\n    }\n    /**\n     * This simply checks to see if `autoPaginate` is set or not, if it's true\n     * then we buffer all results, otherwise simply call the original method.\n     *\n     * @param {array} parsedArguments - Parsed arguments from the original method\n     *     call.\n     * @param {object=|string=} parsedArguments.query - Query object. This is most\n     *     commonly an object, but to make the API more simple, it can also be a\n     *     string in some places.\n     * @param {function=} parsedArguments.callback - Callback function.\n     * @param {boolean} parsedArguments.autoPaginate - Auto-pagination enabled.\n     * @param {boolean} parsedArguments.maxApiCalls - Maximum API calls to make.\n     * @param {number} parsedArguments.maxResults - Maximum results to return.\n     * @param {function} originalMethod - The cached method that accepts a callback\n     *     and returns `nextQuery` to receive more results.\n     */\n    run_(parsedArguments, originalMethod) {\n        const query = parsedArguments.query;\n        const callback = parsedArguments.callback;\n        if (!parsedArguments.autoPaginate) {\n            return originalMethod(query, callback);\n        }\n        const results = new Array();\n        let otherArgs = [];\n        const promise = new Promise((resolve, reject) => {\n            const stream = paginator.runAsStream_(parsedArguments, originalMethod);\n            stream\n                .on('error', reject)\n                .on('data', (data) => results.push(data))\n                .on('end', () => {\n                otherArgs = stream._otherArgs || [];\n                resolve(results);\n            });\n        });\n        if (!callback) {\n            return promise.then(results => [results, query, ...otherArgs]);\n        }\n        promise.then(results => callback(null, results, query, ...otherArgs), (err) => callback(err));\n    }\n    /**\n     * This method simply calls the nextQuery recursively, emitting results to a\n     * stream. The stream ends when `nextQuery` is null.\n     *\n     * `maxResults` will act as a cap for how many results are fetched and emitted\n     * to the stream.\n     *\n     * @param {object=|string=} parsedArguments.query - Query object. This is most\n     *     commonly an object, but to make the API more simple, it can also be a\n     *     string in some places.\n     * @param {function=} parsedArguments.callback - Callback function.\n     * @param {boolean} parsedArguments.autoPaginate - Auto-pagination enabled.\n     * @param {boolean} parsedArguments.maxApiCalls - Maximum API calls to make.\n     * @param {number} parsedArguments.maxResults - Maximum results to return.\n     * @param {function} originalMethod - The cached method that accepts a callback\n     *     and returns `nextQuery` to receive more results.\n     * @return {stream} - Readable object stream.\n     */\n    /* eslint-disable  @typescript-eslint/no-explicit-any */\n    runAsStream_(parsedArguments, originalMethod) {\n        return new resource_stream_1.ResourceStream(parsedArguments, originalMethod);\n    }\n}\nexports.Paginator = Paginator;\nconst paginator = new Paginator();\nexports.paginator = paginator;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/paginator/build/src/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/paginator/build/src/resource-stream.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@google-cloud/paginator/build/src/resource-stream.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/*!\n * Copyright 2019 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ResourceStream = void 0;\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nclass ResourceStream extends stream_1.Transform {\n    constructor(args, requestFn) {\n        const options = Object.assign({ objectMode: true }, args.streamOptions);\n        super(options);\n        this._ended = false;\n        this._maxApiCalls = args.maxApiCalls === -1 ? Infinity : args.maxApiCalls;\n        this._nextQuery = args.query;\n        this._reading = false;\n        this._requestFn = requestFn;\n        this._requestsMade = 0;\n        this._resultsToSend = args.maxResults === -1 ? Infinity : args.maxResults;\n        this._otherArgs = [];\n    }\n    /* eslint-disable  @typescript-eslint/no-explicit-any */\n    end(...args) {\n        this._ended = true;\n        return super.end(...args);\n    }\n    _read() {\n        if (this._reading) {\n            return;\n        }\n        this._reading = true;\n        // Wrap in a try/catch to catch input linting errors, e.g.\n        // an invalid BigQuery query. These errors are thrown in an\n        // async fashion, which makes them un-catchable by the user.\n        try {\n            this._requestFn(this._nextQuery, (err, results, nextQuery, ...otherArgs) => {\n                if (err) {\n                    this.destroy(err);\n                    return;\n                }\n                this._otherArgs = otherArgs;\n                this._nextQuery = nextQuery;\n                if (this._resultsToSend !== Infinity) {\n                    results = results.splice(0, this._resultsToSend);\n                    this._resultsToSend -= results.length;\n                }\n                let more = true;\n                for (const result of results) {\n                    if (this._ended) {\n                        break;\n                    }\n                    more = this.push(result);\n                }\n                const isFinished = !this._nextQuery || this._resultsToSend < 1;\n                const madeMaxCalls = ++this._requestsMade >= this._maxApiCalls;\n                if (isFinished || madeMaxCalls) {\n                    this.end();\n                }\n                if (more && !this._ended) {\n                    setImmediate(() => this._read());\n                }\n                this._reading = false;\n            });\n        }\n        catch (e) {\n            this.destroy(e);\n        }\n    }\n}\nexports.ResourceStream = ResourceStream;\n//# sourceMappingURL=resource-stream.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9wYWdpbmF0b3IvYnVpbGQvc3JjL3Jlc291cmNlLXN0cmVhbS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0I7QUFDdEIsaUJBQWlCLG1CQUFPLENBQUMsc0JBQVE7QUFDakM7QUFDQTtBQUNBLHdDQUF3QyxrQkFBa0I7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QiIsInNvdXJjZXMiOlsiL1VzZXJzL2x1Y2Fzc2FudG9zL0Rvd25sb2Fkcy92aXRyaW55LXdlYi1sbC9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9wYWdpbmF0b3IvYnVpbGQvc3JjL3Jlc291cmNlLXN0cmVhbS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qIVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlJlc291cmNlU3RyZWFtID0gdm9pZCAwO1xuY29uc3Qgc3RyZWFtXzEgPSByZXF1aXJlKFwic3RyZWFtXCIpO1xuY2xhc3MgUmVzb3VyY2VTdHJlYW0gZXh0ZW5kcyBzdHJlYW1fMS5UcmFuc2Zvcm0ge1xuICAgIGNvbnN0cnVjdG9yKGFyZ3MsIHJlcXVlc3RGbikge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7IG9iamVjdE1vZGU6IHRydWUgfSwgYXJncy5zdHJlYW1PcHRpb25zKTtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgICAgIHRoaXMuX2VuZGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX21heEFwaUNhbGxzID0gYXJncy5tYXhBcGlDYWxscyA9PT0gLTEgPyBJbmZpbml0eSA6IGFyZ3MubWF4QXBpQ2FsbHM7XG4gICAgICAgIHRoaXMuX25leHRRdWVyeSA9IGFyZ3MucXVlcnk7XG4gICAgICAgIHRoaXMuX3JlYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fcmVxdWVzdEZuID0gcmVxdWVzdEZuO1xuICAgICAgICB0aGlzLl9yZXF1ZXN0c01hZGUgPSAwO1xuICAgICAgICB0aGlzLl9yZXN1bHRzVG9TZW5kID0gYXJncy5tYXhSZXN1bHRzID09PSAtMSA/IEluZmluaXR5IDogYXJncy5tYXhSZXN1bHRzO1xuICAgICAgICB0aGlzLl9vdGhlckFyZ3MgPSBbXTtcbiAgICB9XG4gICAgLyogZXNsaW50LWRpc2FibGUgIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cbiAgICBlbmQoLi4uYXJncykge1xuICAgICAgICB0aGlzLl9lbmRlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiBzdXBlci5lbmQoLi4uYXJncyk7XG4gICAgfVxuICAgIF9yZWFkKCkge1xuICAgICAgICBpZiAodGhpcy5fcmVhZGluZykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3JlYWRpbmcgPSB0cnVlO1xuICAgICAgICAvLyBXcmFwIGluIGEgdHJ5L2NhdGNoIHRvIGNhdGNoIGlucHV0IGxpbnRpbmcgZXJyb3JzLCBlLmcuXG4gICAgICAgIC8vIGFuIGludmFsaWQgQmlnUXVlcnkgcXVlcnkuIFRoZXNlIGVycm9ycyBhcmUgdGhyb3duIGluIGFuXG4gICAgICAgIC8vIGFzeW5jIGZhc2hpb24sIHdoaWNoIG1ha2VzIHRoZW0gdW4tY2F0Y2hhYmxlIGJ5IHRoZSB1c2VyLlxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5fcmVxdWVzdEZuKHRoaXMuX25leHRRdWVyeSwgKGVyciwgcmVzdWx0cywgbmV4dFF1ZXJ5LCAuLi5vdGhlckFyZ3MpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGVzdHJveShlcnIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuX290aGVyQXJncyA9IG90aGVyQXJncztcbiAgICAgICAgICAgICAgICB0aGlzLl9uZXh0UXVlcnkgPSBuZXh0UXVlcnk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3Jlc3VsdHNUb1NlbmQgIT09IEluZmluaXR5KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdHMgPSByZXN1bHRzLnNwbGljZSgwLCB0aGlzLl9yZXN1bHRzVG9TZW5kKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVzdWx0c1RvU2VuZCAtPSByZXN1bHRzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV0IG1vcmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcmVzdWx0IG9mIHJlc3VsdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2VuZGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtb3JlID0gdGhpcy5wdXNoKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGlzRmluaXNoZWQgPSAhdGhpcy5fbmV4dFF1ZXJ5IHx8IHRoaXMuX3Jlc3VsdHNUb1NlbmQgPCAxO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1hZGVNYXhDYWxscyA9ICsrdGhpcy5fcmVxdWVzdHNNYWRlID49IHRoaXMuX21heEFwaUNhbGxzO1xuICAgICAgICAgICAgICAgIGlmIChpc0ZpbmlzaGVkIHx8IG1hZGVNYXhDYWxscykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVuZCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobW9yZSAmJiAhdGhpcy5fZW5kZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0SW1tZWRpYXRlKCgpID0+IHRoaXMuX3JlYWQoKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuX3JlYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICB0aGlzLmRlc3Ryb3koZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLlJlc291cmNlU3RyZWFtID0gUmVzb3VyY2VTdHJlYW07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXNvdXJjZS1zdHJlYW0uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/paginator/build/src/resource-stream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/projectify/build/src/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@google-cloud/projectify/build/src/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MissingProjectIdError = exports.replaceProjectIdToken = void 0;\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\n// Copyright 2014 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Populate the `{{projectId}}` placeholder.\n *\n * @throws {Error} If a projectId is required, but one is not provided.\n *\n * @param {*} - Any input value that may contain a placeholder. Arrays and objects will be looped.\n * @param {string} projectId - A projectId. If not provided\n * @return {*} - The original argument with all placeholders populated.\n */\n// eslint-disable-next-line  @typescript-eslint/no-explicit-any\nfunction replaceProjectIdToken(value, projectId) {\n    if (Array.isArray(value)) {\n        value = value.map(v => replaceProjectIdToken(v, projectId));\n    }\n    if (value !== null &&\n        typeof value === 'object' &&\n        !(value instanceof Buffer) &&\n        !(value instanceof stream_1.Stream) &&\n        typeof value.hasOwnProperty === 'function') {\n        for (const opt in value) {\n            // eslint-disable-next-line no-prototype-builtins\n            if (value.hasOwnProperty(opt)) {\n                value[opt] = replaceProjectIdToken(value[opt], projectId);\n            }\n        }\n    }\n    if (typeof value === 'string' &&\n        value.indexOf('{{projectId}}') > -1) {\n        if (!projectId || projectId === '{{projectId}}') {\n            throw new MissingProjectIdError();\n        }\n        value = value.replace(/{{projectId}}/g, projectId);\n    }\n    return value;\n}\nexports.replaceProjectIdToken = replaceProjectIdToken;\n/**\n * Custom error type for missing project ID errors.\n */\nclass MissingProjectIdError extends Error {\n    constructor() {\n        super(...arguments);\n        this.message = `Sorry, we cannot connect to Cloud Services without a project\n    ID. You may specify one with an environment variable named\n    \"GOOGLE_CLOUD_PROJECT\".`.replace(/ +/g, ' ');\n    }\n}\nexports.MissingProjectIdError = MissingProjectIdError;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9wcm9qZWN0aWZ5L2J1aWxkL3NyYy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw2QkFBNkIsR0FBRyw2QkFBNkI7QUFDN0QsaUJBQWlCLG1CQUFPLENBQUMsc0JBQVE7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixXQUFXO0FBQzlCO0FBQ0EsWUFBWSxPQUFPO0FBQ25CO0FBQ0EsV0FBVyxHQUFHO0FBQ2QsV0FBVyxRQUFRO0FBQ25CLFlBQVksR0FBRztBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLFdBQVc7QUFDcEMsMkNBQTJDLFdBQVc7QUFDdEQ7QUFDQTtBQUNBLGlDQUFpQyxXQUFXO0FBQzVDO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCIiwic291cmNlcyI6WyIvVXNlcnMvbHVjYXNzYW50b3MvRG93bmxvYWRzL3ZpdHJpbnktd2ViLWxsL25vZGVfbW9kdWxlcy9AZ29vZ2xlLWNsb3VkL3Byb2plY3RpZnkvYnVpbGQvc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5NaXNzaW5nUHJvamVjdElkRXJyb3IgPSBleHBvcnRzLnJlcGxhY2VQcm9qZWN0SWRUb2tlbiA9IHZvaWQgMDtcbmNvbnN0IHN0cmVhbV8xID0gcmVxdWlyZShcInN0cmVhbVwiKTtcbi8vIENvcHlyaWdodCAyMDE0IEdvb2dsZSBMTENcbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLyoqXG4gKiBQb3B1bGF0ZSB0aGUgYHt7cHJvamVjdElkfX1gIHBsYWNlaG9sZGVyLlxuICpcbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiBhIHByb2plY3RJZCBpcyByZXF1aXJlZCwgYnV0IG9uZSBpcyBub3QgcHJvdmlkZWQuXG4gKlxuICogQHBhcmFtIHsqfSAtIEFueSBpbnB1dCB2YWx1ZSB0aGF0IG1heSBjb250YWluIGEgcGxhY2Vob2xkZXIuIEFycmF5cyBhbmQgb2JqZWN0cyB3aWxsIGJlIGxvb3BlZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBwcm9qZWN0SWQgLSBBIHByb2plY3RJZC4gSWYgbm90IHByb3ZpZGVkXG4gKiBAcmV0dXJuIHsqfSAtIFRoZSBvcmlnaW5hbCBhcmd1bWVudCB3aXRoIGFsbCBwbGFjZWhvbGRlcnMgcG9wdWxhdGVkLlxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmZ1bmN0aW9uIHJlcGxhY2VQcm9qZWN0SWRUb2tlbih2YWx1ZSwgcHJvamVjdElkKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlID0gdmFsdWUubWFwKHYgPT4gcmVwbGFjZVByb2plY3RJZFRva2VuKHYsIHByb2plY3RJZCkpO1xuICAgIH1cbiAgICBpZiAodmFsdWUgIT09IG51bGwgJiZcbiAgICAgICAgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAhKHZhbHVlIGluc3RhbmNlb2YgQnVmZmVyKSAmJlxuICAgICAgICAhKHZhbHVlIGluc3RhbmNlb2Ygc3RyZWFtXzEuU3RyZWFtKSAmJlxuICAgICAgICB0eXBlb2YgdmFsdWUuaGFzT3duUHJvcGVydHkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZm9yIChjb25zdCBvcHQgaW4gdmFsdWUpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgICAgICAgICAgIGlmICh2YWx1ZS5oYXNPd25Qcm9wZXJ0eShvcHQpKSB7XG4gICAgICAgICAgICAgICAgdmFsdWVbb3B0XSA9IHJlcGxhY2VQcm9qZWN0SWRUb2tlbih2YWx1ZVtvcHRdLCBwcm9qZWN0SWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmXG4gICAgICAgIHZhbHVlLmluZGV4T2YoJ3t7cHJvamVjdElkfX0nKSA+IC0xKSB7XG4gICAgICAgIGlmICghcHJvamVjdElkIHx8IHByb2plY3RJZCA9PT0gJ3t7cHJvamVjdElkfX0nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgTWlzc2luZ1Byb2plY3RJZEVycm9yKCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC97e3Byb2plY3RJZH19L2csIHByb2plY3RJZCk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn1cbmV4cG9ydHMucmVwbGFjZVByb2plY3RJZFRva2VuID0gcmVwbGFjZVByb2plY3RJZFRva2VuO1xuLyoqXG4gKiBDdXN0b20gZXJyb3IgdHlwZSBmb3IgbWlzc2luZyBwcm9qZWN0IElEIGVycm9ycy5cbiAqL1xuY2xhc3MgTWlzc2luZ1Byb2plY3RJZEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBgU29ycnksIHdlIGNhbm5vdCBjb25uZWN0IHRvIENsb3VkIFNlcnZpY2VzIHdpdGhvdXQgYSBwcm9qZWN0XG4gICAgSUQuIFlvdSBtYXkgc3BlY2lmeSBvbmUgd2l0aCBhbiBlbnZpcm9ubWVudCB2YXJpYWJsZSBuYW1lZFxuICAgIFwiR09PR0xFX0NMT1VEX1BST0pFQ1RcIi5gLnJlcGxhY2UoLyArL2csICcgJyk7XG4gICAgfVxufVxuZXhwb3J0cy5NaXNzaW5nUHJvamVjdElkRXJyb3IgPSBNaXNzaW5nUHJvamVjdElkRXJyb3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/projectify/build/src/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/promisify/build/src/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@google-cloud/promisify/build/src/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/* eslint-disable prefer-rest-params */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.callbackifyAll = exports.callbackify = exports.promisifyAll = exports.promisify = void 0;\n/**\n * Wraps a callback style function to conditionally return a promise.\n *\n * @param {function} originalMethod - The method to promisify.\n * @param {object=} options - Promise options.\n * @param {boolean} options.singular - Resolve the promise with single arg instead of an array.\n * @return {function} wrapped\n */\nfunction promisify(originalMethod, options) {\n    if (originalMethod.promisified_) {\n        return originalMethod;\n    }\n    options = options || {};\n    const slice = Array.prototype.slice;\n    // tslint:disable-next-line:no-any\n    const wrapper = function () {\n        let last;\n        for (last = arguments.length - 1; last >= 0; last--) {\n            const arg = arguments[last];\n            if (typeof arg === 'undefined') {\n                continue; // skip trailing undefined.\n            }\n            if (typeof arg !== 'function') {\n                break; // non-callback last argument found.\n            }\n            return originalMethod.apply(this, arguments);\n        }\n        // peel trailing undefined.\n        const args = slice.call(arguments, 0, last + 1);\n        // tslint:disable-next-line:variable-name\n        let PromiseCtor = Promise;\n        // Because dedupe will likely create a single install of\n        // @google-cloud/common to be shared amongst all modules, we need to\n        // localize it at the Service level.\n        if (this && this.Promise) {\n            PromiseCtor = this.Promise;\n        }\n        return new PromiseCtor((resolve, reject) => {\n            // tslint:disable-next-line:no-any\n            args.push((...args) => {\n                const callbackArgs = slice.call(args);\n                const err = callbackArgs.shift();\n                if (err) {\n                    return reject(err);\n                }\n                if (options.singular && callbackArgs.length === 1) {\n                    resolve(callbackArgs[0]);\n                }\n                else {\n                    resolve(callbackArgs);\n                }\n            });\n            originalMethod.apply(this, args);\n        });\n    };\n    wrapper.promisified_ = true;\n    return wrapper;\n}\nexports.promisify = promisify;\n/**\n * Promisifies certain Class methods. This will not promisify private or\n * streaming methods.\n *\n * @param {module:common/service} Class - Service class.\n * @param {object=} options - Configuration object.\n */\n// tslint:disable-next-line:variable-name\nfunction promisifyAll(Class, options) {\n    const exclude = (options && options.exclude) || [];\n    const ownPropertyNames = Object.getOwnPropertyNames(Class.prototype);\n    const methods = ownPropertyNames.filter(methodName => {\n        // clang-format off\n        return (!exclude.includes(methodName) &&\n            typeof Class.prototype[methodName] === 'function' && // is it a function?\n            !/(^_|(Stream|_)|promise$)|^constructor$/.test(methodName) // is it promisable?\n        );\n        // clang-format on\n    });\n    methods.forEach(methodName => {\n        const originalMethod = Class.prototype[methodName];\n        if (!originalMethod.promisified_) {\n            Class.prototype[methodName] = exports.promisify(originalMethod, options);\n        }\n    });\n}\nexports.promisifyAll = promisifyAll;\n/**\n * Wraps a promisy type function to conditionally call a callback function.\n *\n * @param {function} originalMethod - The method to callbackify.\n * @param {object=} options - Callback options.\n * @param {boolean} options.singular - Pass to the callback a single arg instead of an array.\n * @return {function} wrapped\n */\nfunction callbackify(originalMethod) {\n    if (originalMethod.callbackified_) {\n        return originalMethod;\n    }\n    // tslint:disable-next-line:no-any\n    const wrapper = function () {\n        if (typeof arguments[arguments.length - 1] !== 'function') {\n            return originalMethod.apply(this, arguments);\n        }\n        const cb = Array.prototype.pop.call(arguments);\n        originalMethod.apply(this, arguments).then(\n        // tslint:disable-next-line:no-any\n        (res) => {\n            res = Array.isArray(res) ? res : [res];\n            cb(null, ...res);\n        }, (err) => cb(err));\n    };\n    wrapper.callbackified_ = true;\n    return wrapper;\n}\nexports.callbackify = callbackify;\n/**\n * Callbackifies certain Class methods. This will not callbackify private or\n * streaming methods.\n *\n * @param {module:common/service} Class - Service class.\n * @param {object=} options - Configuration object.\n */\nfunction callbackifyAll(\n// tslint:disable-next-line:variable-name\nClass, options) {\n    const exclude = (options && options.exclude) || [];\n    const ownPropertyNames = Object.getOwnPropertyNames(Class.prototype);\n    const methods = ownPropertyNames.filter(methodName => {\n        // clang-format off\n        return (!exclude.includes(methodName) &&\n            typeof Class.prototype[methodName] === 'function' && // is it a function?\n            !/^_|(Stream|_)|^constructor$/.test(methodName) // is it callbackifyable?\n        );\n        // clang-format on\n    });\n    methods.forEach(methodName => {\n        const originalMethod = Class.prototype[methodName];\n        if (!originalMethod.callbackified_) {\n            Class.prototype[methodName] = exports.callbackify(originalMethod);\n        }\n    });\n}\nexports.callbackifyAll = callbackifyAll;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/promisify/build/src/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/fast-xml-parser/src/fxp.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/fast-xml-parser/src/fxp.js ***!
  \************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst validator = __webpack_require__(/*! ./validator */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/fast-xml-parser/src/validator.js\");\nconst XMLParser = __webpack_require__(/*! ./xmlparser/XMLParser */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/fast-xml-parser/src/xmlparser/XMLParser.js\");\nconst XMLBuilder = __webpack_require__(/*! ./xmlbuilder/json2xml */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js\");\n\nmodule.exports = {\n  XMLParser: XMLParser,\n  XMLValidator: validator,\n  XMLBuilder: XMLBuilder\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL25vZGVfbW9kdWxlcy9mYXN0LXhtbC1wYXJzZXIvc3JjL2Z4cC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixrQkFBa0IsbUJBQU8sQ0FBQyw2R0FBYTtBQUN2QyxrQkFBa0IsbUJBQU8sQ0FBQyxpSUFBdUI7QUFDakQsbUJBQW1CLG1CQUFPLENBQUMsaUlBQXVCOztBQUVsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvbHVjYXNzYW50b3MvRG93bmxvYWRzL3ZpdHJpbnktd2ViLWxsL25vZGVfbW9kdWxlcy9AZ29vZ2xlLWNsb3VkL3N0b3JhZ2Uvbm9kZV9tb2R1bGVzL2Zhc3QteG1sLXBhcnNlci9zcmMvZnhwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgdmFsaWRhdG9yID0gcmVxdWlyZSgnLi92YWxpZGF0b3InKTtcbmNvbnN0IFhNTFBhcnNlciA9IHJlcXVpcmUoJy4veG1scGFyc2VyL1hNTFBhcnNlcicpO1xuY29uc3QgWE1MQnVpbGRlciA9IHJlcXVpcmUoJy4veG1sYnVpbGRlci9qc29uMnhtbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgWE1MUGFyc2VyOiBYTUxQYXJzZXIsXG4gIFhNTFZhbGlkYXRvcjogdmFsaWRhdG9yLFxuICBYTUxCdWlsZGVyOiBYTUxCdWlsZGVyXG59Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/fast-xml-parser/src/fxp.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/fast-xml-parser/src/ignoreAttributes.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/fast-xml-parser/src/ignoreAttributes.js ***!
  \*************************************************************************************************/
/***/ ((module) => {

eval("function getIgnoreAttributesFn(ignoreAttributes) {\n    if (typeof ignoreAttributes === 'function') {\n        return ignoreAttributes\n    }\n    if (Array.isArray(ignoreAttributes)) {\n        return (attrName) => {\n            for (const pattern of ignoreAttributes) {\n                if (typeof pattern === 'string' && attrName === pattern) {\n                    return true\n                }\n                if (pattern instanceof RegExp && pattern.test(attrName)) {\n                    return true\n                }\n            }\n        }\n    }\n    return () => false\n}\n\nmodule.exports = getIgnoreAttributesFn//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL25vZGVfbW9kdWxlcy9mYXN0LXhtbC1wYXJzZXIvc3JjL2lnbm9yZUF0dHJpYnV0ZXMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyIvVXNlcnMvbHVjYXNzYW50b3MvRG93bmxvYWRzL3ZpdHJpbnktd2ViLWxsL25vZGVfbW9kdWxlcy9AZ29vZ2xlLWNsb3VkL3N0b3JhZ2Uvbm9kZV9tb2R1bGVzL2Zhc3QteG1sLXBhcnNlci9zcmMvaWdub3JlQXR0cmlidXRlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBnZXRJZ25vcmVBdHRyaWJ1dGVzRm4oaWdub3JlQXR0cmlidXRlcykge1xuICAgIGlmICh0eXBlb2YgaWdub3JlQXR0cmlidXRlcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gaWdub3JlQXR0cmlidXRlc1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShpZ25vcmVBdHRyaWJ1dGVzKSkge1xuICAgICAgICByZXR1cm4gKGF0dHJOYW1lKSA9PiB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHBhdHRlcm4gb2YgaWdub3JlQXR0cmlidXRlcykge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcGF0dGVybiA9PT0gJ3N0cmluZycgJiYgYXR0ck5hbWUgPT09IHBhdHRlcm4pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHBhdHRlcm4gaW5zdGFuY2VvZiBSZWdFeHAgJiYgcGF0dGVybi50ZXN0KGF0dHJOYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gKCkgPT4gZmFsc2Vcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRJZ25vcmVBdHRyaWJ1dGVzRm4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/fast-xml-parser/src/ignoreAttributes.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/fast-xml-parser/src/util.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/fast-xml-parser/src/util.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nconst nameStartChar = ':A-Za-z_\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\nconst nameChar = nameStartChar + '\\\\-.\\\\d\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\nconst nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*'\nconst regexName = new RegExp('^' + nameRegexp + '$');\n\nconst getAllMatches = function(string, regex) {\n  const matches = [];\n  let match = regex.exec(string);\n  while (match) {\n    const allmatches = [];\n    allmatches.startIndex = regex.lastIndex - match[0].length;\n    const len = match.length;\n    for (let index = 0; index < len; index++) {\n      allmatches.push(match[index]);\n    }\n    matches.push(allmatches);\n    match = regex.exec(string);\n  }\n  return matches;\n};\n\nconst isName = function(string) {\n  const match = regexName.exec(string);\n  return !(match === null || typeof match === 'undefined');\n};\n\nexports.isExist = function(v) {\n  return typeof v !== 'undefined';\n};\n\nexports.isEmptyObject = function(obj) {\n  return Object.keys(obj).length === 0;\n};\n\n/**\n * Copy all the properties of a into b.\n * @param {*} target\n * @param {*} a\n */\nexports.merge = function(target, a, arrayMode) {\n  if (a) {\n    const keys = Object.keys(a); // will return an array of own properties\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      if (arrayMode === 'strict') {\n        target[keys[i]] = [ a[keys[i]] ];\n      } else {\n        target[keys[i]] = a[keys[i]];\n      }\n    }\n  }\n};\n/* exports.merge =function (b,a){\n  return Object.assign(b,a);\n} */\n\nexports.getValue = function(v) {\n  if (exports.isExist(v)) {\n    return v;\n  } else {\n    return '';\n  }\n};\n\n// const fakeCall = function(a) {return a;};\n// const fakeCallNoReturn = function() {};\n\nexports.isName = isName;\nexports.getAllMatches = getAllMatches;\nexports.nameRegexp = nameRegexp;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL25vZGVfbW9kdWxlcy9mYXN0LXhtbC1wYXJzZXIvc3JjL3V0aWwuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsYUFBYTtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxlQUFlO0FBQ2Y7QUFDQTs7QUFFQSxxQkFBcUI7QUFDckI7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxHQUFHO0FBQ2QsV0FBVyxHQUFHO0FBQ2Q7QUFDQSxhQUFhO0FBQ2I7QUFDQSxpQ0FBaUM7QUFDakMsNkJBQTZCO0FBQzdCLG9CQUFvQixTQUFTO0FBQzdCO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQSxpQ0FBaUM7QUFDakM7O0FBRUEsY0FBYztBQUNkLHFCQUFxQjtBQUNyQixrQkFBa0IiLCJzb3VyY2VzIjpbIi9Vc2Vycy9sdWNhc3NhbnRvcy9Eb3dubG9hZHMvdml0cmlueS13ZWItbGwvbm9kZV9tb2R1bGVzL0Bnb29nbGUtY2xvdWQvc3RvcmFnZS9ub2RlX21vZHVsZXMvZmFzdC14bWwtcGFyc2VyL3NyYy91dGlsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgbmFtZVN0YXJ0Q2hhciA9ICc6QS1aYS16X1xcXFx1MDBDMC1cXFxcdTAwRDZcXFxcdTAwRDgtXFxcXHUwMEY2XFxcXHUwMEY4LVxcXFx1MDJGRlxcXFx1MDM3MC1cXFxcdTAzN0RcXFxcdTAzN0YtXFxcXHUxRkZGXFxcXHUyMDBDLVxcXFx1MjAwRFxcXFx1MjA3MC1cXFxcdTIxOEZcXFxcdTJDMDAtXFxcXHUyRkVGXFxcXHUzMDAxLVxcXFx1RDdGRlxcXFx1RjkwMC1cXFxcdUZEQ0ZcXFxcdUZERjAtXFxcXHVGRkZEJztcbmNvbnN0IG5hbWVDaGFyID0gbmFtZVN0YXJ0Q2hhciArICdcXFxcLS5cXFxcZFxcXFx1MDBCN1xcXFx1MDMwMC1cXFxcdTAzNkZcXFxcdTIwM0YtXFxcXHUyMDQwJztcbmNvbnN0IG5hbWVSZWdleHAgPSAnWycgKyBuYW1lU3RhcnRDaGFyICsgJ11bJyArIG5hbWVDaGFyICsgJ10qJ1xuY29uc3QgcmVnZXhOYW1lID0gbmV3IFJlZ0V4cCgnXicgKyBuYW1lUmVnZXhwICsgJyQnKTtcblxuY29uc3QgZ2V0QWxsTWF0Y2hlcyA9IGZ1bmN0aW9uKHN0cmluZywgcmVnZXgpIHtcbiAgY29uc3QgbWF0Y2hlcyA9IFtdO1xuICBsZXQgbWF0Y2ggPSByZWdleC5leGVjKHN0cmluZyk7XG4gIHdoaWxlIChtYXRjaCkge1xuICAgIGNvbnN0IGFsbG1hdGNoZXMgPSBbXTtcbiAgICBhbGxtYXRjaGVzLnN0YXJ0SW5kZXggPSByZWdleC5sYXN0SW5kZXggLSBtYXRjaFswXS5sZW5ndGg7XG4gICAgY29uc3QgbGVuID0gbWF0Y2gubGVuZ3RoO1xuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBsZW47IGluZGV4KyspIHtcbiAgICAgIGFsbG1hdGNoZXMucHVzaChtYXRjaFtpbmRleF0pO1xuICAgIH1cbiAgICBtYXRjaGVzLnB1c2goYWxsbWF0Y2hlcyk7XG4gICAgbWF0Y2ggPSByZWdleC5leGVjKHN0cmluZyk7XG4gIH1cbiAgcmV0dXJuIG1hdGNoZXM7XG59O1xuXG5jb25zdCBpc05hbWUgPSBmdW5jdGlvbihzdHJpbmcpIHtcbiAgY29uc3QgbWF0Y2ggPSByZWdleE5hbWUuZXhlYyhzdHJpbmcpO1xuICByZXR1cm4gIShtYXRjaCA9PT0gbnVsbCB8fCB0eXBlb2YgbWF0Y2ggPT09ICd1bmRlZmluZWQnKTtcbn07XG5cbmV4cG9ydHMuaXNFeGlzdCA9IGZ1bmN0aW9uKHYpIHtcbiAgcmV0dXJuIHR5cGVvZiB2ICE9PSAndW5kZWZpbmVkJztcbn07XG5cbmV4cG9ydHMuaXNFbXB0eU9iamVjdCA9IGZ1bmN0aW9uKG9iaikge1xuICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5sZW5ndGggPT09IDA7XG59O1xuXG4vKipcbiAqIENvcHkgYWxsIHRoZSBwcm9wZXJ0aWVzIG9mIGEgaW50byBiLlxuICogQHBhcmFtIHsqfSB0YXJnZXRcbiAqIEBwYXJhbSB7Kn0gYVxuICovXG5leHBvcnRzLm1lcmdlID0gZnVuY3Rpb24odGFyZ2V0LCBhLCBhcnJheU1vZGUpIHtcbiAgaWYgKGEpIHtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoYSk7IC8vIHdpbGwgcmV0dXJuIGFuIGFycmF5IG9mIG93biBwcm9wZXJ0aWVzXG4gICAgY29uc3QgbGVuID0ga2V5cy5sZW5ndGg7IC8vZG9uJ3QgbWFrZSBpdCBpbmxpbmVcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBpZiAoYXJyYXlNb2RlID09PSAnc3RyaWN0Jykge1xuICAgICAgICB0YXJnZXRba2V5c1tpXV0gPSBbIGFba2V5c1tpXV0gXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRhcmdldFtrZXlzW2ldXSA9IGFba2V5c1tpXV07XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuLyogZXhwb3J0cy5tZXJnZSA9ZnVuY3Rpb24gKGIsYSl7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKGIsYSk7XG59ICovXG5cbmV4cG9ydHMuZ2V0VmFsdWUgPSBmdW5jdGlvbih2KSB7XG4gIGlmIChleHBvcnRzLmlzRXhpc3QodikpIHtcbiAgICByZXR1cm4gdjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cbn07XG5cbi8vIGNvbnN0IGZha2VDYWxsID0gZnVuY3Rpb24oYSkge3JldHVybiBhO307XG4vLyBjb25zdCBmYWtlQ2FsbE5vUmV0dXJuID0gZnVuY3Rpb24oKSB7fTtcblxuZXhwb3J0cy5pc05hbWUgPSBpc05hbWU7XG5leHBvcnRzLmdldEFsbE1hdGNoZXMgPSBnZXRBbGxNYXRjaGVzO1xuZXhwb3J0cy5uYW1lUmVnZXhwID0gbmFtZVJlZ2V4cDtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/fast-xml-parser/src/util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/fast-xml-parser/src/validator.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/fast-xml-parser/src/validator.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nconst util = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/fast-xml-parser/src/util.js\");\n\nconst defaultOptions = {\n  allowBooleanAttributes: false, //A tag can have attributes without any value\n  unpairedTags: []\n};\n\n//const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\nexports.validate = function (xmlData, options) {\n  options = Object.assign({}, defaultOptions, options);\n\n  //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n  const tags = [];\n  let tagFound = false;\n\n  //indicates that the root tag has been closed (aka. depth 0 has been reached)\n  let reachedRoot = false;\n\n  if (xmlData[0] === '\\ufeff') {\n    // check for byte order mark (BOM)\n    xmlData = xmlData.substr(1);\n  }\n  \n  for (let i = 0; i < xmlData.length; i++) {\n\n    if (xmlData[i] === '<' && xmlData[i+1] === '?') {\n      i+=2;\n      i = readPI(xmlData,i);\n      if (i.err) return i;\n    }else if (xmlData[i] === '<') {\n      //starting of tag\n      //read until you reach to '>' avoiding any '>' in attribute value\n      let tagStartPos = i;\n      i++;\n      \n      if (xmlData[i] === '!') {\n        i = readCommentAndCDATA(xmlData, i);\n        continue;\n      } else {\n        let closingTag = false;\n        if (xmlData[i] === '/') {\n          //closing tag\n          closingTag = true;\n          i++;\n        }\n        //read tagname\n        let tagName = '';\n        for (; i < xmlData.length &&\n          xmlData[i] !== '>' &&\n          xmlData[i] !== ' ' &&\n          xmlData[i] !== '\\t' &&\n          xmlData[i] !== '\\n' &&\n          xmlData[i] !== '\\r'; i++\n        ) {\n          tagName += xmlData[i];\n        }\n        tagName = tagName.trim();\n        //console.log(tagName);\n\n        if (tagName[tagName.length - 1] === '/') {\n          //self closing tag without attributes\n          tagName = tagName.substring(0, tagName.length - 1);\n          //continue;\n          i--;\n        }\n        if (!validateTagName(tagName)) {\n          let msg;\n          if (tagName.trim().length === 0) {\n            msg = \"Invalid space after '<'.\";\n          } else {\n            msg = \"Tag '\"+tagName+\"' is an invalid name.\";\n          }\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\n        }\n\n        const result = readAttributeStr(xmlData, i);\n        if (result === false) {\n          return getErrorObject('InvalidAttr', \"Attributes for '\"+tagName+\"' have open quote.\", getLineNumberForPosition(xmlData, i));\n        }\n        let attrStr = result.value;\n        i = result.index;\n\n        if (attrStr[attrStr.length - 1] === '/') {\n          //self closing tag\n          const attrStrStart = i - attrStr.length;\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid === true) {\n            tagFound = true;\n            //continue; //text may presents after self closing tag\n          } else {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else if (tags.length === 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' has not been opened.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else {\n            const otg = tags.pop();\n            if (tagName !== otg.tagName) {\n              let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);\n              return getErrorObject('InvalidTag',\n                \"Expected closing tag '\"+otg.tagName+\"' (opened in line \"+openPos.line+\", col \"+openPos.col+\") instead of closing tag '\"+tagName+\"'.\",\n                getLineNumberForPosition(xmlData, tagStartPos));\n            }\n\n            //when there are no more tags, we reached the root level.\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid !== true) {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n\n          //if the root level has been reached before ...\n          if (reachedRoot === true) {\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\n          } else if(options.unpairedTags.indexOf(tagName) !== -1){\n            //don't push into stack\n          } else {\n            tags.push({tagName, tagStartPos});\n          }\n          tagFound = true;\n        }\n\n        //skip tag text value\n        //It may include comments and CDATA value\n        for (i++; i < xmlData.length; i++) {\n          if (xmlData[i] === '<') {\n            if (xmlData[i + 1] === '!') {\n              //comment or CADATA\n              i++;\n              i = readCommentAndCDATA(xmlData, i);\n              continue;\n            } else if (xmlData[i+1] === '?') {\n              i = readPI(xmlData, ++i);\n              if (i.err) return i;\n            } else{\n              break;\n            }\n          } else if (xmlData[i] === '&') {\n            const afterAmp = validateAmpersand(xmlData, i);\n            if (afterAmp == -1)\n              return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n            i = afterAmp;\n          }else{\n            if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {\n              return getErrorObject('InvalidXml', \"Extra text at the end\", getLineNumberForPosition(xmlData, i));\n            }\n          }\n        } //end of reading tag text value\n        if (xmlData[i] === '<') {\n          i--;\n        }\n      }\n    } else {\n      if ( isWhiteSpace(xmlData[i])) {\n        continue;\n      }\n      return getErrorObject('InvalidChar', \"char '\"+xmlData[i]+\"' is not expected.\", getLineNumberForPosition(xmlData, i));\n    }\n  }\n\n  if (!tagFound) {\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\n  }else if (tags.length == 1) {\n      return getErrorObject('InvalidTag', \"Unclosed tag '\"+tags[0].tagName+\"'.\", getLineNumberForPosition(xmlData, tags[0].tagStartPos));\n  }else if (tags.length > 0) {\n      return getErrorObject('InvalidXml', \"Invalid '\"+\n          JSON.stringify(tags.map(t => t.tagName), null, 4).replace(/\\r?\\n/g, '')+\n          \"' found.\", {line: 1, col: 1});\n  }\n\n  return true;\n};\n\nfunction isWhiteSpace(char){\n  return char === ' ' || char === '\\t' || char === '\\n'  || char === '\\r';\n}\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */\nfunction readPI(xmlData, i) {\n  const start = i;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\n      //tagname\n      const tagname = xmlData.substr(start, i - start);\n      if (i > 5 && tagname === 'xml') {\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\n        //check if valid attribut string\n        i++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n  return i;\n}\n\nfunction readCommentAndCDATA(xmlData, i) {\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\n    //comment\n    for (i += 3; i < xmlData.length; i++) {\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  } else if (\n    xmlData.length > i + 8 &&\n    xmlData[i + 1] === 'D' &&\n    xmlData[i + 2] === 'O' &&\n    xmlData[i + 3] === 'C' &&\n    xmlData[i + 4] === 'T' &&\n    xmlData[i + 5] === 'Y' &&\n    xmlData[i + 6] === 'P' &&\n    xmlData[i + 7] === 'E'\n  ) {\n    let angleBracketsCount = 1;\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        angleBracketsCount++;\n      } else if (xmlData[i] === '>') {\n        angleBracketsCount--;\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (\n    xmlData.length > i + 9 &&\n    xmlData[i + 1] === '[' &&\n    xmlData[i + 2] === 'C' &&\n    xmlData[i + 3] === 'D' &&\n    xmlData[i + 4] === 'A' &&\n    xmlData[i + 5] === 'T' &&\n    xmlData[i + 6] === 'A' &&\n    xmlData[i + 7] === '['\n  ) {\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  }\n\n  return i;\n}\n\nconst doubleQuote = '\"';\nconst singleQuote = \"'\";\n\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */\nfunction readAttributeStr(xmlData, i) {\n  let attrStr = '';\n  let startChar = '';\n  let tagClosed = false;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n      if (startChar === '') {\n        startChar = xmlData[i];\n      } else if (startChar !== xmlData[i]) {\n        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n      } else {\n        startChar = '';\n      }\n    } else if (xmlData[i] === '>') {\n      if (startChar === '') {\n        tagClosed = true;\n        break;\n      }\n    }\n    attrStr += xmlData[i];\n  }\n  if (startChar !== '') {\n    return false;\n  }\n\n  return {\n    value: attrStr,\n    index: i,\n    tagClosed: tagClosed\n  };\n}\n\n/**\n * Select all the attributes whether valid or invalid.\n */\nconst validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g');\n\n//attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\n\nfunction validateAttributeString(attrStr, options) {\n  //console.log(\"start:\"+attrStr+\":end\");\n\n  //if(attrStr.trim().length === 0) return true; //empty string\n\n  const matches = util.getAllMatches(attrStr, validAttrStrRegxp);\n  const attrNames = {};\n\n  for (let i = 0; i < matches.length; i++) {\n    if (matches[i][1].length === 0) {\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' has no space in starting.\", getPositionFromMatch(matches[i]))\n    } else if (matches[i][3] !== undefined && matches[i][4] === undefined) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' is without value.\", getPositionFromMatch(matches[i]));\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n      //independent attribute: ab\n      return getErrorObject('InvalidAttr', \"boolean attribute '\"+matches[i][2]+\"' is not allowed.\", getPositionFromMatch(matches[i]));\n    }\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */\n    const attrName = matches[i][2];\n    if (!validateAttrName(attrName)) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is an invalid name.\", getPositionFromMatch(matches[i]));\n    }\n    if (!attrNames.hasOwnProperty(attrName)) {\n      //check for duplicate attribute.\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is repeated.\", getPositionFromMatch(matches[i]));\n    }\n  }\n\n  return true;\n}\n\nfunction validateNumberAmpersand(xmlData, i) {\n  let re = /\\d/;\n  if (xmlData[i] === 'x') {\n    i++;\n    re = /[\\da-fA-F]/;\n  }\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === ';')\n      return i;\n    if (!xmlData[i].match(re))\n      break;\n  }\n  return -1;\n}\n\nfunction validateAmpersand(xmlData, i) {\n  // https://www.w3.org/TR/xml/#dt-charref\n  i++;\n  if (xmlData[i] === ';')\n    return -1;\n  if (xmlData[i] === '#') {\n    i++;\n    return validateNumberAmpersand(xmlData, i);\n  }\n  let count = 0;\n  for (; i < xmlData.length; i++, count++) {\n    if (xmlData[i].match(/\\w/) && count < 20)\n      continue;\n    if (xmlData[i] === ';')\n      break;\n    return -1;\n  }\n  return i;\n}\n\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code: code,\n      msg: message,\n      line: lineNumber.line || lineNumber,\n      col: lineNumber.col,\n    },\n  };\n}\n\nfunction validateAttrName(attrName) {\n  return util.isName(attrName);\n}\n\n// const startsWithXML = /^xml/i;\n\nfunction validateTagName(tagname) {\n  return util.isName(tagname) /* && !tagname.match(startsWithXML) */;\n}\n\n//this function returns the line number for the character at the given index\nfunction getLineNumberForPosition(xmlData, index) {\n  const lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return {\n    line: lines.length,\n\n    // column number is last line's length + 1, because column numbering starts at 1:\n    col: lines[lines.length - 1].length + 1\n  };\n}\n\n//this function returns the position of the first character of match within attrStr\nfunction getPositionFromMatch(match) {\n  return match.startIndex + match[1].length;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/fast-xml-parser/src/validator.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js ***!
  \****************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n//parse Empty Node as self closing node\nconst buildFromOrderedJs = __webpack_require__(/*! ./orderedJs2Xml */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js\");\nconst getIgnoreAttributesFn = __webpack_require__(/*! ../ignoreAttributes */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/fast-xml-parser/src/ignoreAttributes.js\")\n\nconst defaultOptions = {\n  attributeNamePrefix: '@_',\n  attributesGroupName: false,\n  textNodeName: '#text',\n  ignoreAttributes: true,\n  cdataPropName: false,\n  format: false,\n  indentBy: '  ',\n  suppressEmptyNode: false,\n  suppressUnpairedNode: true,\n  suppressBooleanAttributes: true,\n  tagValueProcessor: function(key, a) {\n    return a;\n  },\n  attributeValueProcessor: function(attrName, a) {\n    return a;\n  },\n  preserveOrder: false,\n  commentPropName: false,\n  unpairedTags: [],\n  entities: [\n    { regex: new RegExp(\"&\", \"g\"), val: \"&amp;\" },//it must be on top\n    { regex: new RegExp(\">\", \"g\"), val: \"&gt;\" },\n    { regex: new RegExp(\"<\", \"g\"), val: \"&lt;\" },\n    { regex: new RegExp(\"\\'\", \"g\"), val: \"&apos;\" },\n    { regex: new RegExp(\"\\\"\", \"g\"), val: \"&quot;\" }\n  ],\n  processEntities: true,\n  stopNodes: [],\n  // transformTagName: false,\n  // transformAttributeName: false,\n  oneListGroup: false\n};\n\nfunction Builder(options) {\n  this.options = Object.assign({}, defaultOptions, options);\n  if (this.options.ignoreAttributes === true || this.options.attributesGroupName) {\n    this.isAttribute = function(/*a*/) {\n      return false;\n    };\n  } else {\n    this.ignoreAttributesFn = getIgnoreAttributesFn(this.options.ignoreAttributes)\n    this.attrPrefixLen = this.options.attributeNamePrefix.length;\n    this.isAttribute = isAttribute;\n  }\n\n  this.processTextOrObjNode = processTextOrObjNode\n\n  if (this.options.format) {\n    this.indentate = indentate;\n    this.tagEndChar = '>\\n';\n    this.newLine = '\\n';\n  } else {\n    this.indentate = function() {\n      return '';\n    };\n    this.tagEndChar = '>';\n    this.newLine = '';\n  }\n}\n\nBuilder.prototype.build = function(jObj) {\n  if(this.options.preserveOrder){\n    return buildFromOrderedJs(jObj, this.options);\n  }else {\n    if(Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1){\n      jObj = {\n        [this.options.arrayNodeName] : jObj\n      }\n    }\n    return this.j2x(jObj, 0, []).val;\n  }\n};\n\nBuilder.prototype.j2x = function(jObj, level, ajPath) {\n  let attrStr = '';\n  let val = '';\n  const jPath = ajPath.join('.')\n  for (let key in jObj) {\n    if(!Object.prototype.hasOwnProperty.call(jObj, key)) continue;\n    if (typeof jObj[key] === 'undefined') {\n      // supress undefined node only if it is not an attribute\n      if (this.isAttribute(key)) {\n        val += '';\n      }\n    } else if (jObj[key] === null) {\n      // null attribute should be ignored by the attribute list, but should not cause the tag closing\n      if (this.isAttribute(key)) {\n        val += '';\n      } else if (key === this.options.cdataPropName) {\n        val += '';\n      } else if (key[0] === '?') {\n        val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n      } else {\n        val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n      }\n      // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n    } else if (jObj[key] instanceof Date) {\n      val += this.buildTextValNode(jObj[key], key, '', level);\n    } else if (typeof jObj[key] !== 'object') {\n      //premitive type\n      const attr = this.isAttribute(key);\n      if (attr && !this.ignoreAttributesFn(attr, jPath)) {\n        attrStr += this.buildAttrPairStr(attr, '' + jObj[key]);\n      } else if (!attr) {\n        //tag value\n        if (key === this.options.textNodeName) {\n          let newval = this.options.tagValueProcessor(key, '' + jObj[key]);\n          val += this.replaceEntitiesValue(newval);\n        } else {\n          val += this.buildTextValNode(jObj[key], key, '', level);\n        }\n      }\n    } else if (Array.isArray(jObj[key])) {\n      //repeated nodes\n      const arrLen = jObj[key].length;\n      let listTagVal = \"\";\n      let listTagAttr = \"\";\n      for (let j = 0; j < arrLen; j++) {\n        const item = jObj[key][j];\n        if (typeof item === 'undefined') {\n          // supress undefined node\n        } else if (item === null) {\n          if(key[0] === \"?\") val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n          else val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n          // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n        } else if (typeof item === 'object') {\n          if(this.options.oneListGroup){\n            const result = this.j2x(item, level + 1, ajPath.concat(key));\n            listTagVal += result.val;\n            if (this.options.attributesGroupName && item.hasOwnProperty(this.options.attributesGroupName)) {\n              listTagAttr += result.attrStr\n            }\n          }else{\n            listTagVal += this.processTextOrObjNode(item, key, level, ajPath)\n          }\n        } else {\n          if (this.options.oneListGroup) {\n            let textValue = this.options.tagValueProcessor(key, item);\n            textValue = this.replaceEntitiesValue(textValue);\n            listTagVal += textValue;\n          } else {\n            listTagVal += this.buildTextValNode(item, key, '', level);\n          }\n        }\n      }\n      if(this.options.oneListGroup){\n        listTagVal = this.buildObjectNode(listTagVal, key, listTagAttr, level);\n      }\n      val += listTagVal;\n    } else {\n      //nested node\n      if (this.options.attributesGroupName && key === this.options.attributesGroupName) {\n        const Ks = Object.keys(jObj[key]);\n        const L = Ks.length;\n        for (let j = 0; j < L; j++) {\n          attrStr += this.buildAttrPairStr(Ks[j], '' + jObj[key][Ks[j]]);\n        }\n      } else {\n        val += this.processTextOrObjNode(jObj[key], key, level, ajPath)\n      }\n    }\n  }\n  return {attrStr: attrStr, val: val};\n};\n\nBuilder.prototype.buildAttrPairStr = function(attrName, val){\n  val = this.options.attributeValueProcessor(attrName, '' + val);\n  val = this.replaceEntitiesValue(val);\n  if (this.options.suppressBooleanAttributes && val === \"true\") {\n    return ' ' + attrName;\n  } else return ' ' + attrName + '=\"' + val + '\"';\n}\n\nfunction processTextOrObjNode (object, key, level, ajPath) {\n  const result = this.j2x(object, level + 1, ajPath.concat(key));\n  if (object[this.options.textNodeName] !== undefined && Object.keys(object).length === 1) {\n    return this.buildTextValNode(object[this.options.textNodeName], key, result.attrStr, level);\n  } else {\n    return this.buildObjectNode(result.val, key, result.attrStr, level);\n  }\n}\n\nBuilder.prototype.buildObjectNode = function(val, key, attrStr, level) {\n  if(val === \"\"){\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else {\n      return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;\n    }\n  }else{\n\n    let tagEndExp = '</' + key + this.tagEndChar;\n    let piClosingChar = \"\";\n    \n    if(key[0] === \"?\") {\n      piClosingChar = \"?\";\n      tagEndExp = \"\";\n    }\n  \n    // attrStr is an empty string in case the attribute came as undefined or null\n    if ((attrStr || attrStr === '') && val.indexOf('<') === -1) {\n      return ( this.indentate(level) + '<' +  key + attrStr + piClosingChar + '>' + val + tagEndExp );\n    } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {\n      return this.indentate(level) + `<!--${val}-->` + this.newLine;\n    }else {\n      return (\n        this.indentate(level) + '<' + key + attrStr + piClosingChar + this.tagEndChar +\n        val +\n        this.indentate(level) + tagEndExp    );\n    }\n  }\n}\n\nBuilder.prototype.closeTag = function(key){\n  let closeTag = \"\";\n  if(this.options.unpairedTags.indexOf(key) !== -1){ //unpaired\n    if(!this.options.suppressUnpairedNode) closeTag = \"/\"\n  }else if(this.options.suppressEmptyNode){ //empty\n    closeTag = \"/\";\n  }else{\n    closeTag = `></${key}`\n  }\n  return closeTag;\n}\n\nfunction buildEmptyObjNode(val, key, attrStr, level) {\n  if (val !== '') {\n    return this.buildObjectNode(val, key, attrStr, level);\n  } else {\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else {\n      return  this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;\n      // return this.buildTagStr(level,key, attrStr);\n    }\n  }\n}\n\nBuilder.prototype.buildTextValNode = function(val, key, attrStr, level) {\n  if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {\n    return this.indentate(level) + `<![CDATA[${val}]]>` +  this.newLine;\n  }else if (this.options.commentPropName !== false && key === this.options.commentPropName) {\n    return this.indentate(level) + `<!--${val}-->` +  this.newLine;\n  }else if(key[0] === \"?\") {//PI tag\n    return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar; \n  }else{\n    let textValue = this.options.tagValueProcessor(key, val);\n    textValue = this.replaceEntitiesValue(textValue);\n  \n    if( textValue === ''){\n      return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;\n    }else{\n      return this.indentate(level) + '<' + key + attrStr + '>' +\n         textValue +\n        '</' + key + this.tagEndChar;\n    }\n  }\n}\n\nBuilder.prototype.replaceEntitiesValue = function(textValue){\n  if(textValue && textValue.length > 0 && this.options.processEntities){\n    for (let i=0; i<this.options.entities.length; i++) {\n      const entity = this.options.entities[i];\n      textValue = textValue.replace(entity.regex, entity.val);\n    }\n  }\n  return textValue;\n}\n\nfunction indentate(level) {\n  return this.options.indentBy.repeat(level);\n}\n\nfunction isAttribute(name /*, options*/) {\n  if (name.startsWith(this.options.attributeNamePrefix) && name !== this.options.textNodeName) {\n    return name.substr(this.attrPrefixLen);\n  } else {\n    return false;\n  }\n}\n\nmodule.exports = Builder;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js ***!
  \*********************************************************************************************************/
/***/ ((module) => {

eval("const EOL = \"\\n\";\n\n/**\n * \n * @param {array} jArray \n * @param {any} options \n * @returns \n */\nfunction toXml(jArray, options) {\n    let indentation = \"\";\n    if (options.format && options.indentBy.length > 0) {\n        indentation = EOL;\n    }\n    return arrToStr(jArray, options, \"\", indentation);\n}\n\nfunction arrToStr(arr, options, jPath, indentation) {\n    let xmlStr = \"\";\n    let isPreviousElementTag = false;\n\n    for (let i = 0; i < arr.length; i++) {\n        const tagObj = arr[i];\n        const tagName = propName(tagObj);\n        if(tagName === undefined) continue;\n\n        let newJPath = \"\";\n        if (jPath.length === 0) newJPath = tagName\n        else newJPath = `${jPath}.${tagName}`;\n\n        if (tagName === options.textNodeName) {\n            let tagText = tagObj[tagName];\n            if (!isStopNode(newJPath, options)) {\n                tagText = options.tagValueProcessor(tagName, tagText);\n                tagText = replaceEntitiesValue(tagText, options);\n            }\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += tagText;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.cdataPropName) {\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.commentPropName) {\n            xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;\n            isPreviousElementTag = true;\n            continue;\n        } else if (tagName[0] === \"?\") {\n            const attStr = attr_to_str(tagObj[\":@\"], options);\n            const tempInd = tagName === \"?xml\" ? \"\" : indentation;\n            let piTextNodeName = tagObj[tagName][0][options.textNodeName];\n            piTextNodeName = piTextNodeName.length !== 0 ? \" \" + piTextNodeName : \"\"; //remove extra spacing\n            xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr}?>`;\n            isPreviousElementTag = true;\n            continue;\n        }\n        let newIdentation = indentation;\n        if (newIdentation !== \"\") {\n            newIdentation += options.indentBy;\n        }\n        const attStr = attr_to_str(tagObj[\":@\"], options);\n        const tagStart = indentation + `<${tagName}${attStr}`;\n        const tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);\n        if (options.unpairedTags.indexOf(tagName) !== -1) {\n            if (options.suppressUnpairedNode) xmlStr += tagStart + \">\";\n            else xmlStr += tagStart + \"/>\";\n        } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) {\n            xmlStr += tagStart + \"/>\";\n        } else if (tagValue && tagValue.endsWith(\">\")) {\n            xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;\n        } else {\n            xmlStr += tagStart + \">\";\n            if (tagValue && indentation !== \"\" && (tagValue.includes(\"/>\") || tagValue.includes(\"</\"))) {\n                xmlStr += indentation + options.indentBy + tagValue + indentation;\n            } else {\n                xmlStr += tagValue;\n            }\n            xmlStr += `</${tagName}>`;\n        }\n        isPreviousElementTag = true;\n    }\n\n    return xmlStr;\n}\n\nfunction propName(obj) {\n    const keys = Object.keys(obj);\n    for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        if(!obj.hasOwnProperty(key)) continue;\n        if (key !== \":@\") return key;\n    }\n}\n\nfunction attr_to_str(attrMap, options) {\n    let attrStr = \"\";\n    if (attrMap && !options.ignoreAttributes) {\n        for (let attr in attrMap) {\n            if(!attrMap.hasOwnProperty(attr)) continue;\n            let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);\n            attrVal = replaceEntitiesValue(attrVal, options);\n            if (attrVal === true && options.suppressBooleanAttributes) {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;\n            } else {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}=\"${attrVal}\"`;\n            }\n        }\n    }\n    return attrStr;\n}\n\nfunction isStopNode(jPath, options) {\n    jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);\n    let tagName = jPath.substr(jPath.lastIndexOf(\".\") + 1);\n    for (let index in options.stopNodes) {\n        if (options.stopNodes[index] === jPath || options.stopNodes[index] === \"*.\" + tagName) return true;\n    }\n    return false;\n}\n\nfunction replaceEntitiesValue(textValue, options) {\n    if (textValue && textValue.length > 0 && options.processEntities) {\n        for (let i = 0; i < options.entities.length; i++) {\n            const entity = options.entities[i];\n            textValue = textValue.replace(entity.regex, entity.val);\n        }\n    }\n    return textValue;\n}\nmodule.exports = toXml;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL25vZGVfbW9kdWxlcy9mYXN0LXhtbC1wYXJzZXIvc3JjL3htbGJ1aWxkZXIvb3JkZXJlZEpzMlhtbC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsS0FBSztBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLG9CQUFvQixnQkFBZ0I7QUFDcEM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwyQkFBMkIsTUFBTSxHQUFHLFFBQVE7O0FBRTVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MseUNBQXlDO0FBQzNFO0FBQ0E7QUFDQSxVQUFVO0FBQ1YsMkNBQTJDLHlDQUF5QztBQUNwRjtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBLHNGQUFzRjtBQUN0RixvQ0FBb0MsUUFBUSxFQUFFLGVBQWUsRUFBRSxPQUFPO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsUUFBUSxFQUFFLE9BQU87QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxVQUFVO0FBQ1YscUNBQXFDLFNBQVMsRUFBRSxZQUFZLElBQUksUUFBUTtBQUN4RSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQSwyQkFBMkIsUUFBUTtBQUNuQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esb0JBQW9CLGlCQUFpQjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsZ0RBQWdEO0FBQy9FLGNBQWM7QUFDZCwrQkFBK0IsZ0RBQWdELElBQUksUUFBUTtBQUMzRjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHdCQUF3Qiw2QkFBNkI7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9sdWNhc3NhbnRvcy9Eb3dubG9hZHMvdml0cmlueS13ZWItbGwvbm9kZV9tb2R1bGVzL0Bnb29nbGUtY2xvdWQvc3RvcmFnZS9ub2RlX21vZHVsZXMvZmFzdC14bWwtcGFyc2VyL3NyYy94bWxidWlsZGVyL29yZGVyZWRKczJYbWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgRU9MID0gXCJcXG5cIjtcblxuLyoqXG4gKiBcbiAqIEBwYXJhbSB7YXJyYXl9IGpBcnJheSBcbiAqIEBwYXJhbSB7YW55fSBvcHRpb25zIFxuICogQHJldHVybnMgXG4gKi9cbmZ1bmN0aW9uIHRvWG1sKGpBcnJheSwgb3B0aW9ucykge1xuICAgIGxldCBpbmRlbnRhdGlvbiA9IFwiXCI7XG4gICAgaWYgKG9wdGlvbnMuZm9ybWF0ICYmIG9wdGlvbnMuaW5kZW50QnkubGVuZ3RoID4gMCkge1xuICAgICAgICBpbmRlbnRhdGlvbiA9IEVPTDtcbiAgICB9XG4gICAgcmV0dXJuIGFyclRvU3RyKGpBcnJheSwgb3B0aW9ucywgXCJcIiwgaW5kZW50YXRpb24pO1xufVxuXG5mdW5jdGlvbiBhcnJUb1N0cihhcnIsIG9wdGlvbnMsIGpQYXRoLCBpbmRlbnRhdGlvbikge1xuICAgIGxldCB4bWxTdHIgPSBcIlwiO1xuICAgIGxldCBpc1ByZXZpb3VzRWxlbWVudFRhZyA9IGZhbHNlO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgdGFnT2JqID0gYXJyW2ldO1xuICAgICAgICBjb25zdCB0YWdOYW1lID0gcHJvcE5hbWUodGFnT2JqKTtcbiAgICAgICAgaWYodGFnTmFtZSA9PT0gdW5kZWZpbmVkKSBjb250aW51ZTtcblxuICAgICAgICBsZXQgbmV3SlBhdGggPSBcIlwiO1xuICAgICAgICBpZiAoalBhdGgubGVuZ3RoID09PSAwKSBuZXdKUGF0aCA9IHRhZ05hbWVcbiAgICAgICAgZWxzZSBuZXdKUGF0aCA9IGAke2pQYXRofS4ke3RhZ05hbWV9YDtcblxuICAgICAgICBpZiAodGFnTmFtZSA9PT0gb3B0aW9ucy50ZXh0Tm9kZU5hbWUpIHtcbiAgICAgICAgICAgIGxldCB0YWdUZXh0ID0gdGFnT2JqW3RhZ05hbWVdO1xuICAgICAgICAgICAgaWYgKCFpc1N0b3BOb2RlKG5ld0pQYXRoLCBvcHRpb25zKSkge1xuICAgICAgICAgICAgICAgIHRhZ1RleHQgPSBvcHRpb25zLnRhZ1ZhbHVlUHJvY2Vzc29yKHRhZ05hbWUsIHRhZ1RleHQpO1xuICAgICAgICAgICAgICAgIHRhZ1RleHQgPSByZXBsYWNlRW50aXRpZXNWYWx1ZSh0YWdUZXh0LCBvcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1ByZXZpb3VzRWxlbWVudFRhZykge1xuICAgICAgICAgICAgICAgIHhtbFN0ciArPSBpbmRlbnRhdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHhtbFN0ciArPSB0YWdUZXh0O1xuICAgICAgICAgICAgaXNQcmV2aW91c0VsZW1lbnRUYWcgPSBmYWxzZTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IGVsc2UgaWYgKHRhZ05hbWUgPT09IG9wdGlvbnMuY2RhdGFQcm9wTmFtZSkge1xuICAgICAgICAgICAgaWYgKGlzUHJldmlvdXNFbGVtZW50VGFnKSB7XG4gICAgICAgICAgICAgICAgeG1sU3RyICs9IGluZGVudGF0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgeG1sU3RyICs9IGA8IVtDREFUQVske3RhZ09ialt0YWdOYW1lXVswXVtvcHRpb25zLnRleHROb2RlTmFtZV19XV0+YDtcbiAgICAgICAgICAgIGlzUHJldmlvdXNFbGVtZW50VGFnID0gZmFsc2U7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSBlbHNlIGlmICh0YWdOYW1lID09PSBvcHRpb25zLmNvbW1lbnRQcm9wTmFtZSkge1xuICAgICAgICAgICAgeG1sU3RyICs9IGluZGVudGF0aW9uICsgYDwhLS0ke3RhZ09ialt0YWdOYW1lXVswXVtvcHRpb25zLnRleHROb2RlTmFtZV19LS0+YDtcbiAgICAgICAgICAgIGlzUHJldmlvdXNFbGVtZW50VGFnID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IGVsc2UgaWYgKHRhZ05hbWVbMF0gPT09IFwiP1wiKSB7XG4gICAgICAgICAgICBjb25zdCBhdHRTdHIgPSBhdHRyX3RvX3N0cih0YWdPYmpbXCI6QFwiXSwgb3B0aW9ucyk7XG4gICAgICAgICAgICBjb25zdCB0ZW1wSW5kID0gdGFnTmFtZSA9PT0gXCI/eG1sXCIgPyBcIlwiIDogaW5kZW50YXRpb247XG4gICAgICAgICAgICBsZXQgcGlUZXh0Tm9kZU5hbWUgPSB0YWdPYmpbdGFnTmFtZV1bMF1bb3B0aW9ucy50ZXh0Tm9kZU5hbWVdO1xuICAgICAgICAgICAgcGlUZXh0Tm9kZU5hbWUgPSBwaVRleHROb2RlTmFtZS5sZW5ndGggIT09IDAgPyBcIiBcIiArIHBpVGV4dE5vZGVOYW1lIDogXCJcIjsgLy9yZW1vdmUgZXh0cmEgc3BhY2luZ1xuICAgICAgICAgICAgeG1sU3RyICs9IHRlbXBJbmQgKyBgPCR7dGFnTmFtZX0ke3BpVGV4dE5vZGVOYW1lfSR7YXR0U3RyfT8+YDtcbiAgICAgICAgICAgIGlzUHJldmlvdXNFbGVtZW50VGFnID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGxldCBuZXdJZGVudGF0aW9uID0gaW5kZW50YXRpb247XG4gICAgICAgIGlmIChuZXdJZGVudGF0aW9uICE9PSBcIlwiKSB7XG4gICAgICAgICAgICBuZXdJZGVudGF0aW9uICs9IG9wdGlvbnMuaW5kZW50Qnk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYXR0U3RyID0gYXR0cl90b19zdHIodGFnT2JqW1wiOkBcIl0sIG9wdGlvbnMpO1xuICAgICAgICBjb25zdCB0YWdTdGFydCA9IGluZGVudGF0aW9uICsgYDwke3RhZ05hbWV9JHthdHRTdHJ9YDtcbiAgICAgICAgY29uc3QgdGFnVmFsdWUgPSBhcnJUb1N0cih0YWdPYmpbdGFnTmFtZV0sIG9wdGlvbnMsIG5ld0pQYXRoLCBuZXdJZGVudGF0aW9uKTtcbiAgICAgICAgaWYgKG9wdGlvbnMudW5wYWlyZWRUYWdzLmluZGV4T2YodGFnTmFtZSkgIT09IC0xKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5zdXBwcmVzc1VucGFpcmVkTm9kZSkgeG1sU3RyICs9IHRhZ1N0YXJ0ICsgXCI+XCI7XG4gICAgICAgICAgICBlbHNlIHhtbFN0ciArPSB0YWdTdGFydCArIFwiLz5cIjtcbiAgICAgICAgfSBlbHNlIGlmICgoIXRhZ1ZhbHVlIHx8IHRhZ1ZhbHVlLmxlbmd0aCA9PT0gMCkgJiYgb3B0aW9ucy5zdXBwcmVzc0VtcHR5Tm9kZSkge1xuICAgICAgICAgICAgeG1sU3RyICs9IHRhZ1N0YXJ0ICsgXCIvPlwiO1xuICAgICAgICB9IGVsc2UgaWYgKHRhZ1ZhbHVlICYmIHRhZ1ZhbHVlLmVuZHNXaXRoKFwiPlwiKSkge1xuICAgICAgICAgICAgeG1sU3RyICs9IHRhZ1N0YXJ0ICsgYD4ke3RhZ1ZhbHVlfSR7aW5kZW50YXRpb259PC8ke3RhZ05hbWV9PmA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB4bWxTdHIgKz0gdGFnU3RhcnQgKyBcIj5cIjtcbiAgICAgICAgICAgIGlmICh0YWdWYWx1ZSAmJiBpbmRlbnRhdGlvbiAhPT0gXCJcIiAmJiAodGFnVmFsdWUuaW5jbHVkZXMoXCIvPlwiKSB8fCB0YWdWYWx1ZS5pbmNsdWRlcyhcIjwvXCIpKSkge1xuICAgICAgICAgICAgICAgIHhtbFN0ciArPSBpbmRlbnRhdGlvbiArIG9wdGlvbnMuaW5kZW50QnkgKyB0YWdWYWx1ZSArIGluZGVudGF0aW9uO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB4bWxTdHIgKz0gdGFnVmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB4bWxTdHIgKz0gYDwvJHt0YWdOYW1lfT5gO1xuICAgICAgICB9XG4gICAgICAgIGlzUHJldmlvdXNFbGVtZW50VGFnID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4geG1sU3RyO1xufVxuXG5mdW5jdGlvbiBwcm9wTmFtZShvYmopIHtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3Qga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgaWYoIW9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSBjb250aW51ZTtcbiAgICAgICAgaWYgKGtleSAhPT0gXCI6QFwiKSByZXR1cm4ga2V5O1xuICAgIH1cbn1cblxuZnVuY3Rpb24gYXR0cl90b19zdHIoYXR0ck1hcCwgb3B0aW9ucykge1xuICAgIGxldCBhdHRyU3RyID0gXCJcIjtcbiAgICBpZiAoYXR0ck1hcCAmJiAhb3B0aW9ucy5pZ25vcmVBdHRyaWJ1dGVzKSB7XG4gICAgICAgIGZvciAobGV0IGF0dHIgaW4gYXR0ck1hcCkge1xuICAgICAgICAgICAgaWYoIWF0dHJNYXAuaGFzT3duUHJvcGVydHkoYXR0cikpIGNvbnRpbnVlO1xuICAgICAgICAgICAgbGV0IGF0dHJWYWwgPSBvcHRpb25zLmF0dHJpYnV0ZVZhbHVlUHJvY2Vzc29yKGF0dHIsIGF0dHJNYXBbYXR0cl0pO1xuICAgICAgICAgICAgYXR0clZhbCA9IHJlcGxhY2VFbnRpdGllc1ZhbHVlKGF0dHJWYWwsIG9wdGlvbnMpO1xuICAgICAgICAgICAgaWYgKGF0dHJWYWwgPT09IHRydWUgJiYgb3B0aW9ucy5zdXBwcmVzc0Jvb2xlYW5BdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICAgICAgYXR0clN0ciArPSBgICR7YXR0ci5zdWJzdHIob3B0aW9ucy5hdHRyaWJ1dGVOYW1lUHJlZml4Lmxlbmd0aCl9YDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYXR0clN0ciArPSBgICR7YXR0ci5zdWJzdHIob3B0aW9ucy5hdHRyaWJ1dGVOYW1lUHJlZml4Lmxlbmd0aCl9PVwiJHthdHRyVmFsfVwiYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXR0clN0cjtcbn1cblxuZnVuY3Rpb24gaXNTdG9wTm9kZShqUGF0aCwgb3B0aW9ucykge1xuICAgIGpQYXRoID0galBhdGguc3Vic3RyKDAsIGpQYXRoLmxlbmd0aCAtIG9wdGlvbnMudGV4dE5vZGVOYW1lLmxlbmd0aCAtIDEpO1xuICAgIGxldCB0YWdOYW1lID0galBhdGguc3Vic3RyKGpQYXRoLmxhc3RJbmRleE9mKFwiLlwiKSArIDEpO1xuICAgIGZvciAobGV0IGluZGV4IGluIG9wdGlvbnMuc3RvcE5vZGVzKSB7XG4gICAgICAgIGlmIChvcHRpb25zLnN0b3BOb2Rlc1tpbmRleF0gPT09IGpQYXRoIHx8IG9wdGlvbnMuc3RvcE5vZGVzW2luZGV4XSA9PT0gXCIqLlwiICsgdGFnTmFtZSkgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gcmVwbGFjZUVudGl0aWVzVmFsdWUodGV4dFZhbHVlLCBvcHRpb25zKSB7XG4gICAgaWYgKHRleHRWYWx1ZSAmJiB0ZXh0VmFsdWUubGVuZ3RoID4gMCAmJiBvcHRpb25zLnByb2Nlc3NFbnRpdGllcykge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9wdGlvbnMuZW50aXRpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGVudGl0eSA9IG9wdGlvbnMuZW50aXRpZXNbaV07XG4gICAgICAgICAgICB0ZXh0VmFsdWUgPSB0ZXh0VmFsdWUucmVwbGFjZShlbnRpdHkucmVnZXgsIGVudGl0eS52YWwpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0ZXh0VmFsdWU7XG59XG5tb2R1bGUuZXhwb3J0cyA9IHRvWG1sO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js ***!
  \********************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const util = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/fast-xml-parser/src/util.js\");\n\n//TODO: handle comments\nfunction readDocType(xmlData, i){\n    \n    const entities = {};\n    if( xmlData[i + 3] === 'O' &&\n         xmlData[i + 4] === 'C' &&\n         xmlData[i + 5] === 'T' &&\n         xmlData[i + 6] === 'Y' &&\n         xmlData[i + 7] === 'P' &&\n         xmlData[i + 8] === 'E')\n    {    \n        i = i+9;\n        let angleBracketsCount = 1;\n        let hasBody = false, comment = false;\n        let exp = \"\";\n        for(;i<xmlData.length;i++){\n            if (xmlData[i] === '<' && !comment) { //Determine the tag type\n                if( hasBody && isEntity(xmlData, i)){\n                    i += 7; \n                    let entityName, val;\n                    [entityName, val,i] = readEntityExp(xmlData,i+1);\n                    if(val.indexOf(\"&\") === -1) //Parameter entities are not supported\n                        entities[ validateEntityName(entityName) ] = {\n                            regx : RegExp( `&${entityName};`,\"g\"),\n                            val: val\n                        };\n                }\n                else if( hasBody && isElement(xmlData, i))  i += 8;//Not supported\n                else if( hasBody && isAttlist(xmlData, i))  i += 8;//Not supported\n                else if( hasBody && isNotation(xmlData, i)) i += 9;//Not supported\n                else if( isComment)                         comment = true;\n                else                                        throw new Error(\"Invalid DOCTYPE\");\n\n                angleBracketsCount++;\n                exp = \"\";\n            } else if (xmlData[i] === '>') { //Read tag content\n                if(comment){\n                    if( xmlData[i - 1] === \"-\" && xmlData[i - 2] === \"-\"){\n                        comment = false;\n                        angleBracketsCount--;\n                    }\n                }else{\n                    angleBracketsCount--;\n                }\n                if (angleBracketsCount === 0) {\n                  break;\n                }\n            }else if( xmlData[i] === '['){\n                hasBody = true;\n            }else{\n                exp += xmlData[i];\n            }\n        }\n        if(angleBracketsCount !== 0){\n            throw new Error(`Unclosed DOCTYPE`);\n        }\n    }else{\n        throw new Error(`Invalid Tag instead of DOCTYPE`);\n    }\n    return {entities, i};\n}\n\nfunction readEntityExp(xmlData,i){\n    //External entities are not supported\n    //    <!ENTITY ext SYSTEM \"http://normal-website.com\" >\n\n    //Parameter entities are not supported\n    //    <!ENTITY entityname \"&anotherElement;\">\n\n    //Internal entities are supported\n    //    <!ENTITY entityname \"replacement text\">\n    \n    //read EntityName\n    let entityName = \"\";\n    for (; i < xmlData.length && (xmlData[i] !== \"'\" && xmlData[i] !== '\"' ); i++) {\n        // if(xmlData[i] === \" \") continue;\n        // else \n        entityName += xmlData[i];\n    }\n    entityName = entityName.trim();\n    if(entityName.indexOf(\" \") !== -1) throw new Error(\"External entites are not supported\");\n\n    //read Entity Value\n    const startChar = xmlData[i++];\n    let val = \"\"\n    for (; i < xmlData.length && xmlData[i] !== startChar ; i++) {\n        val += xmlData[i];\n    }\n    return [entityName, val, i];\n}\n\nfunction isComment(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === '-' &&\n    xmlData[i+3] === '-') return true\n    return false\n}\nfunction isEntity(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'E' &&\n    xmlData[i+3] === 'N' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'I' &&\n    xmlData[i+6] === 'T' &&\n    xmlData[i+7] === 'Y') return true\n    return false\n}\nfunction isElement(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'E' &&\n    xmlData[i+3] === 'L' &&\n    xmlData[i+4] === 'E' &&\n    xmlData[i+5] === 'M' &&\n    xmlData[i+6] === 'E' &&\n    xmlData[i+7] === 'N' &&\n    xmlData[i+8] === 'T') return true\n    return false\n}\n\nfunction isAttlist(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'A' &&\n    xmlData[i+3] === 'T' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'L' &&\n    xmlData[i+6] === 'I' &&\n    xmlData[i+7] === 'S' &&\n    xmlData[i+8] === 'T') return true\n    return false\n}\nfunction isNotation(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'N' &&\n    xmlData[i+3] === 'O' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'A' &&\n    xmlData[i+6] === 'T' &&\n    xmlData[i+7] === 'I' &&\n    xmlData[i+8] === 'O' &&\n    xmlData[i+9] === 'N') return true\n    return false\n}\n\nfunction validateEntityName(name){\n    if (util.isName(name))\n\treturn name;\n    else\n        throw new Error(`Invalid entity name ${name}`);\n}\n\nmodule.exports = readDocType;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nconst defaultOptions = {\n    preserveOrder: false,\n    attributeNamePrefix: '@_',\n    attributesGroupName: false,\n    textNodeName: '#text',\n    ignoreAttributes: true,\n    removeNSPrefix: false, // remove NS from tag name or attribute name if true\n    allowBooleanAttributes: false, //a tag can have attributes without any value\n    //ignoreRootElement : false,\n    parseTagValue: true,\n    parseAttributeValue: false,\n    trimValues: true, //Trim string values of tag and attributes\n    cdataPropName: false,\n    numberParseOptions: {\n      hex: true,\n      leadingZeros: true,\n      eNotation: true\n    },\n    tagValueProcessor: function(tagName, val) {\n      return val;\n    },\n    attributeValueProcessor: function(attrName, val) {\n      return val;\n    },\n    stopNodes: [], //nested tags will not be parsed even for errors\n    alwaysCreateTextNode: false,\n    isArray: () => false,\n    commentPropName: false,\n    unpairedTags: [],\n    processEntities: true,\n    htmlEntities: false,\n    ignoreDeclaration: false,\n    ignorePiTags: false,\n    transformTagName: false,\n    transformAttributeName: false,\n    updateTag: function(tagName, jPath, attrs){\n      return tagName\n    },\n    // skipEmptyListItem: false\n};\n   \nconst buildOptions = function(options) {\n    return Object.assign({}, defaultOptions, options);\n};\n\nexports.buildOptions = buildOptions;\nexports.defaultOptions = defaultOptions;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL25vZGVfbW9kdWxlcy9mYXN0LXhtbC1wYXJzZXIvc3JjL3htbHBhcnNlci9PcHRpb25zQnVpbGRlci5qcyIsIm1hcHBpbmdzIjoiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7O0FBRUEsb0JBQW9CO0FBQ3BCLHNCQUFzQiIsInNvdXJjZXMiOlsiL1VzZXJzL2x1Y2Fzc2FudG9zL0Rvd25sb2Fkcy92aXRyaW55LXdlYi1sbC9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL25vZGVfbW9kdWxlcy9mYXN0LXhtbC1wYXJzZXIvc3JjL3htbHBhcnNlci9PcHRpb25zQnVpbGRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbmNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xuICAgIHByZXNlcnZlT3JkZXI6IGZhbHNlLFxuICAgIGF0dHJpYnV0ZU5hbWVQcmVmaXg6ICdAXycsXG4gICAgYXR0cmlidXRlc0dyb3VwTmFtZTogZmFsc2UsXG4gICAgdGV4dE5vZGVOYW1lOiAnI3RleHQnLFxuICAgIGlnbm9yZUF0dHJpYnV0ZXM6IHRydWUsXG4gICAgcmVtb3ZlTlNQcmVmaXg6IGZhbHNlLCAvLyByZW1vdmUgTlMgZnJvbSB0YWcgbmFtZSBvciBhdHRyaWJ1dGUgbmFtZSBpZiB0cnVlXG4gICAgYWxsb3dCb29sZWFuQXR0cmlidXRlczogZmFsc2UsIC8vYSB0YWcgY2FuIGhhdmUgYXR0cmlidXRlcyB3aXRob3V0IGFueSB2YWx1ZVxuICAgIC8vaWdub3JlUm9vdEVsZW1lbnQgOiBmYWxzZSxcbiAgICBwYXJzZVRhZ1ZhbHVlOiB0cnVlLFxuICAgIHBhcnNlQXR0cmlidXRlVmFsdWU6IGZhbHNlLFxuICAgIHRyaW1WYWx1ZXM6IHRydWUsIC8vVHJpbSBzdHJpbmcgdmFsdWVzIG9mIHRhZyBhbmQgYXR0cmlidXRlc1xuICAgIGNkYXRhUHJvcE5hbWU6IGZhbHNlLFxuICAgIG51bWJlclBhcnNlT3B0aW9uczoge1xuICAgICAgaGV4OiB0cnVlLFxuICAgICAgbGVhZGluZ1plcm9zOiB0cnVlLFxuICAgICAgZU5vdGF0aW9uOiB0cnVlXG4gICAgfSxcbiAgICB0YWdWYWx1ZVByb2Nlc3NvcjogZnVuY3Rpb24odGFnTmFtZSwgdmFsKSB7XG4gICAgICByZXR1cm4gdmFsO1xuICAgIH0sXG4gICAgYXR0cmlidXRlVmFsdWVQcm9jZXNzb3I6IGZ1bmN0aW9uKGF0dHJOYW1lLCB2YWwpIHtcbiAgICAgIHJldHVybiB2YWw7XG4gICAgfSxcbiAgICBzdG9wTm9kZXM6IFtdLCAvL25lc3RlZCB0YWdzIHdpbGwgbm90IGJlIHBhcnNlZCBldmVuIGZvciBlcnJvcnNcbiAgICBhbHdheXNDcmVhdGVUZXh0Tm9kZTogZmFsc2UsXG4gICAgaXNBcnJheTogKCkgPT4gZmFsc2UsXG4gICAgY29tbWVudFByb3BOYW1lOiBmYWxzZSxcbiAgICB1bnBhaXJlZFRhZ3M6IFtdLFxuICAgIHByb2Nlc3NFbnRpdGllczogdHJ1ZSxcbiAgICBodG1sRW50aXRpZXM6IGZhbHNlLFxuICAgIGlnbm9yZURlY2xhcmF0aW9uOiBmYWxzZSxcbiAgICBpZ25vcmVQaVRhZ3M6IGZhbHNlLFxuICAgIHRyYW5zZm9ybVRhZ05hbWU6IGZhbHNlLFxuICAgIHRyYW5zZm9ybUF0dHJpYnV0ZU5hbWU6IGZhbHNlLFxuICAgIHVwZGF0ZVRhZzogZnVuY3Rpb24odGFnTmFtZSwgalBhdGgsIGF0dHJzKXtcbiAgICAgIHJldHVybiB0YWdOYW1lXG4gICAgfSxcbiAgICAvLyBza2lwRW1wdHlMaXN0SXRlbTogZmFsc2Vcbn07XG4gICBcbmNvbnN0IGJ1aWxkT3B0aW9ucyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpO1xufTtcblxuZXhwb3J0cy5idWlsZE9wdGlvbnMgPSBidWlsZE9wdGlvbnM7XG5leHBvcnRzLmRlZmF1bHRPcHRpb25zID0gZGVmYXVsdE9wdGlvbnM7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js ***!
  \***********************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n///@ts-check\n\nconst util = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/fast-xml-parser/src/util.js\");\nconst xmlNode = __webpack_require__(/*! ./xmlNode */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/fast-xml-parser/src/xmlparser/xmlNode.js\");\nconst readDocType = __webpack_require__(/*! ./DocTypeReader */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js\");\nconst toNumber = __webpack_require__(/*! strnum */ \"(rsc)/./node_modules/strnum/strnum.js\");\nconst getIgnoreAttributesFn = __webpack_require__(/*! ../ignoreAttributes */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/fast-xml-parser/src/ignoreAttributes.js\")\n\n// const regx =\n//   '<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)'\n//   .replace(/NAME/g, util.nameRegexp);\n\n//const tagsRegx = new RegExp(\"<(\\\\/?[\\\\w:\\\\-\\._]+)([^>]*)>(\\\\s*\"+cdataRegx+\")*([^<]+)?\",\"g\");\n//const tagsRegx = new RegExp(\"<(\\\\/?)((\\\\w*:)?([\\\\w:\\\\-\\._]+))([^>]*)>([^<]*)(\"+cdataRegx+\"([^<]*))*([^<]+)?\",\"g\");\n\nclass OrderedObjParser{\n  constructor(options){\n    this.options = options;\n    this.currentNode = null;\n    this.tagsNodeStack = [];\n    this.docTypeEntities = {};\n    this.lastEntities = {\n      \"apos\" : { regex: /&(apos|#39|#x27);/g, val : \"'\"},\n      \"gt\" : { regex: /&(gt|#62|#x3E);/g, val : \">\"},\n      \"lt\" : { regex: /&(lt|#60|#x3C);/g, val : \"<\"},\n      \"quot\" : { regex: /&(quot|#34|#x22);/g, val : \"\\\"\"},\n    };\n    this.ampEntity = { regex: /&(amp|#38|#x26);/g, val : \"&\"};\n    this.htmlEntities = {\n      \"space\": { regex: /&(nbsp|#160);/g, val: \" \" },\n      // \"lt\" : { regex: /&(lt|#60);/g, val: \"<\" },\n      // \"gt\" : { regex: /&(gt|#62);/g, val: \">\" },\n      // \"amp\" : { regex: /&(amp|#38);/g, val: \"&\" },\n      // \"quot\" : { regex: /&(quot|#34);/g, val: \"\\\"\" },\n      // \"apos\" : { regex: /&(apos|#39);/g, val: \"'\" },\n      \"cent\" : { regex: /&(cent|#162);/g, val: \"¢\" },\n      \"pound\" : { regex: /&(pound|#163);/g, val: \"£\" },\n      \"yen\" : { regex: /&(yen|#165);/g, val: \"¥\" },\n      \"euro\" : { regex: /&(euro|#8364);/g, val: \"€\" },\n      \"copyright\" : { regex: /&(copy|#169);/g, val: \"©\" },\n      \"reg\" : { regex: /&(reg|#174);/g, val: \"®\" },\n      \"inr\" : { regex: /&(inr|#8377);/g, val: \"₹\" },\n      \"num_dec\": { regex: /&#([0-9]{1,7});/g, val : (_, str) => String.fromCharCode(Number.parseInt(str, 10)) },\n      \"num_hex\": { regex: /&#x([0-9a-fA-F]{1,6});/g, val : (_, str) => String.fromCharCode(Number.parseInt(str, 16)) },\n    };\n    this.addExternalEntities = addExternalEntities;\n    this.parseXml = parseXml;\n    this.parseTextData = parseTextData;\n    this.resolveNameSpace = resolveNameSpace;\n    this.buildAttributesMap = buildAttributesMap;\n    this.isItStopNode = isItStopNode;\n    this.replaceEntitiesValue = replaceEntitiesValue;\n    this.readStopNodeData = readStopNodeData;\n    this.saveTextToParentTag = saveTextToParentTag;\n    this.addChild = addChild;\n    this.ignoreAttributesFn = getIgnoreAttributesFn(this.options.ignoreAttributes)\n  }\n\n}\n\nfunction addExternalEntities(externalEntities){\n  const entKeys = Object.keys(externalEntities);\n  for (let i = 0; i < entKeys.length; i++) {\n    const ent = entKeys[i];\n    this.lastEntities[ent] = {\n       regex: new RegExp(\"&\"+ent+\";\",\"g\"),\n       val : externalEntities[ent]\n    }\n  }\n}\n\n/**\n * @param {string} val\n * @param {string} tagName\n * @param {string} jPath\n * @param {boolean} dontTrim\n * @param {boolean} hasAttributes\n * @param {boolean} isLeafNode\n * @param {boolean} escapeEntities\n */\nfunction parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {\n  if (val !== undefined) {\n    if (this.options.trimValues && !dontTrim) {\n      val = val.trim();\n    }\n    if(val.length > 0){\n      if(!escapeEntities) val = this.replaceEntitiesValue(val);\n      \n      const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);\n      if(newval === null || newval === undefined){\n        //don't parse\n        return val;\n      }else if(typeof newval !== typeof val || newval !== val){\n        //overwrite\n        return newval;\n      }else if(this.options.trimValues){\n        return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n      }else{\n        const trimmedVal = val.trim();\n        if(trimmedVal === val){\n          return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n        }else{\n          return val;\n        }\n      }\n    }\n  }\n}\n\nfunction resolveNameSpace(tagname) {\n  if (this.options.removeNSPrefix) {\n    const tags = tagname.split(':');\n    const prefix = tagname.charAt(0) === '/' ? '/' : '';\n    if (tags[0] === 'xmlns') {\n      return '';\n    }\n    if (tags.length === 2) {\n      tagname = prefix + tags[1];\n    }\n  }\n  return tagname;\n}\n\n//TODO: change regex to capture NS\n//const attrsRegx = new RegExp(\"([\\\\w\\\\-\\\\.\\\\:]+)\\\\s*=\\\\s*(['\\\"])((.|\\n)*?)\\\\2\",\"gm\");\nconst attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])([\\\\s\\\\S]*?)\\\\3)?', 'gm');\n\nfunction buildAttributesMap(attrStr, jPath, tagName) {\n  if (this.options.ignoreAttributes !== true && typeof attrStr === 'string') {\n    // attrStr = attrStr.replace(/\\r?\\n/g, ' ');\n    //attrStr = attrStr || attrStr.trim();\n\n    const matches = util.getAllMatches(attrStr, attrsRegx);\n    const len = matches.length; //don't make it inline\n    const attrs = {};\n    for (let i = 0; i < len; i++) {\n      const attrName = this.resolveNameSpace(matches[i][1]);\n      if (this.ignoreAttributesFn(attrName, jPath)) {\n        continue\n      }\n      let oldVal = matches[i][4];\n      let aName = this.options.attributeNamePrefix + attrName;\n      if (attrName.length) {\n        if (this.options.transformAttributeName) {\n          aName = this.options.transformAttributeName(aName);\n        }\n        if(aName === \"__proto__\") aName  = \"#__proto__\";\n        if (oldVal !== undefined) {\n          if (this.options.trimValues) {\n            oldVal = oldVal.trim();\n          }\n          oldVal = this.replaceEntitiesValue(oldVal);\n          const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);\n          if(newVal === null || newVal === undefined){\n            //don't parse\n            attrs[aName] = oldVal;\n          }else if(typeof newVal !== typeof oldVal || newVal !== oldVal){\n            //overwrite\n            attrs[aName] = newVal;\n          }else{\n            //parse\n            attrs[aName] = parseValue(\n              oldVal,\n              this.options.parseAttributeValue,\n              this.options.numberParseOptions\n            );\n          }\n        } else if (this.options.allowBooleanAttributes) {\n          attrs[aName] = true;\n        }\n      }\n    }\n    if (!Object.keys(attrs).length) {\n      return;\n    }\n    if (this.options.attributesGroupName) {\n      const attrCollection = {};\n      attrCollection[this.options.attributesGroupName] = attrs;\n      return attrCollection;\n    }\n    return attrs\n  }\n}\n\nconst parseXml = function(xmlData) {\n  xmlData = xmlData.replace(/\\r\\n?/g, \"\\n\"); //TODO: remove this line\n  const xmlObj = new xmlNode('!xml');\n  let currentNode = xmlObj;\n  let textData = \"\";\n  let jPath = \"\";\n  for(let i=0; i< xmlData.length; i++){//for each char in XML data\n    const ch = xmlData[i];\n    if(ch === '<'){\n      // const nextIndex = i+1;\n      // const _2ndChar = xmlData[nextIndex];\n      if( xmlData[i+1] === '/') {//Closing Tag\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\")\n        let tagName = xmlData.substring(i+2,closeIndex).trim();\n\n        if(this.options.removeNSPrefix){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n          }\n        }\n\n        if(this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n\n        if(currentNode){\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        }\n\n        //check if last tag of nested tag was unpaired tag\n        const lastTagName = jPath.substring(jPath.lastIndexOf(\".\")+1);\n        if(tagName && this.options.unpairedTags.indexOf(tagName) !== -1 ){\n          throw new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`);\n        }\n        let propIndex = 0\n        if(lastTagName && this.options.unpairedTags.indexOf(lastTagName) !== -1 ){\n          propIndex = jPath.lastIndexOf('.', jPath.lastIndexOf('.')-1)\n          this.tagsNodeStack.pop();\n        }else{\n          propIndex = jPath.lastIndexOf(\".\");\n        }\n        jPath = jPath.substring(0, propIndex);\n\n        currentNode = this.tagsNodeStack.pop();//avoid recursion, set the parent tag scope\n        textData = \"\";\n        i = closeIndex;\n      } else if( xmlData[i+1] === '?') {\n\n        let tagData = readTagExp(xmlData,i, false, \"?>\");\n        if(!tagData) throw new Error(\"Pi Tag is not closed.\");\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        if( (this.options.ignoreDeclaration && tagData.tagName === \"?xml\") || this.options.ignorePiTags){\n\n        }else{\n  \n          const childNode = new xmlNode(tagData.tagName);\n          childNode.add(this.options.textNodeName, \"\");\n          \n          if(tagData.tagName !== tagData.tagExp && tagData.attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName);\n          }\n          this.addChild(currentNode, childNode, jPath)\n\n        }\n\n\n        i = tagData.closeIndex + 1;\n      } else if(xmlData.substr(i + 1, 3) === '!--') {\n        const endIndex = findClosingIndex(xmlData, \"-->\", i+4, \"Comment is not closed.\")\n        if(this.options.commentPropName){\n          const comment = xmlData.substring(i + 4, endIndex - 2);\n\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n          currentNode.add(this.options.commentPropName, [ { [this.options.textNodeName] : comment } ]);\n        }\n        i = endIndex;\n      } else if( xmlData.substr(i + 1, 2) === '!D') {\n        const result = readDocType(xmlData, i);\n        this.docTypeEntities = result.entities;\n        i = result.i;\n      }else if(xmlData.substr(i + 1, 2) === '![') {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2;\n        const tagExp = xmlData.substring(i + 9,closeIndex);\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n        let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true, true);\n        if(val == undefined) val = \"\";\n\n        //cdata should be set even if it is 0 length string\n        if(this.options.cdataPropName){\n          currentNode.add(this.options.cdataPropName, [ { [this.options.textNodeName] : tagExp } ]);\n        }else{\n          currentNode.add(this.options.textNodeName, val);\n        }\n        \n        i = closeIndex + 2;\n      }else {//Opening tag\n        let result = readTagExp(xmlData,i, this.options.removeNSPrefix);\n        let tagName= result.tagName;\n        const rawTagName = result.rawTagName;\n        let tagExp = result.tagExp;\n        let attrExpPresent = result.attrExpPresent;\n        let closeIndex = result.closeIndex;\n\n        if (this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n        \n        //save text as child node\n        if (currentNode && textData) {\n          if(currentNode.tagname !== '!xml'){\n            //when nested tag is found\n            textData = this.saveTextToParentTag(textData, currentNode, jPath, false);\n          }\n        }\n\n        //check if last tag was unpaired tag\n        const lastTag = currentNode;\n        if(lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1 ){\n          currentNode = this.tagsNodeStack.pop();\n          jPath = jPath.substring(0, jPath.lastIndexOf(\".\"));\n        }\n        if(tagName !== xmlObj.tagname){\n          jPath += jPath ? \".\" + tagName : tagName;\n        }\n        if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {\n          let tagContent = \"\";\n          //self-closing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              jPath = jPath.substr(0, jPath.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            i = result.closeIndex;\n          }\n          //unpaired tag\n          else if(this.options.unpairedTags.indexOf(tagName) !== -1){\n            \n            i = result.closeIndex;\n          }\n          //normal tag\n          else{\n            //read until closing tag is found\n            const result = this.readStopNodeData(xmlData, rawTagName, closeIndex + 1);\n            if(!result) throw new Error(`Unexpected end of ${rawTagName}`);\n            i = result.i;\n            tagContent = result.tagContent;\n          }\n\n          const childNode = new xmlNode(tagName);\n          if(tagName !== tagExp && attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n          }\n          if(tagContent) {\n            tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);\n          }\n          \n          jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          childNode.add(this.options.textNodeName, tagContent);\n          \n          this.addChild(currentNode, childNode, jPath)\n        }else{\n  //selfClosing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              jPath = jPath.substr(0, jPath.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            \n            if(this.options.transformTagName) {\n              tagName = this.options.transformTagName(tagName);\n            }\n\n            const childNode = new xmlNode(tagName);\n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath)\n            jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          }\n    //opening tag\n          else{\n            const childNode = new xmlNode( tagName);\n            this.tagsNodeStack.push(currentNode);\n            \n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath)\n            currentNode = childNode;\n          }\n          textData = \"\";\n          i = closeIndex;\n        }\n      }\n    }else{\n      textData += xmlData[i];\n    }\n  }\n  return xmlObj.child;\n}\n\nfunction addChild(currentNode, childNode, jPath){\n  const result = this.options.updateTag(childNode.tagname, jPath, childNode[\":@\"])\n  if(result === false){\n  }else if(typeof result === \"string\"){\n    childNode.tagname = result\n    currentNode.addChild(childNode);\n  }else{\n    currentNode.addChild(childNode);\n  }\n}\n\nconst replaceEntitiesValue = function(val){\n\n  if(this.options.processEntities){\n    for(let entityName in this.docTypeEntities){\n      const entity = this.docTypeEntities[entityName];\n      val = val.replace( entity.regx, entity.val);\n    }\n    for(let entityName in this.lastEntities){\n      const entity = this.lastEntities[entityName];\n      val = val.replace( entity.regex, entity.val);\n    }\n    if(this.options.htmlEntities){\n      for(let entityName in this.htmlEntities){\n        const entity = this.htmlEntities[entityName];\n        val = val.replace( entity.regex, entity.val);\n      }\n    }\n    val = val.replace( this.ampEntity.regex, this.ampEntity.val);\n  }\n  return val;\n}\nfunction saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {\n  if (textData) { //store previously collected data as textNode\n    if(isLeafNode === undefined) isLeafNode = currentNode.child.length === 0\n    \n    textData = this.parseTextData(textData,\n      currentNode.tagname,\n      jPath,\n      false,\n      currentNode[\":@\"] ? Object.keys(currentNode[\":@\"]).length !== 0 : false,\n      isLeafNode);\n\n    if (textData !== undefined && textData !== \"\")\n      currentNode.add(this.options.textNodeName, textData);\n    textData = \"\";\n  }\n  return textData;\n}\n\n//TODO: use jPath to simplify the logic\n/**\n * \n * @param {string[]} stopNodes \n * @param {string} jPath\n * @param {string} currentTagName \n */\nfunction isItStopNode(stopNodes, jPath, currentTagName){\n  const allNodesExp = \"*.\" + currentTagName;\n  for (const stopNodePath in stopNodes) {\n    const stopNodeExp = stopNodes[stopNodePath];\n    if( allNodesExp === stopNodeExp || jPath === stopNodeExp  ) return true;\n  }\n  return false;\n}\n\n/**\n * Returns the tag Expression and where it is ending handling single-double quotes situation\n * @param {string} xmlData \n * @param {number} i starting index\n * @returns \n */\nfunction tagExpWithClosingIndex(xmlData, i, closingChar = \">\"){\n  let attrBoundary;\n  let tagExp = \"\";\n  for (let index = i; index < xmlData.length; index++) {\n    let ch = xmlData[index];\n    if (attrBoundary) {\n        if (ch === attrBoundary) attrBoundary = \"\";//reset\n    } else if (ch === '\"' || ch === \"'\") {\n        attrBoundary = ch;\n    } else if (ch === closingChar[0]) {\n      if(closingChar[1]){\n        if(xmlData[index + 1] === closingChar[1]){\n          return {\n            data: tagExp,\n            index: index\n          }\n        }\n      }else{\n        return {\n          data: tagExp,\n          index: index\n        }\n      }\n    } else if (ch === '\\t') {\n      ch = \" \"\n    }\n    tagExp += ch;\n  }\n}\n\nfunction findClosingIndex(xmlData, str, i, errMsg){\n  const closingIndex = xmlData.indexOf(str, i);\n  if(closingIndex === -1){\n    throw new Error(errMsg)\n  }else{\n    return closingIndex + str.length - 1;\n  }\n}\n\nfunction readTagExp(xmlData,i, removeNSPrefix, closingChar = \">\"){\n  const result = tagExpWithClosingIndex(xmlData, i+1, closingChar);\n  if(!result) return;\n  let tagExp = result.data;\n  const closeIndex = result.index;\n  const separatorIndex = tagExp.search(/\\s/);\n  let tagName = tagExp;\n  let attrExpPresent = true;\n  if(separatorIndex !== -1){//separate tag name and attributes expression\n    tagName = tagExp.substring(0, separatorIndex);\n    tagExp = tagExp.substring(separatorIndex + 1).trimStart();\n  }\n\n  const rawTagName = tagName;\n  if(removeNSPrefix){\n    const colonIndex = tagName.indexOf(\":\");\n    if(colonIndex !== -1){\n      tagName = tagName.substr(colonIndex+1);\n      attrExpPresent = tagName !== result.data.substr(colonIndex + 1);\n    }\n  }\n\n  return {\n    tagName: tagName,\n    tagExp: tagExp,\n    closeIndex: closeIndex,\n    attrExpPresent: attrExpPresent,\n    rawTagName: rawTagName,\n  }\n}\n/**\n * find paired tag for a stop node\n * @param {string} xmlData \n * @param {string} tagName \n * @param {number} i \n */\nfunction readStopNodeData(xmlData, tagName, i){\n  const startIndex = i;\n  // Starting at 1 since we already have an open tag\n  let openTagCount = 1;\n\n  for (; i < xmlData.length; i++) {\n    if( xmlData[i] === \"<\"){ \n      if (xmlData[i+1] === \"/\") {//close tag\n          const closeIndex = findClosingIndex(xmlData, \">\", i, `${tagName} is not closed`);\n          let closeTagName = xmlData.substring(i+2,closeIndex).trim();\n          if(closeTagName === tagName){\n            openTagCount--;\n            if (openTagCount === 0) {\n              return {\n                tagContent: xmlData.substring(startIndex, i),\n                i : closeIndex\n              }\n            }\n          }\n          i=closeIndex;\n        } else if(xmlData[i+1] === '?') { \n          const closeIndex = findClosingIndex(xmlData, \"?>\", i+1, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 3) === '!--') { \n          const closeIndex = findClosingIndex(xmlData, \"-->\", i+3, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 2) === '![') { \n          const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"StopNode is not closed.\") - 2;\n          i=closeIndex;\n        } else {\n          const tagData = readTagExp(xmlData, i, '>')\n\n          if (tagData) {\n            const openTagName = tagData && tagData.tagName;\n            if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length-1] !== \"/\") {\n              openTagCount++;\n            }\n            i=tagData.closeIndex;\n          }\n        }\n      }\n  }//end for loop\n}\n\nfunction parseValue(val, shouldParse, options) {\n  if (shouldParse && typeof val === 'string') {\n    //console.log(options)\n    const newval = val.trim();\n    if(newval === 'true' ) return true;\n    else if(newval === 'false' ) return false;\n    else return toNumber(val, options);\n  } else {\n    if (util.isExist(val)) {\n      return val;\n    } else {\n      return '';\n    }\n  }\n}\n\n\nmodule.exports = OrderedObjParser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/fast-xml-parser/src/xmlparser/XMLParser.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/fast-xml-parser/src/xmlparser/XMLParser.js ***!
  \****************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const { buildOptions} = __webpack_require__(/*! ./OptionsBuilder */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js\");\nconst OrderedObjParser = __webpack_require__(/*! ./OrderedObjParser */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js\");\nconst { prettify} = __webpack_require__(/*! ./node2json */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/fast-xml-parser/src/xmlparser/node2json.js\");\nconst validator = __webpack_require__(/*! ../validator */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/fast-xml-parser/src/validator.js\");\n\nclass XMLParser{\n    \n    constructor(options){\n        this.externalEntities = {};\n        this.options = buildOptions(options);\n        \n    }\n    /**\n     * Parse XML dats to JS object \n     * @param {string|Buffer} xmlData \n     * @param {boolean|Object} validationOption \n     */\n    parse(xmlData,validationOption){\n        if(typeof xmlData === \"string\"){\n        }else if( xmlData.toString){\n            xmlData = xmlData.toString();\n        }else{\n            throw new Error(\"XML data is accepted in String or Bytes[] form.\")\n        }\n        if( validationOption){\n            if(validationOption === true) validationOption = {}; //validate with default options\n            \n            const result = validator.validate(xmlData, validationOption);\n            if (result !== true) {\n              throw Error( `${result.err.msg}:${result.err.line}:${result.err.col}` )\n            }\n          }\n        const orderedObjParser = new OrderedObjParser(this.options);\n        orderedObjParser.addExternalEntities(this.externalEntities);\n        const orderedResult = orderedObjParser.parseXml(xmlData);\n        if(this.options.preserveOrder || orderedResult === undefined) return orderedResult;\n        else return prettify(orderedResult, this.options);\n    }\n\n    /**\n     * Add Entity which is not by default supported by this library\n     * @param {string} key \n     * @param {string} value \n     */\n    addEntity(key, value){\n        if(value.indexOf(\"&\") !== -1){\n            throw new Error(\"Entity value can't have '&'\")\n        }else if(key.indexOf(\"&\") !== -1 || key.indexOf(\";\") !== -1){\n            throw new Error(\"An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'\")\n        }else if(value === \"&\"){\n            throw new Error(\"An entity with value '&' is not permitted\");\n        }else{\n            this.externalEntities[key] = value;\n        }\n    }\n}\n\nmodule.exports = XMLParser;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL25vZGVfbW9kdWxlcy9mYXN0LXhtbC1wYXJzZXIvc3JjL3htbHBhcnNlci9YTUxQYXJzZXIuanMiLCJtYXBwaW5ncyI6IkFBQUEsUUFBUSxjQUFjLEVBQUUsbUJBQU8sQ0FBQyxpSUFBa0I7QUFDbEQseUJBQXlCLG1CQUFPLENBQUMscUlBQW9CO0FBQ3JELFFBQVEsVUFBVSxFQUFFLG1CQUFPLENBQUMsdUhBQWE7QUFDekMsa0JBQWtCLG1CQUFPLENBQUMsOEdBQWM7O0FBRXhDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsZUFBZTtBQUM5QixlQUFlLGdCQUFnQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsaUVBQWlFO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixlQUFlLEdBQUcsZ0JBQWdCLEdBQUcsZUFBZTtBQUNsRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxpREFBaUQ7QUFDMUQscUVBQXFFLDJCQUEyQjtBQUNoRyxTQUFTO0FBQ1Q7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIi9Vc2Vycy9sdWNhc3NhbnRvcy9Eb3dubG9hZHMvdml0cmlueS13ZWItbGwvbm9kZV9tb2R1bGVzL0Bnb29nbGUtY2xvdWQvc3RvcmFnZS9ub2RlX21vZHVsZXMvZmFzdC14bWwtcGFyc2VyL3NyYy94bWxwYXJzZXIvWE1MUGFyc2VyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgYnVpbGRPcHRpb25zfSA9IHJlcXVpcmUoXCIuL09wdGlvbnNCdWlsZGVyXCIpO1xuY29uc3QgT3JkZXJlZE9ialBhcnNlciA9IHJlcXVpcmUoXCIuL09yZGVyZWRPYmpQYXJzZXJcIik7XG5jb25zdCB7IHByZXR0aWZ5fSA9IHJlcXVpcmUoXCIuL25vZGUyanNvblwiKTtcbmNvbnN0IHZhbGlkYXRvciA9IHJlcXVpcmUoJy4uL3ZhbGlkYXRvcicpO1xuXG5jbGFzcyBYTUxQYXJzZXJ7XG4gICAgXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucyl7XG4gICAgICAgIHRoaXMuZXh0ZXJuYWxFbnRpdGllcyA9IHt9O1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBidWlsZE9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIFxuICAgIH1cbiAgICAvKipcbiAgICAgKiBQYXJzZSBYTUwgZGF0cyB0byBKUyBvYmplY3QgXG4gICAgICogQHBhcmFtIHtzdHJpbmd8QnVmZmVyfSB4bWxEYXRhIFxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbnxPYmplY3R9IHZhbGlkYXRpb25PcHRpb24gXG4gICAgICovXG4gICAgcGFyc2UoeG1sRGF0YSx2YWxpZGF0aW9uT3B0aW9uKXtcbiAgICAgICAgaWYodHlwZW9mIHhtbERhdGEgPT09IFwic3RyaW5nXCIpe1xuICAgICAgICB9ZWxzZSBpZiggeG1sRGF0YS50b1N0cmluZyl7XG4gICAgICAgICAgICB4bWxEYXRhID0geG1sRGF0YS50b1N0cmluZygpO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlhNTCBkYXRhIGlzIGFjY2VwdGVkIGluIFN0cmluZyBvciBCeXRlc1tdIGZvcm0uXCIpXG4gICAgICAgIH1cbiAgICAgICAgaWYoIHZhbGlkYXRpb25PcHRpb24pe1xuICAgICAgICAgICAgaWYodmFsaWRhdGlvbk9wdGlvbiA9PT0gdHJ1ZSkgdmFsaWRhdGlvbk9wdGlvbiA9IHt9OyAvL3ZhbGlkYXRlIHdpdGggZGVmYXVsdCBvcHRpb25zXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHZhbGlkYXRvci52YWxpZGF0ZSh4bWxEYXRhLCB2YWxpZGF0aW9uT3B0aW9uKTtcbiAgICAgICAgICAgIGlmIChyZXN1bHQgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoIGAke3Jlc3VsdC5lcnIubXNnfToke3Jlc3VsdC5lcnIubGluZX06JHtyZXN1bHQuZXJyLmNvbH1gIClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIGNvbnN0IG9yZGVyZWRPYmpQYXJzZXIgPSBuZXcgT3JkZXJlZE9ialBhcnNlcih0aGlzLm9wdGlvbnMpO1xuICAgICAgICBvcmRlcmVkT2JqUGFyc2VyLmFkZEV4dGVybmFsRW50aXRpZXModGhpcy5leHRlcm5hbEVudGl0aWVzKTtcbiAgICAgICAgY29uc3Qgb3JkZXJlZFJlc3VsdCA9IG9yZGVyZWRPYmpQYXJzZXIucGFyc2VYbWwoeG1sRGF0YSk7XG4gICAgICAgIGlmKHRoaXMub3B0aW9ucy5wcmVzZXJ2ZU9yZGVyIHx8IG9yZGVyZWRSZXN1bHQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIG9yZGVyZWRSZXN1bHQ7XG4gICAgICAgIGVsc2UgcmV0dXJuIHByZXR0aWZ5KG9yZGVyZWRSZXN1bHQsIHRoaXMub3B0aW9ucyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkIEVudGl0eSB3aGljaCBpcyBub3QgYnkgZGVmYXVsdCBzdXBwb3J0ZWQgYnkgdGhpcyBsaWJyYXJ5XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgXG4gICAgICovXG4gICAgYWRkRW50aXR5KGtleSwgdmFsdWUpe1xuICAgICAgICBpZih2YWx1ZS5pbmRleE9mKFwiJlwiKSAhPT0gLTEpe1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRW50aXR5IHZhbHVlIGNhbid0IGhhdmUgJyYnXCIpXG4gICAgICAgIH1lbHNlIGlmKGtleS5pbmRleE9mKFwiJlwiKSAhPT0gLTEgfHwga2V5LmluZGV4T2YoXCI7XCIpICE9PSAtMSl7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBbiBlbnRpdHkgbXVzdCBiZSBzZXQgd2l0aG91dCAnJicgYW5kICc7Jy4gRWcuIHVzZSAnI3hEJyBmb3IgJyYjeEQ7J1wiKVxuICAgICAgICB9ZWxzZSBpZih2YWx1ZSA9PT0gXCImXCIpe1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQW4gZW50aXR5IHdpdGggdmFsdWUgJyYnIGlzIG5vdCBwZXJtaXR0ZWRcIik7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgdGhpcy5leHRlcm5hbEVudGl0aWVzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBYTUxQYXJzZXI7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/fast-xml-parser/src/xmlparser/XMLParser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/fast-xml-parser/src/xmlparser/node2json.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/fast-xml-parser/src/xmlparser/node2json.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\n/**\n * \n * @param {array} node \n * @param {any} options \n * @returns \n */\nfunction prettify(node, options){\n  return compress( node, options);\n}\n\n/**\n * \n * @param {array} arr \n * @param {object} options \n * @param {string} jPath \n * @returns object\n */\nfunction compress(arr, options, jPath){\n  let text;\n  const compressedObj = {};\n  for (let i = 0; i < arr.length; i++) {\n    const tagObj = arr[i];\n    const property = propName(tagObj);\n    let newJpath = \"\";\n    if(jPath === undefined) newJpath = property;\n    else newJpath = jPath + \".\" + property;\n\n    if(property === options.textNodeName){\n      if(text === undefined) text = tagObj[property];\n      else text += \"\" + tagObj[property];\n    }else if(property === undefined){\n      continue;\n    }else if(tagObj[property]){\n      \n      let val = compress(tagObj[property], options, newJpath);\n      const isLeaf = isLeafTag(val, options);\n\n      if(tagObj[\":@\"]){\n        assignAttributes( val, tagObj[\":@\"], newJpath, options);\n      }else if(Object.keys(val).length === 1 && val[options.textNodeName] !== undefined && !options.alwaysCreateTextNode){\n        val = val[options.textNodeName];\n      }else if(Object.keys(val).length === 0){\n        if(options.alwaysCreateTextNode) val[options.textNodeName] = \"\";\n        else val = \"\";\n      }\n\n      if(compressedObj[property] !== undefined && compressedObj.hasOwnProperty(property)) {\n        if(!Array.isArray(compressedObj[property])) {\n            compressedObj[property] = [ compressedObj[property] ];\n        }\n        compressedObj[property].push(val);\n      }else{\n        //TODO: if a node is not an array, then check if it should be an array\n        //also determine if it is a leaf node\n        if (options.isArray(property, newJpath, isLeaf )) {\n          compressedObj[property] = [val];\n        }else{\n          compressedObj[property] = val;\n        }\n      }\n    }\n    \n  }\n  // if(text && text.length > 0) compressedObj[options.textNodeName] = text;\n  if(typeof text === \"string\"){\n    if(text.length > 0) compressedObj[options.textNodeName] = text;\n  }else if(text !== undefined) compressedObj[options.textNodeName] = text;\n  return compressedObj;\n}\n\nfunction propName(obj){\n  const keys = Object.keys(obj);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if(key !== \":@\") return key;\n  }\n}\n\nfunction assignAttributes(obj, attrMap, jpath, options){\n  if (attrMap) {\n    const keys = Object.keys(attrMap);\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      const atrrName = keys[i];\n      if (options.isArray(atrrName, jpath + \".\" + atrrName, true, true)) {\n        obj[atrrName] = [ attrMap[atrrName] ];\n      } else {\n        obj[atrrName] = attrMap[atrrName];\n      }\n    }\n  }\n}\n\nfunction isLeafTag(obj, options){\n  const { textNodeName } = options;\n  const propCount = Object.keys(obj).length;\n  \n  if (propCount === 0) {\n    return true;\n  }\n\n  if (\n    propCount === 1 &&\n    (obj[textNodeName] || typeof obj[textNodeName] === \"boolean\" || obj[textNodeName] === 0)\n  ) {\n    return true;\n  }\n\n  return false;\n}\nexports.prettify = prettify;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL25vZGVfbW9kdWxlcy9mYXN0LXhtbC1wYXJzZXIvc3JjL3htbHBhcnNlci9ub2RlMmpzb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLEtBQUs7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixnQkFBZ0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGtCQUFrQixpQkFBaUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCLG9CQUFvQixTQUFTO0FBQzdCO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsVUFBVSxlQUFlO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxnQkFBZ0IiLCJzb3VyY2VzIjpbIi9Vc2Vycy9sdWNhc3NhbnRvcy9Eb3dubG9hZHMvdml0cmlueS13ZWItbGwvbm9kZV9tb2R1bGVzL0Bnb29nbGUtY2xvdWQvc3RvcmFnZS9ub2RlX21vZHVsZXMvZmFzdC14bWwtcGFyc2VyL3NyYy94bWxwYXJzZXIvbm9kZTJqc29uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBcbiAqIEBwYXJhbSB7YXJyYXl9IG5vZGUgXG4gKiBAcGFyYW0ge2FueX0gb3B0aW9ucyBcbiAqIEByZXR1cm5zIFxuICovXG5mdW5jdGlvbiBwcmV0dGlmeShub2RlLCBvcHRpb25zKXtcbiAgcmV0dXJuIGNvbXByZXNzKCBub2RlLCBvcHRpb25zKTtcbn1cblxuLyoqXG4gKiBcbiAqIEBwYXJhbSB7YXJyYXl9IGFyciBcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIFxuICogQHBhcmFtIHtzdHJpbmd9IGpQYXRoIFxuICogQHJldHVybnMgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGNvbXByZXNzKGFyciwgb3B0aW9ucywgalBhdGgpe1xuICBsZXQgdGV4dDtcbiAgY29uc3QgY29tcHJlc3NlZE9iaiA9IHt9O1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHRhZ09iaiA9IGFycltpXTtcbiAgICBjb25zdCBwcm9wZXJ0eSA9IHByb3BOYW1lKHRhZ09iaik7XG4gICAgbGV0IG5ld0pwYXRoID0gXCJcIjtcbiAgICBpZihqUGF0aCA9PT0gdW5kZWZpbmVkKSBuZXdKcGF0aCA9IHByb3BlcnR5O1xuICAgIGVsc2UgbmV3SnBhdGggPSBqUGF0aCArIFwiLlwiICsgcHJvcGVydHk7XG5cbiAgICBpZihwcm9wZXJ0eSA9PT0gb3B0aW9ucy50ZXh0Tm9kZU5hbWUpe1xuICAgICAgaWYodGV4dCA9PT0gdW5kZWZpbmVkKSB0ZXh0ID0gdGFnT2JqW3Byb3BlcnR5XTtcbiAgICAgIGVsc2UgdGV4dCArPSBcIlwiICsgdGFnT2JqW3Byb3BlcnR5XTtcbiAgICB9ZWxzZSBpZihwcm9wZXJ0eSA9PT0gdW5kZWZpbmVkKXtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1lbHNlIGlmKHRhZ09ialtwcm9wZXJ0eV0pe1xuICAgICAgXG4gICAgICBsZXQgdmFsID0gY29tcHJlc3ModGFnT2JqW3Byb3BlcnR5XSwgb3B0aW9ucywgbmV3SnBhdGgpO1xuICAgICAgY29uc3QgaXNMZWFmID0gaXNMZWFmVGFnKHZhbCwgb3B0aW9ucyk7XG5cbiAgICAgIGlmKHRhZ09ialtcIjpAXCJdKXtcbiAgICAgICAgYXNzaWduQXR0cmlidXRlcyggdmFsLCB0YWdPYmpbXCI6QFwiXSwgbmV3SnBhdGgsIG9wdGlvbnMpO1xuICAgICAgfWVsc2UgaWYoT2JqZWN0LmtleXModmFsKS5sZW5ndGggPT09IDEgJiYgdmFsW29wdGlvbnMudGV4dE5vZGVOYW1lXSAhPT0gdW5kZWZpbmVkICYmICFvcHRpb25zLmFsd2F5c0NyZWF0ZVRleHROb2RlKXtcbiAgICAgICAgdmFsID0gdmFsW29wdGlvbnMudGV4dE5vZGVOYW1lXTtcbiAgICAgIH1lbHNlIGlmKE9iamVjdC5rZXlzKHZhbCkubGVuZ3RoID09PSAwKXtcbiAgICAgICAgaWYob3B0aW9ucy5hbHdheXNDcmVhdGVUZXh0Tm9kZSkgdmFsW29wdGlvbnMudGV4dE5vZGVOYW1lXSA9IFwiXCI7XG4gICAgICAgIGVsc2UgdmFsID0gXCJcIjtcbiAgICAgIH1cblxuICAgICAgaWYoY29tcHJlc3NlZE9ialtwcm9wZXJ0eV0gIT09IHVuZGVmaW5lZCAmJiBjb21wcmVzc2VkT2JqLmhhc093blByb3BlcnR5KHByb3BlcnR5KSkge1xuICAgICAgICBpZighQXJyYXkuaXNBcnJheShjb21wcmVzc2VkT2JqW3Byb3BlcnR5XSkpIHtcbiAgICAgICAgICAgIGNvbXByZXNzZWRPYmpbcHJvcGVydHldID0gWyBjb21wcmVzc2VkT2JqW3Byb3BlcnR5XSBdO1xuICAgICAgICB9XG4gICAgICAgIGNvbXByZXNzZWRPYmpbcHJvcGVydHldLnB1c2godmFsKTtcbiAgICAgIH1lbHNle1xuICAgICAgICAvL1RPRE86IGlmIGEgbm9kZSBpcyBub3QgYW4gYXJyYXksIHRoZW4gY2hlY2sgaWYgaXQgc2hvdWxkIGJlIGFuIGFycmF5XG4gICAgICAgIC8vYWxzbyBkZXRlcm1pbmUgaWYgaXQgaXMgYSBsZWFmIG5vZGVcbiAgICAgICAgaWYgKG9wdGlvbnMuaXNBcnJheShwcm9wZXJ0eSwgbmV3SnBhdGgsIGlzTGVhZiApKSB7XG4gICAgICAgICAgY29tcHJlc3NlZE9ialtwcm9wZXJ0eV0gPSBbdmFsXTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgY29tcHJlc3NlZE9ialtwcm9wZXJ0eV0gPSB2YWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgXG4gIH1cbiAgLy8gaWYodGV4dCAmJiB0ZXh0Lmxlbmd0aCA+IDApIGNvbXByZXNzZWRPYmpbb3B0aW9ucy50ZXh0Tm9kZU5hbWVdID0gdGV4dDtcbiAgaWYodHlwZW9mIHRleHQgPT09IFwic3RyaW5nXCIpe1xuICAgIGlmKHRleHQubGVuZ3RoID4gMCkgY29tcHJlc3NlZE9ialtvcHRpb25zLnRleHROb2RlTmFtZV0gPSB0ZXh0O1xuICB9ZWxzZSBpZih0ZXh0ICE9PSB1bmRlZmluZWQpIGNvbXByZXNzZWRPYmpbb3B0aW9ucy50ZXh0Tm9kZU5hbWVdID0gdGV4dDtcbiAgcmV0dXJuIGNvbXByZXNzZWRPYmo7XG59XG5cbmZ1bmN0aW9uIHByb3BOYW1lKG9iail7XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBrZXkgPSBrZXlzW2ldO1xuICAgIGlmKGtleSAhPT0gXCI6QFwiKSByZXR1cm4ga2V5O1xuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2lnbkF0dHJpYnV0ZXMob2JqLCBhdHRyTWFwLCBqcGF0aCwgb3B0aW9ucyl7XG4gIGlmIChhdHRyTWFwKSB7XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGF0dHJNYXApO1xuICAgIGNvbnN0IGxlbiA9IGtleXMubGVuZ3RoOyAvL2Rvbid0IG1ha2UgaXQgaW5saW5lXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgY29uc3QgYXRyck5hbWUgPSBrZXlzW2ldO1xuICAgICAgaWYgKG9wdGlvbnMuaXNBcnJheShhdHJyTmFtZSwganBhdGggKyBcIi5cIiArIGF0cnJOYW1lLCB0cnVlLCB0cnVlKSkge1xuICAgICAgICBvYmpbYXRyck5hbWVdID0gWyBhdHRyTWFwW2F0cnJOYW1lXSBdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2JqW2F0cnJOYW1lXSA9IGF0dHJNYXBbYXRyck5hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpc0xlYWZUYWcob2JqLCBvcHRpb25zKXtcbiAgY29uc3QgeyB0ZXh0Tm9kZU5hbWUgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IHByb3BDb3VudCA9IE9iamVjdC5rZXlzKG9iaikubGVuZ3RoO1xuICBcbiAgaWYgKHByb3BDb3VudCA9PT0gMCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKFxuICAgIHByb3BDb3VudCA9PT0gMSAmJlxuICAgIChvYmpbdGV4dE5vZGVOYW1lXSB8fCB0eXBlb2Ygb2JqW3RleHROb2RlTmFtZV0gPT09IFwiYm9vbGVhblwiIHx8IG9ialt0ZXh0Tm9kZU5hbWVdID09PSAwKVxuICApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydHMucHJldHRpZnkgPSBwcmV0dGlmeTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/fast-xml-parser/src/xmlparser/node2json.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/fast-xml-parser/src/xmlparser/xmlNode.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/fast-xml-parser/src/xmlparser/xmlNode.js ***!
  \**************************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nclass XmlNode{\n  constructor(tagname) {\n    this.tagname = tagname;\n    this.child = []; //nested tags, text, cdata, comments in order\n    this[\":@\"] = {}; //attributes map\n  }\n  add(key,val){\n    // this.child.push( {name : key, val: val, isCdata: isCdata });\n    if(key === \"__proto__\") key = \"#__proto__\";\n    this.child.push( {[key]: val });\n  }\n  addChild(node) {\n    if(node.tagname === \"__proto__\") node.tagname = \"#__proto__\";\n    if(node[\":@\"] && Object.keys(node[\":@\"]).length > 0){\n      this.child.push( { [node.tagname]: node.child, [\":@\"]: node[\":@\"] });\n    }else{\n      this.child.push( { [node.tagname]: node.child });\n    }\n  };\n};\n\n\nmodule.exports = XmlNode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL25vZGVfbW9kdWxlcy9mYXN0LXhtbC1wYXJzZXIvc3JjL3htbHBhcnNlci94bWxOb2RlLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQixxQkFBcUI7QUFDckI7QUFDQTtBQUNBLHlCQUF5Qix3Q0FBd0M7QUFDakU7QUFDQSxzQkFBc0IsWUFBWTtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixnREFBZ0Q7QUFDekUsS0FBSztBQUNMLHlCQUF5Qiw0QkFBNEI7QUFDckQ7QUFDQTtBQUNBOzs7QUFHQSIsInNvdXJjZXMiOlsiL1VzZXJzL2x1Y2Fzc2FudG9zL0Rvd25sb2Fkcy92aXRyaW55LXdlYi1sbC9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL25vZGVfbW9kdWxlcy9mYXN0LXhtbC1wYXJzZXIvc3JjL3htbHBhcnNlci94bWxOb2RlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY2xhc3MgWG1sTm9kZXtcbiAgY29uc3RydWN0b3IodGFnbmFtZSkge1xuICAgIHRoaXMudGFnbmFtZSA9IHRhZ25hbWU7XG4gICAgdGhpcy5jaGlsZCA9IFtdOyAvL25lc3RlZCB0YWdzLCB0ZXh0LCBjZGF0YSwgY29tbWVudHMgaW4gb3JkZXJcbiAgICB0aGlzW1wiOkBcIl0gPSB7fTsgLy9hdHRyaWJ1dGVzIG1hcFxuICB9XG4gIGFkZChrZXksdmFsKXtcbiAgICAvLyB0aGlzLmNoaWxkLnB1c2goIHtuYW1lIDoga2V5LCB2YWw6IHZhbCwgaXNDZGF0YTogaXNDZGF0YSB9KTtcbiAgICBpZihrZXkgPT09IFwiX19wcm90b19fXCIpIGtleSA9IFwiI19fcHJvdG9fX1wiO1xuICAgIHRoaXMuY2hpbGQucHVzaCgge1trZXldOiB2YWwgfSk7XG4gIH1cbiAgYWRkQ2hpbGQobm9kZSkge1xuICAgIGlmKG5vZGUudGFnbmFtZSA9PT0gXCJfX3Byb3RvX19cIikgbm9kZS50YWduYW1lID0gXCIjX19wcm90b19fXCI7XG4gICAgaWYobm9kZVtcIjpAXCJdICYmIE9iamVjdC5rZXlzKG5vZGVbXCI6QFwiXSkubGVuZ3RoID4gMCl7XG4gICAgICB0aGlzLmNoaWxkLnB1c2goIHsgW25vZGUudGFnbmFtZV06IG5vZGUuY2hpbGQsIFtcIjpAXCJdOiBub2RlW1wiOkBcIl0gfSk7XG4gICAgfWVsc2V7XG4gICAgICB0aGlzLmNoaWxkLnB1c2goIHsgW25vZGUudGFnbmFtZV06IG5vZGUuY2hpbGQgfSk7XG4gICAgfVxuICB9O1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IFhtbE5vZGU7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/fast-xml-parser/src/xmlparser/xmlNode.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/uuid/dist/esm-node/regex.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/uuid/dist/esm-node/regex.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvcmVnZXguanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLGNBQWMsRUFBRSxVQUFVLEVBQUUsZUFBZSxFQUFFLGdCQUFnQixFQUFFLFVBQVUsR0FBRyx5Q0FBeUMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9sdWNhc3NhbnRvcy9Eb3dubG9hZHMvdml0cmlueS13ZWItbGwvbm9kZV9tb2R1bGVzL0Bnb29nbGUtY2xvdWQvc3RvcmFnZS9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3JlZ2V4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IC9eKD86WzAtOWEtZl17OH0tWzAtOWEtZl17NH0tWzEtNV1bMC05YS1mXXszfS1bODlhYl1bMC05YS1mXXszfS1bMC05YS1mXXsxMn18MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwKSQvaTsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/uuid/dist/esm-node/regex.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/uuid/dist/esm-node/rng.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/uuid/dist/esm-node/rng.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ rng)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n\nconst rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate\n\nlet poolPtr = rnds8Pool.length;\nfunction rng() {\n  if (poolPtr > rnds8Pool.length - 16) {\n    crypto__WEBPACK_IMPORTED_MODULE_0___default().randomFillSync(rnds8Pool);\n    poolPtr = 0;\n  }\n\n  return rnds8Pool.slice(poolPtr, poolPtr += 16);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvcm5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE0QjtBQUM1Qix1Q0FBdUM7O0FBRXZDO0FBQ2U7QUFDZjtBQUNBLElBQUksNERBQXFCO0FBQ3pCO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2x1Y2Fzc2FudG9zL0Rvd25sb2Fkcy92aXRyaW55LXdlYi1sbC9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvcm5nLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjcnlwdG8gZnJvbSAnY3J5cHRvJztcbmNvbnN0IHJuZHM4UG9vbCA9IG5ldyBVaW50OEFycmF5KDI1Nik7IC8vICMgb2YgcmFuZG9tIHZhbHVlcyB0byBwcmUtYWxsb2NhdGVcblxubGV0IHBvb2xQdHIgPSBybmRzOFBvb2wubGVuZ3RoO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcm5nKCkge1xuICBpZiAocG9vbFB0ciA+IHJuZHM4UG9vbC5sZW5ndGggLSAxNikge1xuICAgIGNyeXB0by5yYW5kb21GaWxsU3luYyhybmRzOFBvb2wpO1xuICAgIHBvb2xQdHIgPSAwO1xuICB9XG5cbiAgcmV0dXJuIHJuZHM4UG9vbC5zbGljZShwb29sUHRyLCBwb29sUHRyICs9IDE2KTtcbn0iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/uuid/dist/esm-node/rng.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/uuid/dist/esm-node/stringify.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/uuid/dist/esm-node/stringify.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/uuid/dist/esm-node/validate.js\");\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (stringify);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvc3RyaW5naWZ5LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLGdCQUFnQixTQUFTO0FBQ3pCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsNGdCQUE0Z0I7QUFDNWdCO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU8sd0RBQVE7QUFDZjtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsaUVBQWUsU0FBUyIsInNvdXJjZXMiOlsiL1VzZXJzL2x1Y2Fzc2FudG9zL0Rvd25sb2Fkcy92aXRyaW55LXdlYi1sbC9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvc3RyaW5naWZ5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB2YWxpZGF0ZSBmcm9tICcuL3ZhbGlkYXRlLmpzJztcbi8qKlxuICogQ29udmVydCBhcnJheSBvZiAxNiBieXRlIHZhbHVlcyB0byBVVUlEIHN0cmluZyBmb3JtYXQgb2YgdGhlIGZvcm06XG4gKiBYWFhYWFhYWC1YWFhYLVhYWFgtWFhYWC1YWFhYWFhYWFhYWFhcbiAqL1xuXG5jb25zdCBieXRlVG9IZXggPSBbXTtcblxuZm9yIChsZXQgaSA9IDA7IGkgPCAyNTY7ICsraSkge1xuICBieXRlVG9IZXgucHVzaCgoaSArIDB4MTAwKS50b1N0cmluZygxNikuc3Vic3RyKDEpKTtcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5KGFyciwgb2Zmc2V0ID0gMCkge1xuICAvLyBOb3RlOiBCZSBjYXJlZnVsIGVkaXRpbmcgdGhpcyBjb2RlISAgSXQncyBiZWVuIHR1bmVkIGZvciBwZXJmb3JtYW5jZVxuICAvLyBhbmQgd29ya3MgaW4gd2F5cyB5b3UgbWF5IG5vdCBleHBlY3QuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdXVpZGpzL3V1aWQvcHVsbC80MzRcbiAgY29uc3QgdXVpZCA9IChieXRlVG9IZXhbYXJyW29mZnNldCArIDBdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMV1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAyXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDNdXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA1XV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDZdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgN11dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA4XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDldXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTBdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTFdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTJdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTNdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTRdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTVdXSkudG9Mb3dlckNhc2UoKTsgLy8gQ29uc2lzdGVuY3kgY2hlY2sgZm9yIHZhbGlkIFVVSUQuICBJZiB0aGlzIHRocm93cywgaXQncyBsaWtlbHkgZHVlIHRvIG9uZVxuICAvLyBvZiB0aGUgZm9sbG93aW5nOlxuICAvLyAtIE9uZSBvciBtb3JlIGlucHV0IGFycmF5IHZhbHVlcyBkb24ndCBtYXAgdG8gYSBoZXggb2N0ZXQgKGxlYWRpbmcgdG9cbiAgLy8gXCJ1bmRlZmluZWRcIiBpbiB0aGUgdXVpZClcbiAgLy8gLSBJbnZhbGlkIGlucHV0IHZhbHVlcyBmb3IgdGhlIFJGQyBgdmVyc2lvbmAgb3IgYHZhcmlhbnRgIGZpZWxkc1xuXG4gIGlmICghdmFsaWRhdGUodXVpZCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ1N0cmluZ2lmaWVkIFVVSUQgaXMgaW52YWxpZCcpO1xuICB9XG5cbiAgcmV0dXJuIHV1aWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0cmluZ2lmeTsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/uuid/dist/esm-node/stringify.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/uuid/dist/esm-node/v4.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/uuid/dist/esm-node/v4.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rng.js */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/uuid/dist/esm-node/rng.js\");\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/uuid/dist/esm-node/stringify.js\");\n\n\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  const rnds = options.random || (options.rng || _rng_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return (0,_stringify_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(rnds);\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v4);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTJCO0FBQ1k7O0FBRXZDO0FBQ0E7QUFDQSxpREFBaUQsK0NBQUcsS0FBSzs7QUFFekQ7QUFDQSxtQ0FBbUM7O0FBRW5DO0FBQ0E7O0FBRUEsb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTs7QUFFQTtBQUNBOztBQUVBLFNBQVMseURBQVM7QUFDbEI7O0FBRUEsaUVBQWUsRUFBRSIsInNvdXJjZXMiOlsiL1VzZXJzL2x1Y2Fzc2FudG9zL0Rvd25sb2Fkcy92aXRyaW55LXdlYi1sbC9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHJuZyBmcm9tICcuL3JuZy5qcyc7XG5pbXBvcnQgc3RyaW5naWZ5IGZyb20gJy4vc3RyaW5naWZ5LmpzJztcblxuZnVuY3Rpb24gdjQob3B0aW9ucywgYnVmLCBvZmZzZXQpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGNvbnN0IHJuZHMgPSBvcHRpb25zLnJhbmRvbSB8fCAob3B0aW9ucy5ybmcgfHwgcm5nKSgpOyAvLyBQZXIgNC40LCBzZXQgYml0cyBmb3IgdmVyc2lvbiBhbmQgYGNsb2NrX3NlcV9oaV9hbmRfcmVzZXJ2ZWRgXG5cbiAgcm5kc1s2XSA9IHJuZHNbNl0gJiAweDBmIHwgMHg0MDtcbiAgcm5kc1s4XSA9IHJuZHNbOF0gJiAweDNmIHwgMHg4MDsgLy8gQ29weSBieXRlcyB0byBidWZmZXIsIGlmIHByb3ZpZGVkXG5cbiAgaWYgKGJ1Zikge1xuICAgIG9mZnNldCA9IG9mZnNldCB8fCAwO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgKytpKSB7XG4gICAgICBidWZbb2Zmc2V0ICsgaV0gPSBybmRzW2ldO1xuICAgIH1cblxuICAgIHJldHVybiBidWY7XG4gIH1cblxuICByZXR1cm4gc3RyaW5naWZ5KHJuZHMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB2NDsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/uuid/dist/esm-node/v4.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/node_modules/uuid/dist/esm-node/validate.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/node_modules/uuid/dist/esm-node/validate.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _regex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./regex.js */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/uuid/dist/esm-node/regex.js\");\n\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && _regex_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].test(uuid);\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (validate);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdmFsaWRhdGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBK0I7O0FBRS9CO0FBQ0EscUNBQXFDLGlEQUFLO0FBQzFDOztBQUVBLGlFQUFlLFFBQVEiLCJzb3VyY2VzIjpbIi9Vc2Vycy9sdWNhc3NhbnRvcy9Eb3dubG9hZHMvdml0cmlueS13ZWItbGwvbm9kZV9tb2R1bGVzL0Bnb29nbGUtY2xvdWQvc3RvcmFnZS9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3ZhbGlkYXRlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSRUdFWCBmcm9tICcuL3JlZ2V4LmpzJztcblxuZnVuY3Rpb24gdmFsaWRhdGUodXVpZCkge1xuICByZXR1cm4gdHlwZW9mIHV1aWQgPT09ICdzdHJpbmcnICYmIFJFR0VYLnRlc3QodXVpZCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHZhbGlkYXRlOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/node_modules/uuid/dist/esm-node/validate.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/build/esm/src/package-json-helper.cjs":
/*!**********************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/build/esm/src/package-json-helper.cjs ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("// Copyright 2023 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/* eslint-disable node/no-missing-require */\n\nfunction getPackageJSON() {\n  return __webpack_require__(/*! ../../../package.json */ \"(rsc)/./node_modules/@google-cloud/storage/package.json\");\n}\n\nexports.getPackageJSON = getPackageJSON;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL2J1aWxkL2VzbS9zcmMvcGFja2FnZS1qc29uLWhlbHBlci5janMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxTQUFTLG1CQUFPLENBQUMsc0ZBQXVCO0FBQ3hDOztBQUVBLHNCQUFzQiIsInNvdXJjZXMiOlsiL1VzZXJzL2x1Y2Fzc2FudG9zL0Rvd25sb2Fkcy92aXRyaW55LXdlYi1sbC9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL2J1aWxkL2VzbS9zcmMvcGFja2FnZS1qc29uLWhlbHBlci5janMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjMgR29vZ2xlIExMQ1xuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbi8qIGVzbGludC1kaXNhYmxlIG5vZGUvbm8tbWlzc2luZy1yZXF1aXJlICovXG5cbmZ1bmN0aW9uIGdldFBhY2thZ2VKU09OKCkge1xuICByZXR1cm4gcmVxdWlyZSgnLi4vLi4vLi4vcGFja2FnZS5qc29uJyk7XG59XG5cbmV4cG9ydHMuZ2V0UGFja2FnZUpTT04gPSBnZXRQYWNrYWdlSlNPTjtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/build/esm/src/package-json-helper.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/build/esm/src/acl.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/build/esm/src/acl.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Acl: () => (/* binding */ Acl),\n/* harmony export */   AclRoleAccessorMethods: () => (/* binding */ AclRoleAccessorMethods)\n/* harmony export */ });\n/* harmony import */ var _google_cloud_promisify__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @google-cloud/promisify */ \"(rsc)/./node_modules/@google-cloud/promisify/build/src/index.js\");\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * Attach functionality to a {@link Storage.acl} instance. This will add an\n * object for each role group (owners, readers, and writers), with each object\n * containing methods to add or delete a type of entity.\n *\n * As an example, here are a few methods that are created.\n *\n *   myBucket.acl.readers.deleteGroup('groupId', function(err) {});\n *\n *   myBucket.acl.owners.addUser('email@example.com', function(err, acl) {});\n *\n *   myBucket.acl.writers.addDomain('example.com', function(err, acl) {});\n *\n * @private\n */\nclass AclRoleAccessorMethods {\n    constructor() {\n        this.owners = {};\n        this.readers = {};\n        this.writers = {};\n        /**\n         * An object of convenience methods to add or delete owner ACL permissions\n         * for a given entity.\n         *\n         * The supported methods include:\n         *\n         *   - `myFile.acl.owners.addAllAuthenticatedUsers`\n         *   - `myFile.acl.owners.deleteAllAuthenticatedUsers`\n         *   - `myFile.acl.owners.addAllUsers`\n         *   - `myFile.acl.owners.deleteAllUsers`\n         *   - `myFile.acl.owners.addDomain`\n         *   - `myFile.acl.owners.deleteDomain`\n         *   - `myFile.acl.owners.addGroup`\n         *   - `myFile.acl.owners.deleteGroup`\n         *   - `myFile.acl.owners.addProject`\n         *   - `myFile.acl.owners.deleteProject`\n         *   - `myFile.acl.owners.addUser`\n         *   - `myFile.acl.owners.deleteUser`\n         *\n         * @name Acl#owners\n         *\n         * @example\n         * ```\n         * const storage = require('@google-cloud/storage')();\n         * const myBucket = storage.bucket('my-bucket');\n         * const myFile = myBucket.file('my-file');\n         *\n         * //-\n         * // Add a user as an owner of a file.\n         * //-\n         * const myBucket = gcs.bucket('my-bucket');\n         * const myFile = myBucket.file('my-file');\n         * myFile.acl.owners.addUser('email@example.com', function(err, aclObject)\n         * {});\n         *\n         * //-\n         * // For reference, the above command is the same as running the following.\n         * //-\n         * myFile.acl.add({\n         *   entity: 'user-email@example.com',\n         *   role: gcs.acl.OWNER_ROLE\n         * }, function(err, aclObject) {});\n         *\n         * //-\n         * // If the callback is omitted, we'll return a Promise.\n         * //-\n         * myFile.acl.owners.addUser('email@example.com').then(function(data) {\n         *   const aclObject = data[0];\n         *   const apiResponse = data[1];\n         * });\n         * ```\n         */\n        this.owners = {};\n        /**\n         * An object of convenience methods to add or delete reader ACL permissions\n         * for a given entity.\n         *\n         * The supported methods include:\n         *\n         *   - `myFile.acl.readers.addAllAuthenticatedUsers`\n         *   - `myFile.acl.readers.deleteAllAuthenticatedUsers`\n         *   - `myFile.acl.readers.addAllUsers`\n         *   - `myFile.acl.readers.deleteAllUsers`\n         *   - `myFile.acl.readers.addDomain`\n         *   - `myFile.acl.readers.deleteDomain`\n         *   - `myFile.acl.readers.addGroup`\n         *   - `myFile.acl.readers.deleteGroup`\n         *   - `myFile.acl.readers.addProject`\n         *   - `myFile.acl.readers.deleteProject`\n         *   - `myFile.acl.readers.addUser`\n         *   - `myFile.acl.readers.deleteUser`\n         *\n         * @name Acl#readers\n         *\n         * @example\n         * ```\n         * const storage = require('@google-cloud/storage')();\n         * const myBucket = storage.bucket('my-bucket');\n         * const myFile = myBucket.file('my-file');\n         *\n         * //-\n         * // Add a user as a reader of a file.\n         * //-\n         * myFile.acl.readers.addUser('email@example.com', function(err, aclObject)\n         * {});\n         *\n         * //-\n         * // For reference, the above command is the same as running the following.\n         * //-\n         * myFile.acl.add({\n         *   entity: 'user-email@example.com',\n         *   role: gcs.acl.READER_ROLE\n         * }, function(err, aclObject) {});\n         *\n         * //-\n         * // If the callback is omitted, we'll return a Promise.\n         * //-\n         * myFile.acl.readers.addUser('email@example.com').then(function(data) {\n         *   const aclObject = data[0];\n         *   const apiResponse = data[1];\n         * });\n         * ```\n         */\n        this.readers = {};\n        /**\n         * An object of convenience methods to add or delete writer ACL permissions\n         * for a given entity.\n         *\n         * The supported methods include:\n         *\n         *   - `myFile.acl.writers.addAllAuthenticatedUsers`\n         *   - `myFile.acl.writers.deleteAllAuthenticatedUsers`\n         *   - `myFile.acl.writers.addAllUsers`\n         *   - `myFile.acl.writers.deleteAllUsers`\n         *   - `myFile.acl.writers.addDomain`\n         *   - `myFile.acl.writers.deleteDomain`\n         *   - `myFile.acl.writers.addGroup`\n         *   - `myFile.acl.writers.deleteGroup`\n         *   - `myFile.acl.writers.addProject`\n         *   - `myFile.acl.writers.deleteProject`\n         *   - `myFile.acl.writers.addUser`\n         *   - `myFile.acl.writers.deleteUser`\n         *\n         * @name Acl#writers\n         *\n         * @example\n         * ```\n         * const storage = require('@google-cloud/storage')();\n         * const myBucket = storage.bucket('my-bucket');\n         * const myFile = myBucket.file('my-file');\n         *\n         * //-\n         * // Add a user as a writer of a file.\n         * //-\n         * myFile.acl.writers.addUser('email@example.com', function(err, aclObject)\n         * {});\n         *\n         * //-\n         * // For reference, the above command is the same as running the following.\n         * //-\n         * myFile.acl.add({\n         *   entity: 'user-email@example.com',\n         *   role: gcs.acl.WRITER_ROLE\n         * }, function(err, aclObject) {});\n         *\n         * //-\n         * // If the callback is omitted, we'll return a Promise.\n         * //-\n         * myFile.acl.writers.addUser('email@example.com').then(function(data) {\n         *   const aclObject = data[0];\n         *   const apiResponse = data[1];\n         * });\n         * ```\n         */\n        this.writers = {};\n        AclRoleAccessorMethods.roles.forEach(this._assignAccessMethods.bind(this));\n    }\n    _assignAccessMethods(role) {\n        const accessMethods = AclRoleAccessorMethods.accessMethods;\n        const entities = AclRoleAccessorMethods.entities;\n        const roleGroup = role.toLowerCase() + 's';\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this[roleGroup] = entities.reduce((acc, entity) => {\n            const isPrefix = entity.charAt(entity.length - 1) === '-';\n            accessMethods.forEach(accessMethod => {\n                let method = accessMethod + entity[0].toUpperCase() + entity.substring(1);\n                if (isPrefix) {\n                    method = method.replace('-', '');\n                }\n                // Wrap the parent accessor method (e.g. `add` or `delete`) to avoid the\n                // more complex API of specifying an `entity` and `role`.\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                acc[method] = (entityId, options, callback) => {\n                    let apiEntity;\n                    if (typeof options === 'function') {\n                        callback = options;\n                        options = {};\n                    }\n                    if (isPrefix) {\n                        apiEntity = entity + entityId;\n                    }\n                    else {\n                        // If the entity is not a prefix, it is a special entity group\n                        // that does not require further details. The accessor methods\n                        // only accept a callback.\n                        apiEntity = entity;\n                        callback = entityId;\n                    }\n                    options = Object.assign({\n                        entity: apiEntity,\n                        role,\n                    }, options);\n                    const args = [options];\n                    if (typeof callback === 'function') {\n                        args.push(callback);\n                    }\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    return this[accessMethod].apply(this, args);\n                };\n            });\n            return acc;\n        }, {});\n    }\n}\nAclRoleAccessorMethods.accessMethods = ['add', 'delete'];\nAclRoleAccessorMethods.entities = [\n    // Special entity groups that do not require further specification.\n    'allAuthenticatedUsers',\n    'allUsers',\n    // Entity groups that require specification, e.g. `user-email@example.com`.\n    'domain-',\n    'group-',\n    'project-',\n    'user-',\n];\nAclRoleAccessorMethods.roles = ['OWNER', 'READER', 'WRITER'];\n/**\n * Cloud Storage uses access control lists (ACLs) to manage object and\n * bucket access. ACLs are the mechanism you use to share objects with other\n * users and allow other users to access your buckets and objects.\n *\n * An ACL consists of one or more entries, where each entry grants permissions\n * to an entity. Permissions define the actions that can be performed against an\n * object or bucket (for example, `READ` or `WRITE`); the entity defines who the\n * permission applies to (for example, a specific user or group of users).\n *\n * Where an `entity` value is accepted, we follow the format the Cloud Storage\n * API expects.\n *\n * Refer to\n * https://cloud.google.com/storage/docs/json_api/v1/defaultObjectAccessControls\n * for the most up-to-date values.\n *\n *   - `user-userId`\n *   - `user-email`\n *   - `group-groupId`\n *   - `group-email`\n *   - `domain-domain`\n *   - `project-team-projectId`\n *   - `allUsers`\n *   - `allAuthenticatedUsers`\n *\n * Examples:\n *\n *   - The user \"liz@example.com\" would be `user-liz@example.com`.\n *   - The group \"example@googlegroups.com\" would be\n *     `group-example@googlegroups.com`.\n *   - To refer to all members of the Google Apps for Business domain\n *     \"example.com\", the entity would be `domain-example.com`.\n *\n * For more detailed information, see\n * {@link http://goo.gl/6qBBPO| About Access Control Lists}.\n *\n * @constructor Acl\n * @mixin\n * @param {object} options Configuration options.\n */\nclass Acl extends AclRoleAccessorMethods {\n    constructor(options) {\n        super();\n        this.pathPrefix = options.pathPrefix;\n        this.request_ = options.request;\n    }\n    /**\n     * @typedef {array} AddAclResponse\n     * @property {object} 0 The Acl Objects.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * @callback AddAclCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} acl The Acl Objects.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Add access controls on a {@link Bucket} or {@link File}.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/bucketAccessControls/insert| BucketAccessControls: insert API Documentation}\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/objectAccessControls/insert| ObjectAccessControls: insert API Documentation}\n     *\n     * @param {object} options Configuration options.\n     * @param {string} options.entity Whose permissions will be added.\n     * @param {string} options.role Permissions allowed for the defined entity.\n     *     See {@link https://cloud.google.com/storage/docs/access-control Access\n     * Control}.\n     * @param {number} [options.generation] **File Objects Only** Select a specific\n     *     revision of this file (as opposed to the latest version, the default).\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {AddAclCallback} [callback] Callback function.\n     * @returns {Promise<AddAclResponse>}\n     *\n     * @example\n     * ```\n     * const storage = require('@google-cloud/storage')();\n     * const myBucket = storage.bucket('my-bucket');\n     * const myFile = myBucket.file('my-file');\n     *\n     * const options = {\n     *   entity: 'user-useremail@example.com',\n     *   role: gcs.acl.OWNER_ROLE\n     * };\n     *\n     * myBucket.acl.add(options, function(err, aclObject, apiResponse) {});\n     *\n     * //-\n     * // For file ACL operations, you can also specify a `generation` property.\n     * // Here is how you would grant ownership permissions to a user on a\n     * specific\n     * // revision of a file.\n     * //-\n     * myFile.acl.add({\n     *   entity: 'user-useremail@example.com',\n     *   role: gcs.acl.OWNER_ROLE,\n     *   generation: 1\n     * }, function(err, aclObject, apiResponse) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * myBucket.acl.add(options).then(function(data) {\n     *   const aclObject = data[0];\n     *   const apiResponse = data[1];\n     * });\n     *\n     * ```\n     * @example <caption>include:samples/acl.js</caption>\n     * region_tag:storage_add_file_owner\n     * Example of adding an owner to a file:\n     *\n     * @example <caption>include:samples/acl.js</caption>\n     * region_tag:storage_add_bucket_owner\n     * Example of adding an owner to a bucket:\n     *\n     * @example <caption>include:samples/acl.js</caption>\n     * region_tag:storage_add_bucket_default_owner\n     * Example of adding a default owner to a bucket:\n     */\n    add(options, callback) {\n        const query = {};\n        if (options.generation) {\n            query.generation = options.generation;\n        }\n        if (options.userProject) {\n            query.userProject = options.userProject;\n        }\n        this.request({\n            method: 'POST',\n            uri: '',\n            qs: query,\n            maxRetries: 0, //explicitly set this value since this is a non-idempotent function\n            json: {\n                entity: options.entity,\n                role: options.role.toUpperCase(),\n            },\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null, resp);\n                return;\n            }\n            callback(null, this.makeAclObject_(resp), resp);\n        });\n    }\n    /**\n     * @typedef {array} RemoveAclResponse\n     * @property {object} 0 The full API response.\n     */\n    /**\n     * @callback RemoveAclCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Delete access controls on a {@link Bucket} or {@link File}.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/bucketAccessControls/delete| BucketAccessControls: delete API Documentation}\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/objectAccessControls/delete| ObjectAccessControls: delete API Documentation}\n     *\n     * @param {object} options Configuration object.\n     * @param {string} options.entity Whose permissions will be revoked.\n     * @param {int} [options.generation] **File Objects Only** Select a specific\n     *     revision of this file (as opposed to the latest version, the default).\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {RemoveAclCallback} callback The callback function.\n     * @returns {Promise<RemoveAclResponse>}\n     *\n     * @example\n     * ```\n     * const storage = require('@google-cloud/storage')();\n     * const myBucket = storage.bucket('my-bucket');\n     * const myFile = myBucket.file('my-file');\n     *\n     * myBucket.acl.delete({\n     *   entity: 'user-useremail@example.com'\n     * }, function(err, apiResponse) {});\n     *\n     * //-\n     * // For file ACL operations, you can also specify a `generation` property.\n     * //-\n     * myFile.acl.delete({\n     *   entity: 'user-useremail@example.com',\n     *   generation: 1\n     * }, function(err, apiResponse) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * myFile.acl.delete().then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     *\n     * ```\n     * @example <caption>include:samples/acl.js</caption>\n     * region_tag:storage_remove_bucket_owner\n     * Example of removing an owner from a bucket:\n     *\n     * @example <caption>include:samples/acl.js</caption>\n     * region_tag:storage_remove_bucket_default_owner\n     * Example of removing a default owner from a bucket:\n     *\n     * @example <caption>include:samples/acl.js</caption>\n     * region_tag:storage_remove_file_owner\n     * Example of removing an owner from a bucket:\n     */\n    delete(options, callback) {\n        const query = {};\n        if (options.generation) {\n            query.generation = options.generation;\n        }\n        if (options.userProject) {\n            query.userProject = options.userProject;\n        }\n        this.request({\n            method: 'DELETE',\n            uri: '/' + encodeURIComponent(options.entity),\n            qs: query,\n        }, (err, resp) => {\n            callback(err, resp);\n        });\n    }\n    /**\n     * @typedef {array} GetAclResponse\n     * @property {object|object[]} 0 Single or array of Acl Objects.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * @callback GetAclCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object|object[]} acl Single or array of Acl Objects.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Get access controls on a {@link Bucket} or {@link File}. If\n     * an entity is omitted, you will receive an array of all applicable access\n     * controls.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/bucketAccessControls/get| BucketAccessControls: get API Documentation}\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/objectAccessControls/get| ObjectAccessControls: get API Documentation}\n     *\n     * @param {object|function} [options] Configuration options. If you want to\n     *     receive a list of all access controls, pass the callback function as\n     * the only argument.\n     * @param {string} options.entity Whose permissions will be fetched.\n     * @param {number} [options.generation] **File Objects Only** Select a specific\n     *     revision of this file (as opposed to the latest version, the default).\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {GetAclCallback} [callback] Callback function.\n     * @returns {Promise<GetAclResponse>}\n     *\n     * @example\n     * ```\n     * const storage = require('@google-cloud/storage')();\n     * const myBucket = storage.bucket('my-bucket');\n     * const myFile = myBucket.file('my-file');\n     *\n     * myBucket.acl.get({\n     *   entity: 'user-useremail@example.com'\n     * }, function(err, aclObject, apiResponse) {});\n     *\n     * //-\n     * // Get all access controls.\n     * //-\n     * myBucket.acl.get(function(err, aclObjects, apiResponse) {\n     *   // aclObjects = [\n     *   //   {\n     *   //     entity: 'user-useremail@example.com',\n     *   //     role: 'owner'\n     *   //   }\n     *   // ]\n     * });\n     *\n     * //-\n     * // For file ACL operations, you can also specify a `generation` property.\n     * //-\n     * myFile.acl.get({\n     *   entity: 'user-useremail@example.com',\n     *   generation: 1\n     * }, function(err, aclObject, apiResponse) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * myBucket.acl.get().then(function(data) {\n     *   const aclObject = data[0];\n     *   const apiResponse = data[1];\n     * });\n     *\n     * ```\n     * @example <caption>include:samples/acl.js</caption>\n     * region_tag:storage_print_file_acl\n     * Example of printing a file's ACL:\n     *\n     * @example <caption>include:samples/acl.js</caption>\n     * region_tag:storage_print_file_acl_for_user\n     * Example of printing a file's ACL for a specific user:\n     *\n     * @example <caption>include:samples/acl.js</caption>\n     * region_tag:storage_print_bucket_acl\n     * Example of printing a bucket's ACL:\n     *\n     * @example <caption>include:samples/acl.js</caption>\n     * region_tag:storage_print_bucket_acl_for_user\n     * Example of printing a bucket's ACL for a specific user:\n     */\n    get(optionsOrCallback, cb) {\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : null;\n        const callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : cb;\n        let path = '';\n        const query = {};\n        if (options) {\n            path = '/' + encodeURIComponent(options.entity);\n            if (options.generation) {\n                query.generation = options.generation;\n            }\n            if (options.userProject) {\n                query.userProject = options.userProject;\n            }\n        }\n        this.request({\n            uri: path,\n            qs: query,\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null, resp);\n                return;\n            }\n            let results;\n            if (resp.items) {\n                results = resp.items.map(this.makeAclObject_);\n            }\n            else {\n                results = this.makeAclObject_(resp);\n            }\n            callback(null, results, resp);\n        });\n    }\n    /**\n     * @typedef {array} UpdateAclResponse\n     * @property {object} 0 The updated Acl Objects.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * @callback UpdateAclCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} acl The updated Acl Objects.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Update access controls on a {@link Bucket} or {@link File}.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/bucketAccessControls/update| BucketAccessControls: update API Documentation}\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/objectAccessControls/update| ObjectAccessControls: update API Documentation}\n     *\n     * @param {object} options Configuration options.\n     * @param {string} options.entity Whose permissions will be updated.\n     * @param {string} options.role Permissions allowed for the defined entity.\n     *     See {@link Storage.acl}.\n     * @param {number} [options.generation] **File Objects Only** Select a specific\n     *     revision of this file (as opposed to the latest version, the default).\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {UpdateAclCallback} [callback] Callback function.\n     * @returns {Promise<UpdateAclResponse>}\n     *\n     * @example\n     * ```\n     * const storage = require('@google-cloud/storage')();\n     * const myBucket = storage.bucket('my-bucket');\n     * const myFile = myBucket.file('my-file');\n     *\n     * const options = {\n     *   entity: 'user-useremail@example.com',\n     *   role: gcs.acl.WRITER_ROLE\n     * };\n     *\n     * myBucket.acl.update(options, function(err, aclObject, apiResponse) {});\n     *\n     * //-\n     * // For file ACL operations, you can also specify a `generation` property.\n     * //-\n     * myFile.acl.update({\n     *   entity: 'user-useremail@example.com',\n     *   role: gcs.acl.WRITER_ROLE,\n     *   generation: 1\n     * }, function(err, aclObject, apiResponse) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * myFile.acl.update(options).then(function(data) {\n     *   const aclObject = data[0];\n     *   const apiResponse = data[1];\n     * });\n     * ```\n     */\n    update(options, callback) {\n        const query = {};\n        if (options.generation) {\n            query.generation = options.generation;\n        }\n        if (options.userProject) {\n            query.userProject = options.userProject;\n        }\n        this.request({\n            method: 'PUT',\n            uri: '/' + encodeURIComponent(options.entity),\n            qs: query,\n            json: {\n                role: options.role.toUpperCase(),\n            },\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null, resp);\n                return;\n            }\n            callback(null, this.makeAclObject_(resp), resp);\n        });\n    }\n    /**\n     * Transform API responses to a consistent object format.\n     *\n     * @private\n     */\n    makeAclObject_(accessControlObject) {\n        const obj = {\n            entity: accessControlObject.entity,\n            role: accessControlObject.role,\n        };\n        if (accessControlObject.projectTeam) {\n            obj.projectTeam = accessControlObject.projectTeam;\n        }\n        return obj;\n    }\n    /**\n     * Patch requests up to the bucket's request object.\n     *\n     * @private\n     *\n     * @param {string} method Action.\n     * @param {string} path Request path.\n     * @param {*} query Request query object.\n     * @param {*} body Request body contents.\n     * @param {function} callback Callback function.\n     */\n    request(reqOpts, callback) {\n        reqOpts.uri = this.pathPrefix + reqOpts.uri;\n        this.request_(reqOpts, callback);\n    }\n}\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\n(0,_google_cloud_promisify__WEBPACK_IMPORTED_MODULE_0__.promisifyAll)(Acl, {\n    exclude: ['request'],\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/build/esm/src/acl.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/build/esm/src/bucket.js":
/*!********************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/build/esm/src/bucket.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AvailableServiceObjectMethods: () => (/* binding */ AvailableServiceObjectMethods),\n/* harmony export */   Bucket: () => (/* binding */ Bucket),\n/* harmony export */   BucketActionToHTTPMethod: () => (/* binding */ BucketActionToHTTPMethod),\n/* harmony export */   BucketExceptionMessages: () => (/* binding */ BucketExceptionMessages)\n/* harmony export */ });\n/* harmony import */ var _nodejs_common_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./nodejs-common/index.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/nodejs-common/index.js\");\n/* harmony import */ var _google_cloud_paginator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @google-cloud/paginator */ \"(rsc)/./node_modules/@google-cloud/paginator/build/src/index.js\");\n/* harmony import */ var _google_cloud_promisify__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @google-cloud/promisify */ \"(rsc)/./node_modules/@google-cloud/promisify/build/src/index.js\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var mime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! mime */ \"(rsc)/./node_modules/mime/index.js\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var p_limit__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! p-limit */ \"(rsc)/./node_modules/p-limit/index.js\");\n/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! util */ \"util\");\n/* harmony import */ var async_retry__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! async-retry */ \"(rsc)/./node_modules/async-retry/lib/index.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./util.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/util.js\");\n/* harmony import */ var _acl_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./acl.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/acl.js\");\n/* harmony import */ var _file_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./file.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/file.js\");\n/* harmony import */ var _iam_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./iam.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/iam.js\");\n/* harmony import */ var _notification_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./notification.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/notification.js\");\n/* harmony import */ var _storage_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./storage.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/storage.js\");\n/* harmony import */ var _signer_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./signer.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/signer.js\");\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! stream */ \"stream\");\n/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! url */ \"url\");\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar BucketActionToHTTPMethod;\n(function (BucketActionToHTTPMethod) {\n    BucketActionToHTTPMethod[\"list\"] = \"GET\";\n})(BucketActionToHTTPMethod || (BucketActionToHTTPMethod = {}));\nvar AvailableServiceObjectMethods;\n(function (AvailableServiceObjectMethods) {\n    AvailableServiceObjectMethods[AvailableServiceObjectMethods[\"setMetadata\"] = 0] = \"setMetadata\";\n    AvailableServiceObjectMethods[AvailableServiceObjectMethods[\"delete\"] = 1] = \"delete\";\n})(AvailableServiceObjectMethods || (AvailableServiceObjectMethods = {}));\nvar BucketExceptionMessages;\n(function (BucketExceptionMessages) {\n    BucketExceptionMessages[\"PROVIDE_SOURCE_FILE\"] = \"You must provide at least one source file.\";\n    BucketExceptionMessages[\"DESTINATION_FILE_NOT_SPECIFIED\"] = \"A destination file must be specified.\";\n    BucketExceptionMessages[\"CHANNEL_ID_REQUIRED\"] = \"An ID is required to create a channel.\";\n    BucketExceptionMessages[\"TOPIC_NAME_REQUIRED\"] = \"A valid topic name is required.\";\n    BucketExceptionMessages[\"CONFIGURATION_OBJECT_PREFIX_REQUIRED\"] = \"A configuration object with a prefix is required.\";\n    BucketExceptionMessages[\"SPECIFY_FILE_NAME\"] = \"A file name must be specified.\";\n    BucketExceptionMessages[\"METAGENERATION_NOT_PROVIDED\"] = \"A metageneration must be provided.\";\n    BucketExceptionMessages[\"SUPPLY_NOTIFICATION_ID\"] = \"You must supply a notification ID.\";\n})(BucketExceptionMessages || (BucketExceptionMessages = {}));\n/**\n * @callback Crc32cGeneratorToStringCallback\n * A method returning the CRC32C as a base64-encoded string.\n *\n * @returns {string}\n *\n * @example\n * Hashing the string 'data' should return 'rth90Q=='\n *\n * ```js\n * const buffer = Buffer.from('data');\n * crc32c.update(buffer);\n * crc32c.toString(); // 'rth90Q=='\n * ```\n **/\n/**\n * @callback Crc32cGeneratorValidateCallback\n * A method validating a base64-encoded CRC32C string.\n *\n * @param {string} [value] base64-encoded CRC32C string to validate\n * @returns {boolean}\n *\n * @example\n * Should return `true` if the value matches, `false` otherwise\n *\n * ```js\n * const buffer = Buffer.from('data');\n * crc32c.update(buffer);\n * crc32c.validate('DkjKuA=='); // false\n * crc32c.validate('rth90Q=='); // true\n * ```\n **/\n/**\n * @callback Crc32cGeneratorUpdateCallback\n * A method for passing `Buffer`s for CRC32C generation.\n *\n * @param {Buffer} [data] data to update CRC32C value with\n * @returns {undefined}\n *\n * @example\n * Hashing buffers from 'some ' and 'text\\n'\n *\n * ```js\n * const buffer1 = Buffer.from('some ');\n * crc32c.update(buffer1);\n *\n * const buffer2 = Buffer.from('text\\n');\n * crc32c.update(buffer2);\n *\n * crc32c.toString(); // 'DkjKuA=='\n * ```\n **/\n/**\n * @typedef {object} CRC32CValidator\n * @property {Crc32cGeneratorToStringCallback}\n * @property {Crc32cGeneratorValidateCallback}\n * @property {Crc32cGeneratorUpdateCallback}\n */\n/**\n * A function that generates a CRC32C Validator. Defaults to {@link CRC32C}\n *\n * @name Bucket#crc32cGenerator\n * @type {CRC32CValidator}\n */\n/**\n * Get and set IAM policies for your bucket.\n *\n * @name Bucket#iam\n * @mixes Iam\n *\n * See {@link https://cloud.google.com/storage/docs/access-control/iam#short_title_iam_management| Cloud Storage IAM Management}\n * See {@link https://cloud.google.com/iam/docs/granting-changing-revoking-access| Granting, Changing, and Revoking Access}\n * See {@link https://cloud.google.com/iam/docs/understanding-roles| IAM Roles}\n *\n * @example\n * ```\n * const {Storage} = require('@google-cloud/storage');\n * const storage = new Storage();\n * const bucket = storage.bucket('albums');\n *\n * //-\n * // Get the IAM policy for your bucket.\n * //-\n * bucket.iam.getPolicy(function(err, policy) {\n *   console.log(policy);\n * });\n *\n * //-\n * // If the callback is omitted, we'll return a Promise.\n * //-\n * bucket.iam.getPolicy().then(function(data) {\n *   const policy = data[0];\n *   const apiResponse = data[1];\n * });\n *\n * ```\n * @example <caption>include:samples/iam.js</caption>\n * region_tag:storage_view_bucket_iam_members\n * Example of retrieving a bucket's IAM policy:\n *\n * @example <caption>include:samples/iam.js</caption>\n * region_tag:storage_add_bucket_iam_member\n * Example of adding to a bucket's IAM policy:\n *\n * @example <caption>include:samples/iam.js</caption>\n * region_tag:storage_remove_bucket_iam_member\n * Example of removing from a bucket's IAM policy:\n */\n/**\n * Cloud Storage uses access control lists (ACLs) to manage object and\n * bucket access. ACLs are the mechanism you use to share objects with other\n * users and allow other users to access your buckets and objects.\n *\n * An ACL consists of one or more entries, where each entry grants permissions\n * to an entity. Permissions define the actions that can be performed against\n * an object or bucket (for example, `READ` or `WRITE`); the entity defines\n * who the permission applies to (for example, a specific user or group of\n * users).\n *\n * The `acl` object on a Bucket instance provides methods to get you a list of\n * the ACLs defined on your bucket, as well as set, update, and delete them.\n *\n * Buckets also have\n * {@link https://cloud.google.com/storage/docs/access-control/lists#default| default ACLs}\n * for all created files. Default ACLs specify permissions that all new\n * objects added to the bucket will inherit by default. You can add, delete,\n * get, and update entities and permissions for these as well with\n * {@link Bucket#acl.default}.\n *\n * See {@link http://goo.gl/6qBBPO| About Access Control Lists}\n * See {@link https://cloud.google.com/storage/docs/access-control/lists#default| Default ACLs}\n *\n * @name Bucket#acl\n * @mixes Acl\n * @property {Acl} default Cloud Storage Buckets have\n * {@link https://cloud.google.com/storage/docs/access-control/lists#default| default ACLs}\n * for all created files. You can add, delete, get, and update entities and\n * permissions for these as well. The method signatures and examples are all\n * the same, after only prefixing the method call with `default`.\n *\n * @example\n * ```\n * const {Storage} = require('@google-cloud/storage');\n * const storage = new Storage();\n *\n * //-\n * // Make a bucket's contents publicly readable.\n * //-\n * const myBucket = storage.bucket('my-bucket');\n *\n * const options = {\n *   entity: 'allUsers',\n *   role: storage.acl.READER_ROLE\n * };\n *\n * myBucket.acl.add(options, function(err, aclObject) {});\n *\n * //-\n * // If the callback is omitted, we'll return a Promise.\n * //-\n * myBucket.acl.add(options).then(function(data) {\n *   const aclObject = data[0];\n *   const apiResponse = data[1];\n * });\n *\n * ```\n * @example <caption>include:samples/acl.js</caption>\n * region_tag:storage_print_bucket_acl\n * Example of printing a bucket's ACL:\n *\n * @example <caption>include:samples/acl.js</caption>\n * region_tag:storage_print_bucket_acl_for_user\n * Example of printing a bucket's ACL for a specific user:\n *\n * @example <caption>include:samples/acl.js</caption>\n * region_tag:storage_add_bucket_owner\n * Example of adding an owner to a bucket:\n *\n * @example <caption>include:samples/acl.js</caption>\n * region_tag:storage_remove_bucket_owner\n * Example of removing an owner from a bucket:\n *\n * @example <caption>include:samples/acl.js</caption>\n * region_tag:storage_add_bucket_default_owner\n * Example of adding a default owner to a bucket:\n *\n * @example <caption>include:samples/acl.js</caption>\n * region_tag:storage_remove_bucket_default_owner\n * Example of removing a default owner from a bucket:\n */\n/**\n * The API-formatted resource description of the bucket.\n *\n * Note: This is not guaranteed to be up-to-date when accessed. To get the\n * latest record, call the `getMetadata()` method.\n *\n * @name Bucket#metadata\n * @type {object}\n */\n/**\n * The bucket's name.\n * @name Bucket#name\n * @type {string}\n */\n/**\n * Get {@link File} objects for the files currently in the bucket as a\n * readable object stream.\n *\n * @method Bucket#getFilesStream\n * @param {GetFilesOptions} [query] Query object for listing files.\n * @returns {ReadableStream} A readable stream that emits {@link File} instances.\n *\n * @example\n * ```\n * const {Storage} = require('@google-cloud/storage');\n * const storage = new Storage();\n * const bucket = storage.bucket('albums');\n *\n * bucket.getFilesStream()\n *   .on('error', console.error)\n *   .on('data', function(file) {\n *     // file is a File object.\n *   })\n *   .on('end', function() {\n *     // All files retrieved.\n *   });\n *\n * //-\n * // If you anticipate many results, you can end a stream early to prevent\n * // unnecessary processing and API requests.\n * //-\n * bucket.getFilesStream()\n *   .on('data', function(file) {\n *     this.end();\n *   });\n *\n * //-\n * // If you're filtering files with a delimiter, you should use\n * // {@link Bucket#getFiles} and set `autoPaginate: false` in order to\n * // preserve the `apiResponse` argument.\n * //-\n * const prefixes = [];\n *\n * function callback(err, files, nextQuery, apiResponse) {\n *   prefixes = prefixes.concat(apiResponse.prefixes);\n *\n *   if (nextQuery) {\n *     bucket.getFiles(nextQuery, callback);\n *   } else {\n *     // prefixes = The finished array of prefixes.\n *   }\n * }\n *\n * bucket.getFiles({\n *   autoPaginate: false,\n *   delimiter: '/'\n * }, callback);\n * ```\n */\n/**\n * Create a Bucket object to interact with a Cloud Storage bucket.\n *\n * @class\n * @hideconstructor\n *\n * @param {Storage} storage A {@link Storage} instance.\n * @param {string} name The name of the bucket.\n * @param {object} [options] Configuration object.\n * @param {string} [options.userProject] User project.\n *\n * @example\n * ```\n * const {Storage} = require('@google-cloud/storage');\n * const storage = new Storage();\n * const bucket = storage.bucket('albums');\n * ```\n */\nclass Bucket extends _nodejs_common_index_js__WEBPACK_IMPORTED_MODULE_0__.ServiceObject {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    getFilesStream(query) {\n        // placeholder body, overwritten in constructor\n        return new stream__WEBPACK_IMPORTED_MODULE_16__.Readable();\n    }\n    constructor(storage, name, options) {\n        var _a, _b, _c, _d;\n        options = options || {};\n        // Allow for \"gs://\"-style input, and strip any trailing slashes.\n        name = name.replace(/^gs:\\/\\//, '').replace(/\\/+$/, '');\n        const requestQueryObject = {};\n        if ((_a = options === null || options === void 0 ? void 0 : options.preconditionOpts) === null || _a === void 0 ? void 0 : _a.ifGenerationMatch) {\n            requestQueryObject.ifGenerationMatch =\n                options.preconditionOpts.ifGenerationMatch;\n        }\n        if ((_b = options === null || options === void 0 ? void 0 : options.preconditionOpts) === null || _b === void 0 ? void 0 : _b.ifGenerationNotMatch) {\n            requestQueryObject.ifGenerationNotMatch =\n                options.preconditionOpts.ifGenerationNotMatch;\n        }\n        if ((_c = options === null || options === void 0 ? void 0 : options.preconditionOpts) === null || _c === void 0 ? void 0 : _c.ifMetagenerationMatch) {\n            requestQueryObject.ifMetagenerationMatch =\n                options.preconditionOpts.ifMetagenerationMatch;\n        }\n        if ((_d = options === null || options === void 0 ? void 0 : options.preconditionOpts) === null || _d === void 0 ? void 0 : _d.ifMetagenerationNotMatch) {\n            requestQueryObject.ifMetagenerationNotMatch =\n                options.preconditionOpts.ifMetagenerationNotMatch;\n        }\n        const userProject = options.userProject;\n        if (typeof userProject === 'string') {\n            requestQueryObject.userProject = userProject;\n        }\n        const methods = {\n            /**\n             * Create a bucket.\n             *\n             * @method Bucket#create\n             * @param {CreateBucketRequest} [metadata] Metadata to set for the bucket.\n             * @param {CreateBucketCallback} [callback] Callback function.\n             * @returns {Promise<CreateBucketResponse>}\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const bucket = storage.bucket('albums');\n             * bucket.create(function(err, bucket, apiResponse) {\n             *   if (!err) {\n             *     // The bucket was created successfully.\n             *   }\n             * });\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * bucket.create().then(function(data) {\n             *   const bucket = data[0];\n             *   const apiResponse = data[1];\n             * });\n             * ```\n             */\n            create: {\n                reqOpts: {\n                    qs: requestQueryObject,\n                },\n            },\n            /**\n             * IamDeleteBucketOptions Configuration options.\n             * @property {boolean} [ignoreNotFound = false] Ignore an error if\n             *     the bucket does not exist.\n             * @property {string} [userProject] The ID of the project which will be\n             *     billed for the request.\n             */\n            /**\n             * @typedef {array} DeleteBucketResponse\n             * @property {object} 0 The full API response.\n             */\n            /**\n             * @callback DeleteBucketCallback\n             * @param {?Error} err Request error, if any.\n             * @param {object} apiResponse The full API response.\n             */\n            /**\n             * Delete the bucket.\n             *\n             * See {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/delete| Buckets: delete API Documentation}\n             *\n             * @method Bucket#delete\n             * @param {DeleteBucketOptions} [options] Configuration options.\n             * @param {boolean} [options.ignoreNotFound = false] Ignore an error if\n             *     the bucket does not exist.\n             * @param {string} [options.userProject] The ID of the project which will be\n             *     billed for the request.\n             * @param {DeleteBucketCallback} [callback] Callback function.\n             * @returns {Promise<DeleteBucketResponse>}\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const bucket = storage.bucket('albums');\n             * bucket.delete(function(err, apiResponse) {});\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * bucket.delete().then(function(data) {\n             *   const apiResponse = data[0];\n             * });\n             *\n             * ```\n             * @example <caption>include:samples/buckets.js</caption>\n             * region_tag:storage_delete_bucket\n             * Another example:\n             */\n            delete: {\n                reqOpts: {\n                    qs: requestQueryObject,\n                },\n            },\n            /**\n             * @typedef {object} BucketExistsOptions Configuration options for Bucket#exists().\n             * @property {string} [userProject] The ID of the project which will be\n             *     billed for the request.\n             */\n            /**\n             * @typedef {array} BucketExistsResponse\n             * @property {boolean} 0 Whether the {@link Bucket} exists.\n             */\n            /**\n             * @callback BucketExistsCallback\n             * @param {?Error} err Request error, if any.\n             * @param {boolean} exists Whether the {@link Bucket} exists.\n             */\n            /**\n             * Check if the bucket exists.\n             *\n             * @method Bucket#exists\n             * @param {BucketExistsOptions} [options] Configuration options.\n             * @param {string} [options.userProject] The ID of the project which will be\n             *     billed for the request.\n             * @param {BucketExistsCallback} [callback] Callback function.\n             * @returns {Promise<BucketExistsResponse>}\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const bucket = storage.bucket('albums');\n             *\n             * bucket.exists(function(err, exists) {});\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * bucket.exists().then(function(data) {\n             *   const exists = data[0];\n             * });\n             * ```\n             */\n            exists: {\n                reqOpts: {\n                    qs: requestQueryObject,\n                },\n            },\n            /**\n             * @typedef {object} [GetBucketOptions] Configuration options for Bucket#get()\n             * @property {boolean} [autoCreate] Automatically create the object if\n             *     it does not exist. Default: `false`\n             * @property {string} [userProject] The ID of the project which will be\n             *     billed for the request.\n             */\n            /**\n             * @typedef {array} GetBucketResponse\n             * @property {Bucket} 0 The {@link Bucket}.\n             * @property {object} 1 The full API response.\n             */\n            /**\n             * @callback GetBucketCallback\n             * @param {?Error} err Request error, if any.\n             * @param {Bucket} bucket The {@link Bucket}.\n             * @param {object} apiResponse The full API response.\n             */\n            /**\n             * Get a bucket if it exists.\n             *\n             * You may optionally use this to \"get or create\" an object by providing\n             * an object with `autoCreate` set to `true`. Any extra configuration that\n             * is normally required for the `create` method must be contained within\n             * this object as well.\n             *\n             * @method Bucket#get\n             * @param {GetBucketOptions} [options] Configuration options.\n             * @param {boolean} [options.autoCreate] Automatically create the object if\n             *     it does not exist. Default: `false`\n             * @param {string} [options.userProject] The ID of the project which will be\n             *     billed for the request.\n             * @param {GetBucketCallback} [callback] Callback function.\n             * @returns {Promise<GetBucketResponse>}\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const bucket = storage.bucket('albums');\n             *\n             * bucket.get(function(err, bucket, apiResponse) {\n             *   // `bucket.metadata` has been populated.\n             * });\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * bucket.get().then(function(data) {\n             *   const bucket = data[0];\n             *   const apiResponse = data[1];\n             * });\n             * ```\n             */\n            get: {\n                reqOpts: {\n                    qs: requestQueryObject,\n                },\n            },\n            /**\n             * @typedef {array} GetBucketMetadataResponse\n             * @property {object} 0 The bucket metadata.\n             * @property {object} 1 The full API response.\n             */\n            /**\n             * @callback GetBucketMetadataCallback\n             * @param {?Error} err Request error, if any.\n             * @param {object} metadata The bucket metadata.\n             * @param {object} apiResponse The full API response.\n             */\n            /**\n             * @typedef {object} GetBucketMetadataOptions Configuration options for Bucket#getMetadata().\n             * @property {string} [userProject] The ID of the project which will be\n             *     billed for the request.\n             */\n            /**\n             * Get the bucket's metadata.\n             *\n             * To set metadata, see {@link Bucket#setMetadata}.\n             *\n             * See {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/get| Buckets: get API Documentation}\n             *\n             * @method Bucket#getMetadata\n             * @param {GetBucketMetadataOptions} [options] Configuration options.\n             * @param {string} [options.userProject] The ID of the project which will be\n             *     billed for the request.\n             * @param {GetBucketMetadataCallback} [callback] Callback function.\n             * @returns {Promise<GetBucketMetadataResponse>}\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const bucket = storage.bucket('albums');\n             *\n             * bucket.getMetadata(function(err, metadata, apiResponse) {});\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * bucket.getMetadata().then(function(data) {\n             *   const metadata = data[0];\n             *   const apiResponse = data[1];\n             * });\n             *\n             * ```\n             * @example <caption>include:samples/requesterPays.js</caption>\n             * region_tag:storage_get_requester_pays_status\n             * Example of retrieving the requester pays status of a bucket:\n             */\n            getMetadata: {\n                reqOpts: {\n                    qs: requestQueryObject,\n                },\n            },\n            /**\n             * @typedef {object} SetBucketMetadataOptions Configuration options for Bucket#setMetadata().\n             * @property {string} [userProject] The ID of the project which will be\n             *     billed for the request.\n             */\n            /**\n             * @typedef {array} SetBucketMetadataResponse\n             * @property {object} apiResponse The full API response.\n             */\n            /**\n             * @callback SetBucketMetadataCallback\n             * @param {?Error} err Request error, if any.\n             * @param {object} metadata The bucket metadata.\n             */\n            /**\n             * Set the bucket's metadata.\n             *\n             * See {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/patch| Buckets: patch API Documentation}\n             *\n             * @method Bucket#setMetadata\n             * @param {object<string, *>} metadata The metadata you wish to set.\n             * @param {SetBucketMetadataOptions} [options] Configuration options.\n             * @param {string} [options.userProject] The ID of the project which will be\n             *     billed for the request.\n             * @param {SetBucketMetadataCallback} [callback] Callback function.\n             * @returns {Promise<SetBucketMetadataResponse>}\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const bucket = storage.bucket('albums');\n             *\n             * //-\n             * // Set website metadata field on the bucket.\n             * //-\n             * const metadata = {\n             *   website: {\n             *     mainPageSuffix: 'http://example.com',\n             *     notFoundPage: 'http://example.com/404.html'\n             *   }\n             * };\n             *\n             * bucket.setMetadata(metadata, function(err, apiResponse) {});\n             *\n             * //-\n             * // Enable versioning for your bucket.\n             * //-\n             * bucket.setMetadata({\n             *   versioning: {\n             *     enabled: true\n             *   }\n             * }, function(err, apiResponse) {});\n             *\n             * //-\n             * // Enable KMS encryption for objects within this bucket.\n             * //-\n             * bucket.setMetadata({\n             *   encryption: {\n             *     defaultKmsKeyName: 'projects/grape-spaceship-123/...'\n             *   }\n             * }, function(err, apiResponse) {});\n             *\n             * //-\n             * // Set the default event-based hold value for new objects in this\n             * // bucket.\n             * //-\n             * bucket.setMetadata({\n             *   defaultEventBasedHold: true\n             * }, function(err, apiResponse) {});\n             *\n             * //-\n             * // Remove object lifecycle rules.\n             * //-\n             * bucket.setMetadata({\n             *   lifecycle: null\n             * }, function(err, apiResponse) {});\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * bucket.setMetadata(metadata).then(function(data) {\n             *   const apiResponse = data[0];\n             * });\n             * ```\n             */\n            setMetadata: {\n                reqOpts: {\n                    qs: requestQueryObject,\n                },\n            },\n        };\n        super({\n            parent: storage,\n            baseUrl: '/b',\n            id: name,\n            createMethod: storage.createBucket.bind(storage),\n            methods,\n        });\n        this.name = name;\n        this.storage = storage;\n        this.userProject = options.userProject;\n        this.acl = new _acl_js__WEBPACK_IMPORTED_MODULE_10__.Acl({\n            request: this.request.bind(this),\n            pathPrefix: '/acl',\n        });\n        this.acl.default = new _acl_js__WEBPACK_IMPORTED_MODULE_10__.Acl({\n            request: this.request.bind(this),\n            pathPrefix: '/defaultObjectAcl',\n        });\n        this.crc32cGenerator =\n            options.crc32cGenerator || this.storage.crc32cGenerator;\n        this.iam = new _iam_js__WEBPACK_IMPORTED_MODULE_12__.Iam(this);\n        this.getFilesStream = _google_cloud_paginator__WEBPACK_IMPORTED_MODULE_1__.paginator.streamify('getFiles');\n        this.instanceRetryValue = storage.retryOptions.autoRetry;\n        this.instancePreconditionOpts = options === null || options === void 0 ? void 0 : options.preconditionOpts;\n    }\n    /**\n     * The bucket's Cloud Storage URI (`gs://`)\n     *\n     * @example\n     * ```ts\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('my-bucket');\n     *\n     * // `gs://my-bucket`\n     * const href = bucket.cloudStorageURI.href;\n     * ```\n     */\n    get cloudStorageURI() {\n        const uri = new url__WEBPACK_IMPORTED_MODULE_17__.URL('gs://');\n        uri.host = this.name;\n        return uri;\n    }\n    /**\n     * @typedef {object} AddLifecycleRuleOptions Configuration options for Bucket#addLifecycleRule().\n     * @property {boolean} [append=true] The new rules will be appended to any\n     *     pre-existing rules.\n     */\n    /**\n     *\n     * @typedef {object} LifecycleRule The new lifecycle rule to be added to objects\n     *     in this bucket.\n     * @property {string|object} action The action to be taken upon matching of\n     *     all the conditions 'delete', 'setStorageClass', or 'AbortIncompleteMultipartUpload'.\n     *     **Note**: For configuring a raw-formatted rule object to be passed as `action`\n     *               please refer to the [examples]{@link https://cloud.google.com/storage/docs/managing-lifecycles#configexamples}.\n     * @property {object} condition Condition a bucket must meet before the\n     *     action occurs on the bucket. Refer to following supported [conditions]{@link https://cloud.google.com/storage/docs/lifecycle#conditions}.\n     * @property {string} [storageClass] When using the `setStorageClass`\n     *     action, provide this option to dictate which storage class the object\n     *     should update to. Please see\n     *     [SetStorageClass option documentation]{@link https://cloud.google.com/storage/docs/lifecycle#setstorageclass} for supported transitions.\n     */\n    /**\n     * Add an object lifecycle management rule to the bucket.\n     *\n     * By default, an Object Lifecycle Management rule provided to this method\n     * will be included to the existing policy. To replace all existing rules,\n     * supply the `options` argument, setting `append` to `false`.\n     *\n     * To add multiple rules, pass a list to the `rule` parameter. Calling this\n     * function multiple times asynchronously does not guarantee that all rules\n     * are added correctly.\n     *\n     * See {@link https://cloud.google.com/storage/docs/lifecycle| Object Lifecycle Management}\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/patch| Buckets: patch API Documentation}\n     *\n     * @param {LifecycleRule|LifecycleRule[]} rule The new lifecycle rule or rules to be added to objects\n     *     in this bucket.\n     * @param {string|object} rule.action The action to be taken upon matching of\n     *     all the conditions 'delete', 'setStorageClass', or 'AbortIncompleteMultipartUpload'.\n     *     **Note**: For configuring a raw-formatted rule object to be passed as `action`\n     *               please refer to the [examples]{@link https://cloud.google.com/storage/docs/managing-lifecycles#configexamples}.\n     * @param {object} rule.condition Condition a bucket must meet before the\n     *     action occurson the bucket. Refer to followitn supported [conditions]{@link https://cloud.google.com/storage/docs/lifecycle#conditions}.\n     * @param {string} [rule.storageClass] When using the `setStorageClass`\n     *     action, provide this option to dictate which storage class the object\n     *     should update to.\n     * @param {AddLifecycleRuleOptions} [options] Configuration object.\n     * @param {boolean} [options.append=true] Append the new rule to the existing\n     *     policy.\n     * @param {SetBucketMetadataCallback} [callback] Callback function.\n     * @returns {Promise<SetBucketMetadataResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * //-\n     * // Automatically have an object deleted from this bucket once it is 3 years\n     * // of age.\n     * //-\n     * bucket.addLifecycleRule({\n     *   action: 'delete',\n     *   condition: {\n     *     age: 365 * 3 // Specified in days.\n     *   }\n     * }, function(err, apiResponse) {\n     *   if (err) {\n     *     // Error handling omitted.\n     *   }\n     *\n     *   const lifecycleRules = bucket.metadata.lifecycle.rule;\n     *\n     *   // Iterate over the Object Lifecycle Management rules on this bucket.\n     *   lifecycleRules.forEach(lifecycleRule => {});\n     * });\n     *\n     * //-\n     * // By default, the rule you provide will be added to the existing policy.\n     * // Optionally, you can disable this behavior to replace all of the\n     * // pre-existing rules.\n     * //-\n     * const options = {\n     *   append: false\n     * };\n     *\n     * bucket.addLifecycleRule({\n     *   action: 'delete',\n     *   condition: {\n     *     age: 365 * 3 // Specified in days.\n     *   }\n     * }, options, function(err, apiResponse) {\n     *   if (err) {\n     *     // Error handling omitted.\n     *   }\n     *\n     *   // All rules have been replaced with the new \"delete\" rule.\n     *\n     *   // Iterate over the Object Lifecycle Management rules on this bucket.\n     *   lifecycleRules.forEach(lifecycleRule => {});\n     * });\n     *\n     * //-\n     * // For objects created before 2018, \"downgrade\" the storage class.\n     * //-\n     * bucket.addLifecycleRule({\n     *   action: 'setStorageClass',\n     *   storageClass: 'COLDLINE',\n     *   condition: {\n     *     createdBefore: new Date('2018')\n     *   }\n     * }, function(err, apiResponse) {});\n     *\n     * //-\n     * // Delete objects created before 2016 which have the Coldline storage\n     * // class.\n     * //-\n     * bucket.addLifecycleRule({\n     *   action: 'delete',\n     *   condition: {\n     *     matchesStorageClass: [\n     *       'COLDLINE'\n     *     ],\n     *     createdBefore: new Date('2016')\n     *   }\n     * }, function(err, apiResponse) {});\n     *\n     * //-\n     * // Delete object that has a noncurrent timestamp that is at least 100 days.\n     * //-\n     * bucket.addLifecycleRule({\n     *   action: 'delete',\n     *   condition: {\n     *     daysSinceNoncurrentTime: 100\n     *   }\n     * }, function(err, apiResponse) {});\n     *\n     * //-\n     * // Delete object that has a noncurrent timestamp before 2020-01-01.\n     * //-\n     * bucket.addLifecycleRule({\n     *   action: 'delete',\n     *   condition: {\n     *     noncurrentTimeBefore: new Date('2020-01-01')\n     *   }\n     * }, function(err, apiResponse) {});\n     *\n     * //-\n     * // Delete object that has a customTime that is at least 100 days.\n     * //-\n     * bucket.addLifecycleRule({\n     *   action: 'delete',\n     *   condition: {\n     *     daysSinceCustomTime: 100\n     *   }\n     * }, function(err, apiResponse) ());\n     *\n     * //-\n     * // Delete object that has a customTime before 2020-01-01.\n     * //-\n     * bucket.addLifecycleRule({\n     *   action: 'delete',\n     *   condition: {\n     *     customTimeBefore: new Date('2020-01-01')\n     *   }\n     * }, function(err, apiResponse) {});\n     * ```\n     */\n    addLifecycleRule(rule, optionsOrCallback, callback) {\n        let options = {};\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else if (optionsOrCallback) {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        const rules = Array.isArray(rule) ? rule : [rule];\n        for (const curRule of rules) {\n            if (curRule.condition.createdBefore instanceof Date) {\n                curRule.condition.createdBefore = curRule.condition.createdBefore\n                    .toISOString()\n                    .replace(/T.+$/, '');\n            }\n            if (curRule.condition.customTimeBefore instanceof Date) {\n                curRule.condition.customTimeBefore = curRule.condition.customTimeBefore\n                    .toISOString()\n                    .replace(/T.+$/, '');\n            }\n            if (curRule.condition.noncurrentTimeBefore instanceof Date) {\n                curRule.condition.noncurrentTimeBefore =\n                    curRule.condition.noncurrentTimeBefore\n                        .toISOString()\n                        .replace(/T.+$/, '');\n            }\n        }\n        if (options.append === false) {\n            this.setMetadata({ lifecycle: { rule: rules } }, options, callback);\n            return;\n        }\n        // The default behavior appends the previously-defined lifecycle rules with\n        // the new ones just passed in by the user.\n        this.getMetadata((err, metadata) => {\n            var _a, _b;\n            if (err) {\n                callback(err);\n                return;\n            }\n            const currentLifecycleRules = Array.isArray((_a = metadata.lifecycle) === null || _a === void 0 ? void 0 : _a.rule)\n                ? (_b = metadata.lifecycle) === null || _b === void 0 ? void 0 : _b.rule\n                : [];\n            this.setMetadata({\n                lifecycle: { rule: currentLifecycleRules.concat(rules) },\n            }, options, callback);\n        });\n    }\n    /**\n     * @typedef {object} CombineOptions\n     * @property {string} [kmsKeyName] Resource name of the Cloud KMS key, of\n     *     the form\n     *     `projects/my-project/locations/location/keyRings/my-kr/cryptoKeys/my-key`,\n     *     that will be used to encrypt the object. Overwrites the object\n     * metadata's `kms_key_name` value, if any.\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * @callback CombineCallback\n     * @param {?Error} err Request error, if any.\n     * @param {File} newFile The new {@link File}.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * @typedef {array} CombineResponse\n     * @property {File} 0 The new {@link File}.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * Combine multiple files into one new file.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/objects/compose| Objects: compose API Documentation}\n     *\n     * @throws {Error} if a non-array is provided as sources argument.\n     * @throws {Error} if no sources are provided.\n     * @throws {Error} if no destination is provided.\n     *\n     * @param {string[]|File[]} sources The source files that will be\n     *     combined.\n     * @param {string|File} destination The file you would like the\n     *     source files combined into.\n     * @param {CombineOptions} [options] Configuration options.\n     * @param {string} [options.kmsKeyName] Resource name of the Cloud KMS key, of\n     *     the form\n     *     `projects/my-project/locations/location/keyRings/my-kr/cryptoKeys/my-key`,\n     *     that will be used to encrypt the object. Overwrites the object\n     * metadata's `kms_key_name` value, if any.\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n  \n     * @param {CombineCallback} [callback] Callback function.\n     * @returns {Promise<CombineResponse>}\n     *\n     * @example\n     * ```\n     * const logBucket = storage.bucket('log-bucket');\n     *\n     * const sources = [\n     *   logBucket.file('2013-logs.txt'),\n     *   logBucket.file('2014-logs.txt')\n     * ];\n     *\n     * const allLogs = logBucket.file('all-logs.txt');\n     *\n     * logBucket.combine(sources, allLogs, function(err, newFile, apiResponse) {\n     *   // newFile === allLogs\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * logBucket.combine(sources, allLogs).then(function(data) {\n     *   const newFile = data[0];\n     *   const apiResponse = data[1];\n     * });\n     * ```\n     */\n    combine(sources, destination, optionsOrCallback, callback) {\n        var _a;\n        if (!Array.isArray(sources) || sources.length === 0) {\n            throw new Error(BucketExceptionMessages.PROVIDE_SOURCE_FILE);\n        }\n        if (!destination) {\n            throw new Error(BucketExceptionMessages.DESTINATION_FILE_NOT_SPECIFIED);\n        }\n        let options = {};\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else if (optionsOrCallback) {\n            options = optionsOrCallback;\n        }\n        this.disableAutoRetryConditionallyIdempotent_(this.methods.setMetadata, // Not relevant but param is required\n        AvailableServiceObjectMethods.setMetadata, // Same as above\n        options);\n        const convertToFile = (file) => {\n            if (file instanceof _file_js__WEBPACK_IMPORTED_MODULE_11__.File) {\n                return file;\n            }\n            return this.file(file);\n        };\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        sources = sources.map(convertToFile);\n        const destinationFile = convertToFile(destination);\n        callback = callback || _nodejs_common_index_js__WEBPACK_IMPORTED_MODULE_0__.util.noop;\n        if (!destinationFile.metadata.contentType) {\n            const destinationContentType = mime__WEBPACK_IMPORTED_MODULE_4__.getType(destinationFile.name) || undefined;\n            if (destinationContentType) {\n                destinationFile.metadata.contentType = destinationContentType;\n            }\n        }\n        let maxRetries = this.storage.retryOptions.maxRetries;\n        if ((((_a = destinationFile === null || destinationFile === void 0 ? void 0 : destinationFile.instancePreconditionOpts) === null || _a === void 0 ? void 0 : _a.ifGenerationMatch) ===\n            undefined &&\n            options.ifGenerationMatch === undefined &&\n            this.storage.retryOptions.idempotencyStrategy ===\n                _storage_js__WEBPACK_IMPORTED_MODULE_14__.IdempotencyStrategy.RetryConditional) ||\n            this.storage.retryOptions.idempotencyStrategy ===\n                _storage_js__WEBPACK_IMPORTED_MODULE_14__.IdempotencyStrategy.RetryNever) {\n            maxRetries = 0;\n        }\n        if (options.ifGenerationMatch === undefined) {\n            Object.assign(options, destinationFile.instancePreconditionOpts, options);\n        }\n        // Make the request from the destination File object.\n        destinationFile.request({\n            method: 'POST',\n            uri: '/compose',\n            maxRetries,\n            json: {\n                destination: {\n                    contentType: destinationFile.metadata.contentType,\n                    contentEncoding: destinationFile.metadata.contentEncoding,\n                },\n                sourceObjects: sources.map(source => {\n                    const sourceObject = {\n                        name: source.name,\n                    };\n                    if (source.metadata && source.metadata.generation) {\n                        sourceObject.generation = parseInt(source.metadata.generation.toString());\n                    }\n                    return sourceObject;\n                }),\n            },\n            qs: options,\n        }, (err, resp) => {\n            this.storage.retryOptions.autoRetry = this.instanceRetryValue;\n            if (err) {\n                callback(err, null, resp);\n                return;\n            }\n            callback(null, destinationFile, resp);\n        });\n    }\n    /**\n     * See a {@link https://cloud.google.com/storage/docs/json_api/v1/objects/watchAll| Objects: watchAll request body}.\n     *\n     * @typedef {object} CreateChannelConfig\n     * @property {string} address The address where notifications are\n     *     delivered for this channel.\n     * @property {string} [delimiter] Returns results in a directory-like mode.\n     * @property {number} [maxResults] Maximum number of `items` plus `prefixes`\n     *     to return in a single page of responses.\n     * @property {string} [pageToken] A previously-returned page token\n     *     representing part of the larger set of results to view.\n     * @property {string} [prefix] Filter results to objects whose names begin\n     *     with this prefix.\n     * @property {string} [projection=noAcl] Set of properties to return.\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     * @property {boolean} [versions=false] If `true`, lists all versions of an object\n     *     as distinct results.\n     */\n    /**\n     * @typedef {object} CreateChannelOptions\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * @typedef {array} CreateChannelResponse\n     * @property {Channel} 0 The new {@link Channel}.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * @callback CreateChannelCallback\n     * @param {?Error} err Request error, if any.\n     * @param {Channel} channel The new {@link Channel}.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Create a channel that will be notified when objects in this bucket changes.\n     *\n     * @throws {Error} If an ID is not provided.\n     * @throws {Error} If an address is not provided.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/objects/watchAll| Objects: watchAll API Documentation}\n     *\n     * @param {string} id The ID of the channel to create.\n     * @param {CreateChannelConfig} config Configuration for creating channel.\n     * @param {string} config.address The address where notifications are\n     *     delivered for this channel.\n     * @param {string} [config.delimiter] Returns results in a directory-like mode.\n     * @param {number} [config.maxResults] Maximum number of `items` plus `prefixes`\n     *     to return in a single page of responses.\n     * @param {string} [config.pageToken] A previously-returned page token\n     *     representing part of the larger set of results to view.\n     * @param {string} [config.prefix] Filter results to objects whose names begin\n     *     with this prefix.\n     * @param {string} [config.projection=noAcl] Set of properties to return.\n     * @param {string} [config.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {boolean} [config.versions=false] If `true`, lists all versions of an object\n     *     as distinct results.\n     * @param {CreateChannelOptions} [options] Configuration options.\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {CreateChannelCallback} [callback] Callback function.\n     * @returns {Promise<CreateChannelResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     * const id = 'new-channel-id';\n     *\n     * const config = {\n     *   address: 'https://...'\n     * };\n     *\n     * bucket.createChannel(id, config, function(err, channel, apiResponse) {\n     *   if (!err) {\n     *     // Channel created successfully.\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.createChannel(id, config).then(function(data) {\n     *   const channel = data[0];\n     *   const apiResponse = data[1];\n     * });\n     * ```\n     */\n    createChannel(id, config, optionsOrCallback, callback) {\n        if (typeof id !== 'string') {\n            throw new Error(BucketExceptionMessages.CHANNEL_ID_REQUIRED);\n        }\n        let options = {};\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else if (optionsOrCallback) {\n            options = optionsOrCallback;\n        }\n        this.request({\n            method: 'POST',\n            uri: '/o/watch',\n            json: Object.assign({\n                id,\n                type: 'web_hook',\n            }, config),\n            qs: options,\n        }, (err, apiResponse) => {\n            if (err) {\n                callback(err, null, apiResponse);\n                return;\n            }\n            const resourceId = apiResponse.resourceId;\n            const channel = this.storage.channel(id, resourceId);\n            channel.metadata = apiResponse;\n            callback(null, channel, apiResponse);\n        });\n    }\n    /**\n     * Metadata to set for the Notification.\n     *\n     * @typedef {object} CreateNotificationOptions\n     * @property {object} [customAttributes] An optional list of additional\n     *     attributes to attach to each Cloud PubSub message published for this\n     *     notification subscription.\n     * @property {string[]} [eventTypes] If present, only send notifications about\n     *     listed event types. If empty, sent notifications for all event types.\n     * @property {string} [objectNamePrefix] If present, only apply this\n     *     notification configuration to object names that begin with this prefix.\n     * @property {string} [payloadFormat] The desired content of the Payload.\n     * Defaults to `JSON_API_V1`.\n     *\n     * Acceptable values are:\n     * - `JSON_API_V1`\n     *\n     * - `NONE`\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * @callback CreateNotificationCallback\n     * @param {?Error} err Request error, if any.\n     * @param {Notification} notification The new {@link Notification}.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * @typedef {array} CreateNotificationResponse\n     * @property {Notification} 0 The new {@link Notification}.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * Creates a notification subscription for the bucket.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/notifications/insert| Notifications: insert}\n     *\n     * @param {Topic|string} topic The Cloud PubSub topic to which this\n     * subscription publishes. If the project ID is omitted, the current\n     * project ID will be used.\n     *\n     * Acceptable formats are:\n     * - `projects/grape-spaceship-123/topics/my-topic`\n     *\n     * - `my-topic`\n     * @param {CreateNotificationOptions} [options] Metadata to set for the\n     *     notification.\n     * @param {object} [options.customAttributes] An optional list of additional\n     *     attributes to attach to each Cloud PubSub message published for this\n     *     notification subscription.\n     * @param {string[]} [options.eventTypes] If present, only send notifications about\n     *     listed event types. If empty, sent notifications for all event types.\n     * @param {string} [options.objectNamePrefix] If present, only apply this\n     *     notification configuration to object names that begin with this prefix.\n     * @param {string} [options.payloadFormat] The desired content of the Payload.\n     * Defaults to `JSON_API_V1`.\n     *\n     * Acceptable values are:\n     * - `JSON_API_V1`\n     *\n     * - `NONE`\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {CreateNotificationCallback} [callback] Callback function.\n     * @returns {Promise<CreateNotificationResponse>}\n     * @throws {Error} If a valid topic is not provided.\n     * @see Notification#create\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const myBucket = storage.bucket('my-bucket');\n     *\n     * const callback = function(err, notification, apiResponse) {\n     *   if (!err) {\n     *     // The notification was created successfully.\n     *   }\n     * };\n     *\n     * myBucket.createNotification('my-topic', callback);\n     *\n     * //-\n     * // Configure the nofiication by providing Notification metadata.\n     * //-\n     * const metadata = {\n     *   objectNamePrefix: 'prefix-'\n     * };\n     *\n     * myBucket.createNotification('my-topic', metadata, callback);\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * myBucket.createNotification('my-topic').then(function(data) {\n     *   const notification = data[0];\n     *   const apiResponse = data[1];\n     * });\n     *\n     * ```\n     * @example <caption>include:samples/createNotification.js</caption>\n     * region_tag:storage_create_bucket_notifications\n     * Another example:\n     */\n    createNotification(topic, optionsOrCallback, callback) {\n        let options = {};\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else if (optionsOrCallback) {\n            options = optionsOrCallback;\n        }\n        const topicIsObject = topic !== null && typeof topic === 'object';\n        if (topicIsObject && _nodejs_common_index_js__WEBPACK_IMPORTED_MODULE_0__.util.isCustomType(topic, 'pubsub/topic')) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            topic = topic.name;\n        }\n        if (typeof topic !== 'string') {\n            throw new Error(BucketExceptionMessages.TOPIC_NAME_REQUIRED);\n        }\n        const body = Object.assign({ topic }, options);\n        if (body.topic.indexOf('projects') !== 0) {\n            body.topic = 'projects/{{projectId}}/topics/' + body.topic;\n        }\n        body.topic = `//pubsub.${this.storage.universeDomain}/` + body.topic;\n        if (!body.payloadFormat) {\n            body.payloadFormat = 'JSON_API_V1';\n        }\n        const query = {};\n        if (body.userProject) {\n            query.userProject = body.userProject;\n            delete body.userProject;\n        }\n        this.request({\n            method: 'POST',\n            uri: '/notificationConfigs',\n            json: (0,_util_js__WEBPACK_IMPORTED_MODULE_9__.convertObjKeysToSnakeCase)(body),\n            qs: query,\n            maxRetries: 0, //explicitly set this value since this is a non-idempotent function\n        }, (err, apiResponse) => {\n            if (err) {\n                callback(err, null, apiResponse);\n                return;\n            }\n            const notification = this.notification(apiResponse.id);\n            notification.metadata = apiResponse;\n            callback(null, notification, apiResponse);\n        });\n    }\n    /**\n     * @typedef {object} DeleteFilesOptions Query object. See {@link Bucket#getFiles}\n     *     for all of the supported properties.\n     * @property {boolean} [force] Suppress errors until all files have been\n     *     processed.\n     */\n    /**\n     * @callback DeleteFilesCallback\n     * @param {?Error|?Error[]} err Request error, if any, or array of errors from\n     *     files that were not able to be deleted.\n     * @param {object} [apiResponse] The full API response.\n     */\n    /**\n     * Iterate over the bucket's files, calling `file.delete()` on each.\n     *\n     * <strong>This is not an atomic request.</strong> A delete attempt will be\n     * made for each file individually. Any one can fail, in which case only a\n     * portion of the files you intended to be deleted would have.\n     *\n     * Operations are performed in parallel, up to 10 at once. The first error\n     * breaks the loop and will execute the provided callback with it. Specify\n     * `{ force: true }` to suppress the errors until all files have had a chance\n     * to be processed.\n     *\n     * File preconditions cannot be passed to this function. It will not retry unless\n     * the idempotency strategy is set to retry always.\n     *\n     * The `query` object passed as the first argument will also be passed to\n     * {@link Bucket#getFiles}.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/objects/delete| Objects: delete API Documentation}\n     *\n     * @param {DeleteFilesOptions} [query] Query object. See {@link Bucket#getFiles}\n     * @param {boolean} [query.force] Suppress errors until all files have been\n     *     processed.\n     * @param {DeleteFilesCallback} [callback] Callback function.\n     * @returns {Promise}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * //-\n     * // Delete all of the files in the bucket.\n     * //-\n     * bucket.deleteFiles(function(err) {});\n     *\n     * //-\n     * // By default, if a file cannot be deleted, this method will stop deleting\n     * // files from your bucket. You can override this setting with `force:\n     * // true`.\n     * //-\n     * bucket.deleteFiles({\n     *   force: true\n     * }, function(errors) {\n     *   // `errors`:\n     *   //    Array of errors if any occurred, otherwise null.\n     * });\n     *\n     * //-\n     * // The first argument to this method acts as a query to\n     * // {@link Bucket#getFiles}. As an example, you can delete files\n     * // which match a prefix.\n     * //-\n     * bucket.deleteFiles({\n     *   prefix: 'images/'\n     * }, function(err) {\n     *   if (!err) {\n     *     // All files in the `images` directory have been deleted.\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.deleteFiles().then(function() {});\n     * ```\n     */\n    deleteFiles(queryOrCallback, callback) {\n        let query = {};\n        if (typeof queryOrCallback === 'function') {\n            callback = queryOrCallback;\n        }\n        else if (queryOrCallback) {\n            query = queryOrCallback;\n        }\n        const MAX_PARALLEL_LIMIT = 10;\n        const MAX_QUEUE_SIZE = 1000;\n        const errors = [];\n        const deleteFile = (file) => {\n            return file.delete(query).catch(err => {\n                if (!query.force) {\n                    throw err;\n                }\n                errors.push(err);\n            });\n        };\n        (async () => {\n            try {\n                let promises = [];\n                const limit = p_limit__WEBPACK_IMPORTED_MODULE_6__(MAX_PARALLEL_LIMIT);\n                const filesStream = this.getFilesStream(query);\n                for await (const curFile of filesStream) {\n                    if (promises.length >= MAX_QUEUE_SIZE) {\n                        await Promise.all(promises);\n                        promises = [];\n                    }\n                    promises.push(limit(() => deleteFile(curFile)).catch(e => {\n                        filesStream.destroy();\n                        throw e;\n                    }));\n                }\n                await Promise.all(promises);\n                callback(errors.length > 0 ? errors : null);\n            }\n            catch (e) {\n                callback(e);\n                return;\n            }\n        })();\n    }\n    /**\n     * @deprecated\n     * @typedef {array} DeleteLabelsResponse\n     * @property {object} 0 The full API response.\n     */\n    /**\n     * @deprecated\n     * @callback DeleteLabelsCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} metadata Bucket's metadata.\n     */\n    /**\n     * @deprecated Use setMetadata directly\n     * Delete one or more labels from this bucket.\n     *\n     * @param {string|string[]} [labels] The labels to delete. If no labels are\n     *     provided, all of the labels are removed.\n     * @param {DeleteLabelsCallback} [callback] Callback function.\n     * @param {DeleteLabelsOptions} [options] Options, including precondition options\n     * @returns {Promise<DeleteLabelsResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * //-\n     * // Delete all of the labels from this bucket.\n     * //-\n     * bucket.deleteLabels(function(err, apiResponse) {});\n     *\n     * //-\n     * // Delete a single label.\n     * //-\n     * bucket.deleteLabels('labelone', function(err, apiResponse) {});\n     *\n     * //-\n     * // Delete a specific set of labels.\n     * //-\n     * bucket.deleteLabels([\n     *   'labelone',\n     *   'labeltwo'\n     * ], function(err, apiResponse) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.deleteLabels().then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     * ```\n     */\n    deleteLabels(labelsOrCallbackOrOptions, optionsOrCallback, callback) {\n        let labels = new Array();\n        let options = {};\n        if (typeof labelsOrCallbackOrOptions === 'function') {\n            callback = labelsOrCallbackOrOptions;\n        }\n        else if (typeof labelsOrCallbackOrOptions === 'string') {\n            labels = [labelsOrCallbackOrOptions];\n        }\n        else if (Array.isArray(labelsOrCallbackOrOptions)) {\n            labels = labelsOrCallbackOrOptions;\n        }\n        else if (labelsOrCallbackOrOptions) {\n            options = labelsOrCallbackOrOptions;\n        }\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else if (optionsOrCallback) {\n            options = optionsOrCallback;\n        }\n        const deleteLabels = (labels) => {\n            const nullLabelMap = labels.reduce((nullLabelMap, labelKey) => {\n                nullLabelMap[labelKey] = null;\n                return nullLabelMap;\n            }, {});\n            if ((options === null || options === void 0 ? void 0 : options.ifMetagenerationMatch) !== undefined) {\n                this.setLabels(nullLabelMap, options, callback);\n            }\n            else {\n                this.setLabels(nullLabelMap, callback);\n            }\n        };\n        if (labels.length === 0) {\n            this.getLabels((err, labels) => {\n                if (err) {\n                    callback(err);\n                    return;\n                }\n                deleteLabels(Object.keys(labels));\n            });\n        }\n        else {\n            deleteLabels(labels);\n        }\n    }\n    /**\n     * @typedef {array} DisableRequesterPaysResponse\n     * @property {object} 0 The full API response.\n     */\n    /**\n     * @callback DisableRequesterPaysCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * <div class=\"notice\">\n     *   <strong>Early Access Testers Only</strong>\n     *   <p>\n     *     This feature is not yet widely-available.\n     *   </p>\n     * </div>\n     *\n     * Disable `requesterPays` functionality from this bucket.\n     *\n     * @param {DisableRequesterPaysCallback} [callback] Callback function.\n     * @param {DisableRequesterPaysOptions} [options] Options, including precondition options\n     * @returns {Promise<DisableRequesterPaysCallback>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * bucket.disableRequesterPays(function(err, apiResponse) {\n     *   if (!err) {\n     *     // requesterPays functionality disabled successfully.\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.disableRequesterPays().then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     *\n     * ```\n     * @example <caption>include:samples/requesterPays.js</caption>\n     * region_tag:storage_disable_requester_pays\n     * Example of disabling requester pays:\n     */\n    disableRequesterPays(optionsOrCallback, callback) {\n        let options = {};\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else if (optionsOrCallback) {\n            options = optionsOrCallback;\n        }\n        this.setMetadata({\n            billing: {\n                requesterPays: false,\n            },\n        }, options, callback);\n    }\n    /**\n     * Configuration object for enabling logging.\n     *\n     * @typedef {object} EnableLoggingOptions\n     * @property {string|Bucket} [bucket] The bucket for the log entries. By\n     *     default, the current bucket is used.\n     * @property {string} prefix A unique prefix for log object names.\n     */\n    /**\n     * Enable logging functionality for this bucket. This will make two API\n     * requests, first to grant Cloud Storage WRITE permission to the bucket, then\n     * to set the appropriate configuration on the Bucket's metadata.\n     *\n     * @param {EnableLoggingOptions} config Configuration options.\n     * @param {string|Bucket} [config.bucket] The bucket for the log entries. By\n     *     default, the current bucket is used.\n     * @param {string} config.prefix A unique prefix for log object names.\n     * @param {SetBucketMetadataCallback} [callback] Callback function.\n     * @returns {Promise<SetBucketMetadataResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * const config = {\n     *   prefix: 'log'\n     * };\n     *\n     * bucket.enableLogging(config, function(err, apiResponse) {\n     *   if (!err) {\n     *     // Logging functionality enabled successfully.\n     *   }\n     * });\n     *\n     * ```\n     * @example\n     * Optionally, provide a destination bucket.\n     * ```\n     * const config = {\n     *   prefix: 'log',\n     *   bucket: 'destination-bucket'\n     * };\n     *\n     * bucket.enableLogging(config, function(err, apiResponse) {});\n     * ```\n     *\n     * @example\n     * If the callback is omitted, we'll return a Promise.\n     * ```\n     * bucket.enableLogging(config).then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     * ```\n     */\n    enableLogging(config, callback) {\n        if (!config ||\n            typeof config === 'function' ||\n            typeof config.prefix === 'undefined') {\n            throw new Error(BucketExceptionMessages.CONFIGURATION_OBJECT_PREFIX_REQUIRED);\n        }\n        let logBucket = this.id;\n        if (config.bucket && config.bucket instanceof Bucket) {\n            logBucket = config.bucket.id;\n        }\n        else if (config.bucket && typeof config.bucket === 'string') {\n            logBucket = config.bucket;\n        }\n        const options = {};\n        if (config === null || config === void 0 ? void 0 : config.ifMetagenerationMatch) {\n            options.ifMetagenerationMatch = config.ifMetagenerationMatch;\n        }\n        if (config === null || config === void 0 ? void 0 : config.ifMetagenerationNotMatch) {\n            options.ifMetagenerationNotMatch = config.ifMetagenerationNotMatch;\n        }\n        (async () => {\n            try {\n                const [policy] = await this.iam.getPolicy();\n                policy.bindings.push({\n                    members: ['group:cloud-storage-analytics@google.com'],\n                    role: 'roles/storage.objectCreator',\n                });\n                await this.iam.setPolicy(policy);\n                this.setMetadata({\n                    logging: {\n                        logBucket,\n                        logObjectPrefix: config.prefix,\n                    },\n                }, options, callback);\n            }\n            catch (e) {\n                callback(e);\n                return;\n            }\n        })();\n    }\n    /**\n     * @typedef {array} EnableRequesterPaysResponse\n     * @property {object} 0 The full API response.\n     */\n    /**\n     * @callback EnableRequesterPaysCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * <div class=\"notice\">\n     *   <strong>Early Access Testers Only</strong>\n     *   <p>\n     *     This feature is not yet widely-available.\n     *   </p>\n     * </div>\n     *\n     * Enable `requesterPays` functionality for this bucket. This enables you, the\n     * bucket owner, to have the requesting user assume the charges for the access\n     * to your bucket and its contents.\n     *\n     * @param {EnableRequesterPaysCallback | EnableRequesterPaysOptions} [optionsOrCallback]\n     * Callback function or precondition options.\n     * @returns {Promise<EnableRequesterPaysResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * bucket.enableRequesterPays(function(err, apiResponse) {\n     *   if (!err) {\n     *     // requesterPays functionality enabled successfully.\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.enableRequesterPays().then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     *\n     * ```\n     * @example <caption>include:samples/requesterPays.js</caption>\n     * region_tag:storage_enable_requester_pays\n     * Example of enabling requester pays:\n     */\n    enableRequesterPays(optionsOrCallback, cb) {\n        let options = {};\n        if (typeof optionsOrCallback === 'function') {\n            cb = optionsOrCallback;\n        }\n        else if (optionsOrCallback) {\n            options = optionsOrCallback;\n        }\n        this.setMetadata({\n            billing: {\n                requesterPays: true,\n            },\n        }, options, cb);\n    }\n    /**\n     * Create a {@link File} object. See {@link File} to see how to handle\n     * the different use cases you may have.\n     *\n     * @param {string} name The name of the file in this bucket.\n     * @param {FileOptions} [options] Configuration options.\n     * @param {string|number} [options.generation] Only use a specific revision of\n     *     this file.\n     * @param {string} [options.encryptionKey] A custom encryption key. See\n     *     {@link https://cloud.google.com/storage/docs/encryption#customer-supplied| Customer-supplied Encryption Keys}.\n     * @param {string} [options.kmsKeyName] The name of the Cloud KMS key that will\n     *     be used to encrypt the object. Must be in the format:\n     *     `projects/my-project/locations/location/keyRings/my-kr/cryptoKeys/my-key`.\n     *     KMS key ring must use the same location as the bucket.\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for all requests made from File object.\n     * @returns {File}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     * const file = bucket.file('my-existing-file.png');\n     * ```\n     */\n    file(name, options) {\n        if (!name) {\n            throw Error(BucketExceptionMessages.SPECIFY_FILE_NAME);\n        }\n        return new _file_js__WEBPACK_IMPORTED_MODULE_11__.File(this, name, options);\n    }\n    /**\n     * @typedef {array} GetFilesResponse\n     * @property {File[]} 0 Array of {@link File} instances.\n     * @param {object} nextQuery 1 A query object to receive more results.\n     * @param {object} apiResponse 2 The full API response.\n     */\n    /**\n     * @callback GetFilesCallback\n     * @param {?Error} err Request error, if any.\n     * @param {File[]} files Array of {@link File} instances.\n     * @param {object} nextQuery A query object to receive more results.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Query object for listing files.\n     *\n     * @typedef {object} GetFilesOptions\n     * @property {boolean} [autoPaginate=true] Have pagination handled\n     *     automatically.\n     * @property {string} [delimiter] Results will contain only objects whose\n     *     names, aside from the prefix, do not contain delimiter. Objects whose\n     *     names, aside from the prefix, contain delimiter will have their name\n     *     truncated after the delimiter, returned in `apiResponse.prefixes`.\n     *     Duplicate prefixes are omitted.\n     * @property {string} [endOffset] Filter results to objects whose names are\n     * lexicographically before endOffset. If startOffset is also set, the objects\n     * listed have names between startOffset (inclusive) and endOffset (exclusive).\n     * @property {boolean} [includeFoldersAsPrefixes] If true, includes folders and\n     * managed folders in the set of prefixes returned by the query. Only applicable if\n     * delimiter is set to / and autoPaginate is set to false.\n     * See: https://cloud.google.com/storage/docs/managed-folders\n     * @property {boolean} [includeTrailingDelimiter] If true, objects that end in\n     * exactly one instance of delimiter have their metadata included in items[]\n     * in addition to the relevant part of the object name appearing in prefixes[].\n     * @property {string} [prefix] Filter results to objects whose names begin\n     *     with this prefix.\n     * @property {string} [matchGlob] A glob pattern used to filter results,\n     *     for example foo*bar\n     * @property {number} [maxApiCalls] Maximum number of API calls to make.\n     * @property {number} [maxResults] Maximum number of items plus prefixes to\n     *     return per call.\n     *     Note: By default will handle pagination automatically\n     *     if more than 1 page worth of results are requested per call.\n     *     When `autoPaginate` is set to `false` the smaller of `maxResults`\n     *     or 1 page of results will be returned per call.\n     * @property {string} [pageToken] A previously-returned page token\n     *     representing part of the larger set of results to view.\n     * @property {boolean} [softDeleted] If true, only soft-deleted object versions will be\n     *     listed as distinct results in order of generation number. Note `soft_deleted` and\n     *     `versions` cannot be set to true simultaneously.\n     * @property {string} [startOffset] Filter results to objects whose names are\n     * lexicographically equal to or after startOffset. If endOffset is also set,\n     * the objects listed have names between startOffset (inclusive) and endOffset (exclusive).\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     * @property {boolean} [versions] If true, returns File objects scoped to\n     *     their versions.\n     */\n    /**\n     * Get {@link File} objects for the files currently in the bucket.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/objects/list| Objects: list API Documentation}\n     *\n     * @param {GetFilesOptions} [query] Query object for listing files.\n     * @param {boolean} [query.autoPaginate=true] Have pagination handled\n     *     automatically.\n     * @param {string} [query.delimiter] Results will contain only objects whose\n     *     names, aside from the prefix, do not contain delimiter. Objects whose\n     *     names, aside from the prefix, contain delimiter will have their name\n     *     truncated after the delimiter, returned in `apiResponse.prefixes`.\n     *     Duplicate prefixes are omitted.\n     * @param {string} [query.endOffset] Filter results to objects whose names are\n     * lexicographically before endOffset. If startOffset is also set, the objects\n     * listed have names between startOffset (inclusive) and endOffset (exclusive).\n     * @param {boolean} [query.includeFoldersAsPrefixes] If true, includes folders and\n     * managed folders in the set of prefixes returned by the query. Only applicable if\n     * delimiter is set to / and autoPaginate is set to false.\n     * See: https://cloud.google.com/storage/docs/managed-folders\n     * @param {boolean} [query.includeTrailingDelimiter] If true, objects that end in\n     * exactly one instance of delimiter have their metadata included in items[]\n     * in addition to the relevant part of the object name appearing in prefixes[].\n     * @param {string} [query.prefix] Filter results to objects whose names begin\n     *     with this prefix.\n     * @param {number} [query.maxApiCalls] Maximum number of API calls to make.\n     * @param {number} [query.maxResults] Maximum number of items plus prefixes to\n     *     return per call.\n     *     Note: By default will handle pagination automatically\n     *     if more than 1 page worth of results are requested per call.\n     *     When `autoPaginate` is set to `false` the smaller of `maxResults`\n     *     or 1 page of results will be returned per call.\n     * @param {string} [query.pageToken] A previously-returned page token\n     *     representing part of the larger set of results to view.\n     * @param {boolean} [query.softDeleted] If true, only soft-deleted object versions will be\n     *     listed as distinct results in order of generation number. Note `soft_deleted` and\n     *     `versions` cannot be set to true simultaneously.\n     * @param {string} [query.startOffset] Filter results to objects whose names are\n     * lexicographically equal to or after startOffset. If endOffset is also set,\n     * the objects listed have names between startOffset (inclusive) and endOffset (exclusive).\n     * @param {string} [query.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {boolean} [query.versions] If true, returns File objects scoped to\n     *     their versions.\n     * @param {GetFilesCallback} [callback] Callback function.\n     * @returns {Promise<GetFilesResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * bucket.getFiles(function(err, files) {\n     *   if (!err) {\n     *     // files is an array of File objects.\n     *   }\n     * });\n     *\n     * //-\n     * // If your bucket has versioning enabled, you can get all of your files\n     * // scoped to their generation.\n     * //-\n     * bucket.getFiles({\n     *   versions: true\n     * }, function(err, files) {\n     *   // Each file is scoped to its generation.\n     * });\n     *\n     * //-\n     * // To control how many API requests are made and page through the results\n     * // manually, set `autoPaginate` to `false`.\n     * //-\n     * const callback = function(err, files, nextQuery, apiResponse) {\n     *   if (nextQuery) {\n     *     // More results exist.\n     *     bucket.getFiles(nextQuery, callback);\n     *   }\n     *\n     *   // The `metadata` property is populated for you with the metadata at the\n     *   // time of fetching.\n     *   files[0].metadata;\n     *\n     *   // However, in cases where you are concerned the metadata could have\n     *   // changed, use the `getMetadata` method.\n     *   files[0].getMetadata(function(err, metadata) {});\n     * };\n     *\n     * bucket.getFiles({\n     *   autoPaginate: false\n     * }, callback);\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.getFiles().then(function(data) {\n     *   const files = data[0];\n     * });\n     *\n     * ```\n     * @example\n     * <h6>Simulating a File System</h6><p>With `autoPaginate: false`, it's possible to iterate over files which incorporate a common structure using a delimiter.</p><p>Consider the following remote objects:</p><ol><li>\"a\"</li><li>\"a/b/c/d\"</li><li>\"b/d/e\"</li></ol><p>Using a delimiter of `/` will return a single file, \"a\".</p><p>`apiResponse.prefixes` will return the \"sub-directories\" that were found:</p><ol><li>\"a/\"</li><li>\"b/\"</li></ol>\n     * ```\n     * bucket.getFiles({\n     *   autoPaginate: false,\n     *   delimiter: '/'\n     * }, function(err, files, nextQuery, apiResponse) {\n     *   // files = [\n     *   //   {File} // File object for file \"a\"\n     *   // ]\n     *\n     *   // apiResponse.prefixes = [\n     *   //   'a/',\n     *   //   'b/'\n     *   // ]\n     * });\n     * ```\n     *\n     * @example\n     * Using prefixes, it's now possible to simulate a file system with follow-up requests.\n     * ```\n     * bucket.getFiles({\n     *   autoPaginate: false,\n     *   delimiter: '/',\n     *   prefix: 'a/'\n     * }, function(err, files, nextQuery, apiResponse) {\n     *   // No files found within \"directory\" a.\n     *   // files = []\n     *\n     *   // However, a \"sub-directory\" was found.\n     *   // This prefix can be used to continue traversing the \"file system\".\n     *   // apiResponse.prefixes = [\n     *   //   'a/b/'\n     *   // ]\n     * });\n     * ```\n     *\n     * @example <caption>include:samples/files.js</caption>\n     * region_tag:storage_list_files\n     * Another example:\n     *\n     * @example <caption>include:samples/files.js</caption>\n     * region_tag:storage_list_files_with_prefix\n     * Example of listing files, filtered by a prefix:\n     */\n    getFiles(queryOrCallback, callback) {\n        let query = typeof queryOrCallback === 'object' ? queryOrCallback : {};\n        if (!callback) {\n            callback = queryOrCallback;\n        }\n        query = Object.assign({}, query);\n        if (query.fields &&\n            query.autoPaginate &&\n            !query.fields.includes('nextPageToken')) {\n            query.fields = `${query.fields},nextPageToken`;\n        }\n        this.request({\n            uri: '/o',\n            qs: query,\n        }, (err, resp) => {\n            if (err) {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                callback(err, null, null, resp);\n                return;\n            }\n            const itemsArray = resp.items ? resp.items : [];\n            const files = itemsArray.map((file) => {\n                const options = {};\n                if (query.fields) {\n                    const fileInstance = file;\n                    return fileInstance;\n                }\n                if (query.versions) {\n                    options.generation = file.generation;\n                }\n                if (file.kmsKeyName) {\n                    options.kmsKeyName = file.kmsKeyName;\n                }\n                const fileInstance = this.file(file.name, options);\n                fileInstance.metadata = file;\n                return fileInstance;\n            });\n            let nextQuery = null;\n            if (resp.nextPageToken) {\n                nextQuery = Object.assign({}, query, {\n                    pageToken: resp.nextPageToken,\n                });\n            }\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            callback(null, files, nextQuery, resp);\n        });\n    }\n    /**\n     * @deprecated\n     * @typedef {object} GetLabelsOptions Configuration options for Bucket#getLabels().\n     * @param {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * @deprecated\n     * @typedef {array} GetLabelsResponse\n     * @property {object} 0 Object of labels currently set on this bucket.\n     */\n    /**\n     * @deprecated\n     * @callback GetLabelsCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} labels Object of labels currently set on this bucket.\n     */\n    /**\n     * @deprecated Use getMetadata directly.\n     * Get the labels currently set on this bucket.\n     *\n     * @param {object} [options] Configuration options.\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {GetLabelsCallback} [callback] Callback function.\n     * @returns {Promise<GetLabelsCallback>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * bucket.getLabels(function(err, labels) {\n     *   if (err) {\n     *     // Error handling omitted.\n     *   }\n     *\n     *   // labels = {\n     *   //   label: 'labelValue',\n     *   //   ...\n     *   // }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.getLabels().then(function(data) {\n     *   const labels = data[0];\n     * });\n     * ```\n     */\n    getLabels(optionsOrCallback, callback) {\n        let options = {};\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else if (optionsOrCallback) {\n            options = optionsOrCallback;\n        }\n        this.getMetadata(options, (err, metadata) => {\n            if (err) {\n                callback(err, null);\n                return;\n            }\n            callback(null, (metadata === null || metadata === void 0 ? void 0 : metadata.labels) || {});\n        });\n    }\n    /**\n     * @typedef {object} GetNotificationsOptions Configuration options for Bucket#getNotification().\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * @callback GetNotificationsCallback\n     * @param {?Error} err Request error, if any.\n     * @param {Notification[]} notifications Array of {@link Notification}\n     *     instances.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * @typedef {array} GetNotificationsResponse\n     * @property {Notification[]} 0 Array of {@link Notification} instances.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * Retrieves a list of notification subscriptions for a given bucket.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/notifications/list| Notifications: list}\n     *\n     * @param {GetNotificationsOptions} [options] Configuration options.\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {GetNotificationsCallback} [callback] Callback function.\n     * @returns {Promise<GetNotificationsResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('my-bucket');\n     *\n     * bucket.getNotifications(function(err, notifications, apiResponse) {\n     *   if (!err) {\n     *     // notifications is an array of Notification objects.\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.getNotifications().then(function(data) {\n     *   const notifications = data[0];\n     *   const apiResponse = data[1];\n     * });\n     *\n     * ```\n     * @example <caption>include:samples/listNotifications.js</caption>\n     * region_tag:storage_list_bucket_notifications\n     * Another example:\n     */\n    getNotifications(optionsOrCallback, callback) {\n        let options = {};\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else if (optionsOrCallback) {\n            options = optionsOrCallback;\n        }\n        this.request({\n            uri: '/notificationConfigs',\n            qs: options,\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null, resp);\n                return;\n            }\n            const itemsArray = resp.items ? resp.items : [];\n            const notifications = itemsArray.map((notification) => {\n                const notificationInstance = this.notification(notification.id);\n                notificationInstance.metadata = notification;\n                return notificationInstance;\n            });\n            callback(null, notifications, resp);\n        });\n    }\n    /**\n     * @typedef {array} GetSignedUrlResponse\n     * @property {object} 0 The signed URL.\n     */\n    /**\n     * @callback GetSignedUrlCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} url The signed URL.\n     */\n    /**\n     * @typedef {object} GetBucketSignedUrlConfig\n     * @property {string} action Only listing objects within a bucket (HTTP: GET) is supported for bucket-level signed URLs.\n     * @property {*} expires A timestamp when this link will expire. Any value\n     *     given is passed to `new Date()`.\n     *     Note: 'v4' supports maximum duration of 7 days (604800 seconds) from now.\n     * @property {string} [version='v2'] The signing version to use, either\n     *     'v2' or 'v4'.\n     * @property {boolean} [virtualHostedStyle=false] Use virtual hosted-style\n     *     URLs ('https://mybucket.storage.googleapis.com/...') instead of path-style\n     *     ('https://storage.googleapis.com/mybucket/...'). Virtual hosted-style URLs\n     *     should generally be preferred instaed of path-style URL.\n     *     Currently defaults to `false` for path-style, although this may change in a\n     *     future major-version release.\n     * @property {string} [cname] The cname for this bucket, i.e.,\n     *     \"https://cdn.example.com\".\n     *     See [reference]{@link https://cloud.google.com/storage/docs/access-control/signed-urls#example}\n     * @property {object} [extensionHeaders] If these headers are used, the\n     * server will check to make sure that the client provides matching\n     * values. See {@link https://cloud.google.com/storage/docs/access-control/signed-urls#about-canonical-extension-headers| Canonical extension headers}\n     * for the requirements of this feature, most notably:\n     * - The header name must be prefixed with `x-goog-`\n     * - The header name must be all lowercase\n     *\n     * Note: Multi-valued header passed as an array in the extensionHeaders\n     *       object is converted into a string, delimited by `,` with\n     *       no space. Requests made using the signed URL will need to\n     *       delimit multi-valued headers using a single `,` as well, or\n     *       else the server will report a mismatched signature.\n     * @property {object} [queryParams] Additional query parameters to include\n     *     in the signed URL.\n     */\n    /**\n     * Get a signed URL to allow limited time access to a bucket.\n     *\n     * In Google Cloud Platform environments, such as Cloud Functions and App\n     * Engine, you usually don't provide a `keyFilename` or `credentials` during\n     * instantiation. In those environments, we call the\n     * {@link https://cloud.google.com/iam/docs/reference/credentials/rest/v1/projects.serviceAccounts/signBlob| signBlob API}\n     * to create a signed URL. That API requires either the\n     * `https://www.googleapis.com/auth/iam` or\n     * `https://www.googleapis.com/auth/cloud-platform` scope, so be sure they are\n     * enabled.\n     *\n     * See {@link https://cloud.google.com/storage/docs/access-control/signed-urls| Signed URLs Reference}\n     *\n     * @throws {Error} if an expiration timestamp from the past is given.\n     *\n     * @param {GetBucketSignedUrlConfig} config Configuration object.\n     * @param {string} config.action Currently only supports \"list\" (HTTP: GET).\n     * @param {*} config.expires A timestamp when this link will expire. Any value\n     *     given is passed to `new Date()`.\n     *     Note: 'v4' supports maximum duration of 7 days (604800 seconds) from now.\n     * @param {string} [config.version='v2'] The signing version to use, either\n     *     'v2' or 'v4'.\n     * @param {boolean} [config.virtualHostedStyle=false] Use virtual hosted-style\n     *     URLs ('https://mybucket.storage.googleapis.com/...') instead of path-style\n     *     ('https://storage.googleapis.com/mybucket/...'). Virtual hosted-style URLs\n     *     should generally be preferred instaed of path-style URL.\n     *     Currently defaults to `false` for path-style, although this may change in a\n     *     future major-version release.\n     * @param {string} [config.cname] The cname for this bucket, i.e.,\n     *     \"https://cdn.example.com\".\n     *     See [reference]{@link https://cloud.google.com/storage/docs/access-control/signed-urls#example}\n     * @param {object} [config.extensionHeaders] If these headers are used, the\n     * server will check to make sure that the client provides matching\n     * values. See {@link https://cloud.google.com/storage/docs/access-control/signed-urls#about-canonical-extension-headers| Canonical extension headers}\n     * for the requirements of this feature, most notably:\n     * - The header name must be prefixed with `x-goog-`\n     * - The header name must be all lowercase\n     *\n     * Note: Multi-valued header passed as an array in the extensionHeaders\n     *       object is converted into a string, delimited by `,` with\n     *       no space. Requests made using the signed URL will need to\n     *       delimit multi-valued headers using a single `,` as well, or\n     *       else the server will report a mismatched signature.\n     * @property {object} [config.queryParams] Additional query parameters to include\n     *     in the signed URL.\n     * @param {GetSignedUrlCallback} [callback] Callback function.\n     * @returns {Promise<GetSignedUrlResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const myBucket = storage.bucket('my-bucket');\n     *\n     * //-\n     * // Generate a URL that allows temporary access to list files in a bucket.\n     * //-\n     * const request = require('request');\n     *\n     * const config = {\n     *   action: 'list',\n     *   expires: '03-17-2025'\n     * };\n     *\n     * bucket.getSignedUrl(config, function(err, url) {\n     *   if (err) {\n     *     console.error(err);\n     *     return;\n     *   }\n     *\n     *   // The bucket is now available to be listed from this URL.\n     *   request(url, function(err, resp) {\n     *     // resp.statusCode = 200\n     *   });\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.getSignedUrl(config).then(function(data) {\n     *   const url = data[0];\n     * });\n     * ```\n     */\n    getSignedUrl(cfg, callback) {\n        const method = BucketActionToHTTPMethod[cfg.action];\n        const signConfig = {\n            method,\n            expires: cfg.expires,\n            version: cfg.version,\n            cname: cfg.cname,\n            extensionHeaders: cfg.extensionHeaders || {},\n            queryParams: cfg.queryParams || {},\n            host: cfg.host,\n            signingEndpoint: cfg.signingEndpoint,\n        };\n        if (!this.signer) {\n            this.signer = new _signer_js__WEBPACK_IMPORTED_MODULE_15__.URLSigner(this.storage.authClient, this, undefined, this.storage);\n        }\n        this.signer\n            .getSignedUrl(signConfig)\n            .then(signedUrl => callback(null, signedUrl), callback);\n    }\n    /**\n     * @callback BucketLockCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Lock a previously-defined retention policy. This will prevent changes to\n     * the policy.\n     *\n     * @throws {Error} if a metageneration is not provided.\n     *\n     * @param {number|string} metageneration The bucket's metageneration. This is\n     *     accesssible from calling {@link File#getMetadata}.\n     * @param {BucketLockCallback} [callback] Callback function.\n     * @returns {Promise<BucketLockResponse>}\n     *\n     * @example\n     * ```\n     * const storage = require('@google-cloud/storage')();\n     * const bucket = storage.bucket('albums');\n     *\n     * const metageneration = 2;\n     *\n     * bucket.lock(metageneration, function(err, apiResponse) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.lock(metageneration).then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     * ```\n     */\n    lock(metageneration, callback) {\n        const metatype = typeof metageneration;\n        if (metatype !== 'number' && metatype !== 'string') {\n            throw new Error(BucketExceptionMessages.METAGENERATION_NOT_PROVIDED);\n        }\n        this.request({\n            method: 'POST',\n            uri: '/lockRetentionPolicy',\n            qs: {\n                ifMetagenerationMatch: metageneration,\n            },\n        }, callback);\n    }\n    /**\n     * @typedef {object} RestoreOptions Options for Bucket#restore(). See an\n     *     {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/restore#resource| Object resource}.\n     * @param {number} [generation] If present, selects a specific revision of this object.\n     * @param {string} [projection] Specifies the set of properties to return. If used, must be 'full' or 'noAcl'.\n     */\n    /**\n     * Restores a soft-deleted bucket\n     * @param {RestoreOptions} options Restore options.\n     * @returns {Promise<Bucket>}\n     */\n    async restore(options) {\n        const [bucket] = await this.request({\n            method: 'POST',\n            uri: '/restore',\n            qs: options,\n        });\n        return bucket;\n    }\n    /**\n     * @typedef {array} MakeBucketPrivateResponse\n     * @property {File[]} 0 List of files made private.\n     */\n    /**\n     * @callback MakeBucketPrivateCallback\n     * @param {?Error} err Request error, if any.\n     * @param {File[]} files List of files made private.\n     */\n    /**\n     * @typedef {object} MakeBucketPrivateOptions\n     * @property {boolean} [includeFiles=false] Make each file in the bucket\n     *     private.\n     * @property {Metadata} [metadata] Define custom metadata properties to define\n     *     along with the operation.\n     * @property {boolean} [force] Queue errors occurred while making files\n     *     private until all files have been processed.\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * Make the bucket listing private.\n     *\n     * You may also choose to make the contents of the bucket private by\n     * specifying `includeFiles: true`. This will automatically run\n     * {@link File#makePrivate} for every file in the bucket.\n     *\n     * When specifying `includeFiles: true`, use `force: true` to delay execution\n     * of your callback until all files have been processed. By default, the\n     * callback is executed after the first error. Use `force` to queue such\n     * errors until all files have been processed, after which they will be\n     * returned as an array as the first argument to your callback.\n     *\n     * NOTE: This may cause the process to be long-running and use a high number\n     * of requests. Use with caution.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/patch| Buckets: patch API Documentation}\n     *\n     * @param {MakeBucketPrivateOptions} [options] Configuration options.\n     * @param {boolean} [options.includeFiles=false] Make each file in the bucket\n     *     private.\n     * @param {Metadata} [options.metadata] Define custom metadata properties to define\n     *     along with the operation.\n     * @param {boolean} [options.force] Queue errors occurred while making files\n     *     private until all files have been processed.\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {MakeBucketPrivateCallback} [callback] Callback function.\n     * @returns {Promise<MakeBucketPrivateResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * //-\n     * // Make the bucket private.\n     * //-\n     * bucket.makePrivate(function(err) {});\n     *\n     * //-\n     * // Make the bucket and its contents private.\n     * //-\n     * const opts = {\n     *   includeFiles: true\n     * };\n     *\n     * bucket.makePrivate(opts, function(err, files) {\n     *   // `err`:\n     *   //    The first error to occur, otherwise null.\n     *   //\n     *   // `files`:\n     *   //    Array of files successfully made private in the bucket.\n     * });\n     *\n     * //-\n     * // Make the bucket and its contents private, using force to suppress errors\n     * // until all files have been processed.\n     * //-\n     * const opts = {\n     *   includeFiles: true,\n     *   force: true\n     * };\n     *\n     * bucket.makePrivate(opts, function(errors, files) {\n     *   // `errors`:\n     *   //    Array of errors if any occurred, otherwise null.\n     *   //\n     *   // `files`:\n     *   //    Array of files successfully made private in the bucket.\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.makePrivate(opts).then(function(data) {\n     *   const files = data[0];\n     * });\n     * ```\n     */\n    makePrivate(optionsOrCallback, callback) {\n        var _a, _b, _c, _d;\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        options.private = true;\n        const query = {\n            predefinedAcl: 'projectPrivate',\n        };\n        if (options.userProject) {\n            query.userProject = options.userProject;\n        }\n        if ((_a = options.preconditionOpts) === null || _a === void 0 ? void 0 : _a.ifGenerationMatch) {\n            query.ifGenerationMatch = options.preconditionOpts.ifGenerationMatch;\n        }\n        if ((_b = options.preconditionOpts) === null || _b === void 0 ? void 0 : _b.ifGenerationNotMatch) {\n            query.ifGenerationNotMatch =\n                options.preconditionOpts.ifGenerationNotMatch;\n        }\n        if ((_c = options.preconditionOpts) === null || _c === void 0 ? void 0 : _c.ifMetagenerationMatch) {\n            query.ifMetagenerationMatch =\n                options.preconditionOpts.ifMetagenerationMatch;\n        }\n        if ((_d = options.preconditionOpts) === null || _d === void 0 ? void 0 : _d.ifMetagenerationNotMatch) {\n            query.ifMetagenerationNotMatch =\n                options.preconditionOpts.ifMetagenerationNotMatch;\n        }\n        // You aren't allowed to set both predefinedAcl & acl properties on a bucket\n        // so acl must explicitly be nullified.\n        const metadata = { ...options.metadata, acl: null };\n        this.setMetadata(metadata, query, (err) => {\n            if (err) {\n                callback(err);\n            }\n            const internalCall = () => {\n                if (options.includeFiles) {\n                    return (0,util__WEBPACK_IMPORTED_MODULE_7__.promisify)(this.makeAllFilesPublicPrivate_).call(this, options);\n                }\n                return Promise.resolve([]);\n            };\n            internalCall()\n                .then(files => callback(null, files))\n                .catch(callback);\n        });\n    }\n    /**\n     * @typedef {object} MakeBucketPublicOptions\n     * @property {boolean} [includeFiles=false] Make each file in the bucket\n     *     private.\n     * @property {boolean} [force] Queue errors occurred while making files\n     *     private until all files have been processed.\n     */\n    /**\n     * @callback MakeBucketPublicCallback\n     * @param {?Error} err Request error, if any.\n     * @param {File[]} files List of files made public.\n     */\n    /**\n     * @typedef {array} MakeBucketPublicResponse\n     * @property {File[]} 0 List of files made public.\n     */\n    /**\n     * Make the bucket publicly readable.\n     *\n     * You may also choose to make the contents of the bucket publicly readable by\n     * specifying `includeFiles: true`. This will automatically run\n     * {@link File#makePublic} for every file in the bucket.\n     *\n     * When specifying `includeFiles: true`, use `force: true` to delay execution\n     * of your callback until all files have been processed. By default, the\n     * callback is executed after the first error. Use `force` to queue such\n     * errors until all files have been processed, after which they will be\n     * returned as an array as the first argument to your callback.\n     *\n     * NOTE: This may cause the process to be long-running and use a high number\n     * of requests. Use with caution.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/patch| Buckets: patch API Documentation}\n     *\n     * @param {MakeBucketPublicOptions} [options] Configuration options.\n     * @param {boolean} [options.includeFiles=false] Make each file in the bucket\n     *     private.\n     * @param {boolean} [options.force] Queue errors occurred while making files\n     *     private until all files have been processed.\n     * @param {MakeBucketPublicCallback} [callback] Callback function.\n     * @returns {Promise<MakeBucketPublicResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * //-\n     * // Make the bucket publicly readable.\n     * //-\n     * bucket.makePublic(function(err) {});\n     *\n     * //-\n     * // Make the bucket and its contents publicly readable.\n     * //-\n     * const opts = {\n     *   includeFiles: true\n     * };\n     *\n     * bucket.makePublic(opts, function(err, files) {\n     *   // `err`:\n     *   //    The first error to occur, otherwise null.\n     *   //\n     *   // `files`:\n     *   //    Array of files successfully made public in the bucket.\n     * });\n     *\n     * //-\n     * // Make the bucket and its contents publicly readable, using force to\n     * // suppress errors until all files have been processed.\n     * //-\n     * const opts = {\n     *   includeFiles: true,\n     *   force: true\n     * };\n     *\n     * bucket.makePublic(opts, function(errors, files) {\n     *   // `errors`:\n     *   //    Array of errors if any occurred, otherwise null.\n     *   //\n     *   // `files`:\n     *   //    Array of files successfully made public in the bucket.\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.makePublic(opts).then(function(data) {\n     *   const files = data[0];\n     * });\n     * ```\n     */\n    makePublic(optionsOrCallback, callback) {\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        const req = { public: true, ...options };\n        this.acl\n            .add({\n            entity: 'allUsers',\n            role: 'READER',\n        })\n            .then(() => {\n            return this.acl.default.add({\n                entity: 'allUsers',\n                role: 'READER',\n            });\n        })\n            .then(() => {\n            if (req.includeFiles) {\n                return (0,util__WEBPACK_IMPORTED_MODULE_7__.promisify)(this.makeAllFilesPublicPrivate_).call(this, req);\n            }\n            return [];\n        })\n            .then(files => callback(null, files), callback);\n    }\n    /**\n     * Get a reference to a Cloud Pub/Sub Notification.\n     *\n     * @param {string} id ID of notification.\n     * @returns {Notification}\n     * @see Notification\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('my-bucket');\n     * const notification = bucket.notification('1');\n     * ```\n     */\n    notification(id) {\n        if (!id) {\n            throw new Error(BucketExceptionMessages.SUPPLY_NOTIFICATION_ID);\n        }\n        return new _notification_js__WEBPACK_IMPORTED_MODULE_13__.Notification(this, id);\n    }\n    /**\n     * Remove an already-existing retention policy from this bucket, if it is not\n     * locked.\n     *\n     * @param {SetBucketMetadataCallback} [callback] Callback function.\n     * @param {SetBucketMetadataOptions} [options] Options, including precondition options\n     * @returns {Promise<SetBucketMetadataResponse>}\n     *\n     * @example\n     * ```\n     * const storage = require('@google-cloud/storage')();\n     * const bucket = storage.bucket('albums');\n     *\n     * bucket.removeRetentionPeriod(function(err, apiResponse) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.removeRetentionPeriod().then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     * ```\n     */\n    removeRetentionPeriod(optionsOrCallback, callback) {\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        this.setMetadata({\n            retentionPolicy: null,\n        }, options, callback);\n    }\n    /**\n     * Makes request and applies userProject query parameter if necessary.\n     *\n     * @private\n     *\n     * @param {object} reqOpts - The request options.\n     * @param {function} callback - The callback function.\n     */\n    request(reqOpts, callback) {\n        if (this.userProject && (!reqOpts.qs || !reqOpts.qs.userProject)) {\n            reqOpts.qs = { ...reqOpts.qs, userProject: this.userProject };\n        }\n        return super.request(reqOpts, callback);\n    }\n    /**\n     * @deprecated\n     * @typedef {array} SetLabelsResponse\n     * @property {object} 0 The bucket metadata.\n     */\n    /**\n     * @deprecated\n     * @callback SetLabelsCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} metadata The bucket metadata.\n     */\n    /**\n     * @deprecated\n     * @typedef {object} SetLabelsOptions Configuration options for Bucket#setLabels().\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * @deprecated Use setMetadata directly.\n     * Set labels on the bucket.\n     *\n     * This makes an underlying call to {@link Bucket#setMetadata}, which\n     * is a PATCH request. This means an individual label can be overwritten, but\n     * unmentioned labels will not be touched.\n     *\n     * @param {object<string, string>} labels Labels to set on the bucket.\n     * @param {SetLabelsOptions} [options] Configuration options.\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {SetLabelsCallback} [callback] Callback function.\n     * @returns {Promise<SetLabelsResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * const labels = {\n     *   labelone: 'labelonevalue',\n     *   labeltwo: 'labeltwovalue'\n     * };\n     *\n     * bucket.setLabels(labels, function(err, metadata) {\n     *   if (!err) {\n     *     // Labels set successfully.\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.setLabels(labels).then(function(data) {\n     *   const metadata = data[0];\n     * });\n     * ```\n     */\n    setLabels(labels, optionsOrCallback, callback) {\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        callback = callback || _nodejs_common_index_js__WEBPACK_IMPORTED_MODULE_0__.util.noop;\n        this.setMetadata({ labels }, options, callback);\n    }\n    setMetadata(metadata, optionsOrCallback, cb) {\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        cb =\n            typeof optionsOrCallback === 'function'\n                ? optionsOrCallback\n                : cb;\n        this.disableAutoRetryConditionallyIdempotent_(this.methods.setMetadata, AvailableServiceObjectMethods.setMetadata, options);\n        super\n            .setMetadata(metadata, options)\n            .then(resp => cb(null, ...resp))\n            .catch(cb)\n            .finally(() => {\n            this.storage.retryOptions.autoRetry = this.instanceRetryValue;\n        });\n    }\n    /**\n     * Lock all objects contained in the bucket, based on their creation time. Any\n     * attempt to overwrite or delete objects younger than the retention period\n     * will result in a `PERMISSION_DENIED` error.\n     *\n     * An unlocked retention policy can be modified or removed from the bucket via\n     * {@link File#removeRetentionPeriod} and {@link File#setRetentionPeriod}. A\n     * locked retention policy cannot be removed or shortened in duration for the\n     * lifetime of the bucket. Attempting to remove or decrease period of a locked\n     * retention policy will result in a `PERMISSION_DENIED` error. You can still\n     * increase the policy.\n     *\n     * @param {*} duration In seconds, the minimum retention time for all objects\n     *     contained in this bucket.\n     * @param {SetBucketMetadataCallback} [callback] Callback function.\n     * @param {SetBucketMetadataCallback} [options] Options, including precondition options.\n     * @returns {Promise<SetBucketMetadataResponse>}\n     *\n     * @example\n     * ```\n     * const storage = require('@google-cloud/storage')();\n     * const bucket = storage.bucket('albums');\n     *\n     * const DURATION_SECONDS = 15780000; // 6 months.\n     *\n     * //-\n     * // Lock the objects in this bucket for 6 months.\n     * //-\n     * bucket.setRetentionPeriod(DURATION_SECONDS, function(err, apiResponse) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.setRetentionPeriod(DURATION_SECONDS).then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     * ```\n     */\n    setRetentionPeriod(duration, optionsOrCallback, callback) {\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        this.setMetadata({\n            retentionPolicy: {\n                retentionPeriod: duration.toString(),\n            },\n        }, options, callback);\n    }\n    /**\n     *\n     * @typedef {object} Cors\n     * @property {number} [maxAgeSeconds] The number of seconds the browser is\n     *     allowed to make requests before it must repeat the preflight request.\n     * @property {string[]} [method] HTTP method allowed for cross origin resource\n     *     sharing with this bucket.\n     * @property {string[]} [origin] an origin allowed for cross origin resource\n     *     sharing with this bucket.\n     * @property {string[]} [responseHeader] A header allowed for cross origin\n     *     resource sharing with this bucket.\n     */\n    /**\n     * This can be used to set the CORS configuration on the bucket.\n     *\n     * The configuration will be overwritten with the value passed into this.\n     *\n     * @param {Cors[]} corsConfiguration The new CORS configuration to set\n     * @param {number} [corsConfiguration.maxAgeSeconds] The number of seconds the browser is\n     *     allowed to make requests before it must repeat the preflight request.\n     * @param {string[]} [corsConfiguration.method] HTTP method allowed for cross origin resource\n     *     sharing with this bucket.\n     * @param {string[]} [corsConfiguration.origin] an origin allowed for cross origin resource\n     *     sharing with this bucket.\n     * @param {string[]} [corsConfiguration.responseHeader] A header allowed for cross origin\n     *     resource sharing with this bucket.\n     * @param {SetBucketMetadataCallback} [callback] Callback function.\n     * @param {SetBucketMetadataOptions} [options] Options, including precondition options.\n     * @returns {Promise<SetBucketMetadataResponse>}\n     *\n     * @example\n     * ```\n     * const storage = require('@google-cloud/storage')();\n     * const bucket = storage.bucket('albums');\n     *\n     * const corsConfiguration = [{maxAgeSeconds: 3600}]; // 1 hour\n     * bucket.setCorsConfiguration(corsConfiguration);\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.setCorsConfiguration(corsConfiguration).then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     * ```\n     */\n    setCorsConfiguration(corsConfiguration, optionsOrCallback, callback) {\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        this.setMetadata({\n            cors: corsConfiguration,\n        }, options, callback);\n    }\n    /**\n     * @typedef {object} SetBucketStorageClassOptions\n     * @property {string} [userProject] - The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * @callback SetBucketStorageClassCallback\n     * @param {?Error} err Request error, if any.\n     */\n    /**\n     * Set the default storage class for new files in this bucket.\n     *\n     * See {@link https://cloud.google.com/storage/docs/storage-classes| Storage Classes}\n     *\n     * @param {string} storageClass The new storage class. (`standard`,\n     *     `nearline`, `coldline`, or `archive`).\n     *     **Note:** The storage classes `multi_regional`, `regional`, and\n     *     `durable_reduced_availability` are now legacy and will be deprecated in\n     *     the future.\n     * @param {object} [options] Configuration options.\n     * @param {string} [options.userProject] - The ID of the project which will be\n     *     billed for the request.\n     * @param {SetStorageClassCallback} [callback] Callback function.\n     * @returns {Promise}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * bucket.setStorageClass('nearline', function(err, apiResponse) {\n     *   if (err) {\n     *     // Error handling omitted.\n     *   }\n     *\n     *   // The storage class was updated successfully.\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.setStorageClass('nearline').then(function() {});\n     * ```\n     */\n    setStorageClass(storageClass, optionsOrCallback, callback) {\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        // In case we get input like `storageClass`, convert to `storage_class`.\n        storageClass = storageClass\n            .replace(/-/g, '_')\n            .replace(/([a-z])([A-Z])/g, (_, low, up) => {\n            return low + '_' + up;\n        })\n            .toUpperCase();\n        this.setMetadata({ storageClass }, options, callback);\n    }\n    /**\n     * Set a user project to be billed for all requests made from this Bucket\n     * object and any files referenced from this Bucket object.\n     *\n     * @param {string} userProject The user project.\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * bucket.setUserProject('grape-spaceship-123');\n     * ```\n     */\n    setUserProject(userProject) {\n        this.userProject = userProject;\n        const methods = [\n            'create',\n            'delete',\n            'exists',\n            'get',\n            'getMetadata',\n            'setMetadata',\n        ];\n        methods.forEach(method => {\n            const methodConfig = this.methods[method];\n            if (typeof methodConfig === 'object') {\n                if (typeof methodConfig.reqOpts === 'object') {\n                    Object.assign(methodConfig.reqOpts.qs, { userProject });\n                }\n                else {\n                    methodConfig.reqOpts = {\n                        qs: { userProject },\n                    };\n                }\n            }\n        });\n    }\n    /**\n     * @typedef {object} UploadOptions Configuration options for Bucket#upload().\n     * @property {string|File} [destination] The place to save\n     *     your file. If given a string, the file will be uploaded to the bucket\n     *     using the string as a filename. When given a File object, your local\n     * file will be uploaded to the File object's bucket and under the File\n     * object's name. Lastly, when this argument is omitted, the file is uploaded\n     * to your bucket using the name of the local file.\n     * @property {string} [encryptionKey] A custom encryption key. See\n     *     {@link https://cloud.google.com/storage/docs/encryption#customer-supplied| Customer-supplied Encryption Keys}.\n     * @property {boolean} [gzip] Automatically gzip the file. This will set\n     *     `options.metadata.contentEncoding` to `gzip`.\n     * @property {string} [kmsKeyName] The name of the Cloud KMS key that will\n     *     be used to encrypt the object. Must be in the format:\n     *     `projects/my-project/locations/location/keyRings/my-kr/cryptoKeys/my-key`.\n     * @property {object} [metadata] See an\n     *     {@link https://cloud.google.com/storage/docs/json_api/v1/objects/insert#request_properties_JSON| Objects: insert request body}.\n     * @property {string} [offset] The starting byte of the upload stream, for\n     *     resuming an interrupted upload. Defaults to 0.\n     * @property {string} [predefinedAcl] Apply a predefined set of access\n     * controls to this object.\n     *\n     * Acceptable values are:\n     * - **`authenticatedRead`** - Object owner gets `OWNER` access, and\n     *       `allAuthenticatedUsers` get `READER` access.\n     *\n     * - **`bucketOwnerFullControl`** - Object owner gets `OWNER` access, and\n     *       project team owners get `OWNER` access.\n     *\n     * - **`bucketOwnerRead`** - Object owner gets `OWNER` access, and project\n     *       team owners get `READER` access.\n     *\n     * - **`private`** - Object owner gets `OWNER` access.\n     *\n     * - **`projectPrivate`** - Object owner gets `OWNER` access, and project\n     *       team members get access according to their roles.\n     *\n     * - **`publicRead`** - Object owner gets `OWNER` access, and `allUsers`\n     *       get `READER` access.\n     * @property {boolean} [private] Make the uploaded file private. (Alias for\n     *     `options.predefinedAcl = 'private'`)\n     * @property {boolean} [public] Make the uploaded file public. (Alias for\n     *     `options.predefinedAcl = 'publicRead'`)\n     * @property {boolean} [resumable=true] Resumable uploads are automatically\n     *     enabled and must be shut off explicitly by setting to false.\n     * @property {number} [timeout=60000] Set the HTTP request timeout in\n     *     milliseconds. This option is not available for resumable uploads.\n     *     Default: `60000`\n     * @property {string} [uri] The URI for an already-created resumable\n     *     upload. See {@link File#createResumableUpload}.\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     * @property {string|boolean} [validation] Possible values: `\"md5\"`,\n     *     `\"crc32c\"`, or `false`. By default, data integrity is validated with an\n     *     MD5 checksum for maximum reliability. CRC32c will provide better\n     *     performance with less reliability. You may also choose to skip\n     * validation completely, however this is **not recommended**.\n     */\n    /**\n     * @typedef {array} UploadResponse\n     * @property {object} 0 The uploaded {@link File}.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * @callback UploadCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} file The uploaded {@link File}.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Upload a file to the bucket. This is a convenience method that wraps\n     * {@link File#createWriteStream}.\n     *\n     * Resumable uploads are enabled by default\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/how-tos/upload#uploads| Upload Options (Simple or Resumable)}\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/objects/insert| Objects: insert API Documentation}\n     *\n     * @param {string} pathString The fully qualified path to the file you\n     *     wish to upload to your bucket.\n     * @param {UploadOptions} [options] Configuration options.\n     * @param {string|File} [options.destination] The place to save\n     *     your file. If given a string, the file will be uploaded to the bucket\n     *     using the string as a filename. When given a File object, your local\n     * file will be uploaded to the File object's bucket and under the File\n     * object's name. Lastly, when this argument is omitted, the file is uploaded\n     * to your bucket using the name of the local file.\n     * @param {string} [options.encryptionKey] A custom encryption key. See\n     *     {@link https://cloud.google.com/storage/docs/encryption#customer-supplied| Customer-supplied Encryption Keys}.\n     * @param {boolean} [options.gzip] Automatically gzip the file. This will set\n     *     `options.metadata.contentEncoding` to `gzip`.\n     * @param {string} [options.kmsKeyName] The name of the Cloud KMS key that will\n     *     be used to encrypt the object. Must be in the format:\n     *     `projects/my-project/locations/location/keyRings/my-kr/cryptoKeys/my-key`.\n     * @param {object} [options.metadata] See an\n     *     {@link https://cloud.google.com/storage/docs/json_api/v1/objects/insert#request_properties_JSON| Objects: insert request body}.\n     * @param {string} [options.offset] The starting byte of the upload stream, for\n     *     resuming an interrupted upload. Defaults to 0.\n     * @param {string} [options.predefinedAcl] Apply a predefined set of access\n     * controls to this object.\n     * Acceptable values are:\n     * - **`authenticatedRead`** - Object owner gets `OWNER` access, and\n     *   `allAuthenticatedUsers` get `READER` access.\n     *\n     * - **`bucketOwnerFullControl`** - Object owner gets `OWNER` access, and\n     *   project team owners get `OWNER` access.\n     *\n     * - **`bucketOwnerRead`** - Object owner gets `OWNER` access, and project\n     *   team owners get `READER` access.\n     *\n     * - **`private`** - Object owner gets `OWNER` access.\n     *\n     * - **`projectPrivate`** - Object owner gets `OWNER` access, and project\n     *   team members get access according to their roles.\n     *\n     * - **`publicRead`** - Object owner gets `OWNER` access, and `allUsers`\n     *   get `READER` access.\n     * @param {boolean} [options.private] Make the uploaded file private. (Alias for\n     *     `options.predefinedAcl = 'private'`)\n     * @param {boolean} [options.public] Make the uploaded file public. (Alias for\n     *     `options.predefinedAcl = 'publicRead'`)\n     * @param {boolean} [options.resumable=true] Resumable uploads are automatically\n     *     enabled and must be shut off explicitly by setting to false.\n     * @param {number} [options.timeout=60000] Set the HTTP request timeout in\n     *     milliseconds. This option is not available for resumable uploads.\n     *     Default: `60000`\n     * @param {string} [options.uri] The URI for an already-created resumable\n     *     upload. See {@link File#createResumableUpload}.\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {string|boolean} [options.validation] Possible values: `\"md5\"`,\n     *     `\"crc32c\"`, or `false`. By default, data integrity is validated with an\n     *     MD5 checksum for maximum reliability. CRC32c will provide better\n     *     performance with less reliability. You may also choose to skip\n     * validation completely, however this is **not recommended**.\n     * @param {UploadCallback} [callback] Callback function.\n     * @returns {Promise<UploadResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * //-\n     * // Upload a file from a local path.\n     * //-\n     * bucket.upload('/local/path/image.png', function(err, file, apiResponse) {\n     *   // Your bucket now contains:\n     *   // - \"image.png\" (with the contents of `/local/path/image.png')\n     *\n     *   // `file` is an instance of a File object that refers to your new file.\n     * });\n     *\n     *\n     * //-\n     * // It's not always that easy. You will likely want to specify the filename\n     * // used when your new file lands in your bucket.\n     * //\n     * // You may also want to set metadata or customize other options.\n     * //-\n     * const options = {\n     *   destination: 'new-image.png',\n     *   validation: 'crc32c',\n     *   metadata: {\n     *     metadata: {\n     *       event: 'Fall trip to the zoo'\n     *     }\n     *   }\n     * };\n     *\n     * bucket.upload('local-image.png', options, function(err, file) {\n     *   // Your bucket now contains:\n     *   // - \"new-image.png\" (with the contents of `local-image.png')\n     *\n     *   // `file` is an instance of a File object that refers to your new file.\n     * });\n     *\n     * //-\n     * // You can also have a file gzip'd on the fly.\n     * //-\n     * bucket.upload('index.html', { gzip: true }, function(err, file) {\n     *   // Your bucket now contains:\n     *   // - \"index.html\" (automatically compressed with gzip)\n     *\n     *   // Downloading the file with `file.download` will automatically decode\n     * the\n     *   // file.\n     * });\n     *\n     * //-\n     * // You may also re-use a File object, {File}, that references\n     * // the file you wish to create or overwrite.\n     * //-\n     * const options = {\n     *   destination: bucket.file('existing-file.png'),\n     *   resumable: false\n     * };\n     *\n     * bucket.upload('local-img.png', options, function(err, newFile) {\n     *   // Your bucket now contains:\n     *   // - \"existing-file.png\" (with the contents of `local-img.png')\n     *\n     *   // Note:\n     *   // The `newFile` parameter is equal to `file`.\n     * });\n     *\n     * //-\n     * // To use\n     * // <a\n     * href=\"https://cloud.google.com/storage/docs/encryption#customer-supplied\">\n     * // Customer-supplied Encryption Keys</a>, provide the `encryptionKey`\n     * option.\n     * //-\n     * const crypto = require('crypto');\n     * const encryptionKey = crypto.randomBytes(32);\n     *\n     * bucket.upload('img.png', {\n     *   encryptionKey: encryptionKey\n     * }, function(err, newFile) {\n     *   // `img.png` was uploaded with your custom encryption key.\n     *\n     *   // `newFile` is already configured to use the encryption key when making\n     *   // operations on the remote object.\n     *\n     *   // However, to use your encryption key later, you must create a `File`\n     *   // instance with the `key` supplied:\n     *   const file = bucket.file('img.png', {\n     *     encryptionKey: encryptionKey\n     *   });\n     *\n     *   // Or with `file#setEncryptionKey`:\n     *   const file = bucket.file('img.png');\n     *   file.setEncryptionKey(encryptionKey);\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.upload('local-image.png').then(function(data) {\n     *   const file = data[0];\n     * });\n     *\n     * To upload a file from a URL, use {@link File#createWriteStream}.\n     *\n     * ```\n     * @example <caption>include:samples/files.js</caption>\n     * region_tag:storage_upload_file\n     * Another example:\n     *\n     * @example <caption>include:samples/encryption.js</caption>\n     * region_tag:storage_upload_encrypted_file\n     * Example of uploading an encrypted file:\n     */\n    upload(pathString, optionsOrCallback, callback) {\n        var _a, _b;\n        const upload = (numberOfRetries) => {\n            const returnValue = async_retry__WEBPACK_IMPORTED_MODULE_8__(async (bail) => {\n                await new Promise((resolve, reject) => {\n                    var _a, _b;\n                    if (numberOfRetries === 0 &&\n                        ((_b = (_a = newFile === null || newFile === void 0 ? void 0 : newFile.storage) === null || _a === void 0 ? void 0 : _a.retryOptions) === null || _b === void 0 ? void 0 : _b.autoRetry)) {\n                        newFile.storage.retryOptions.autoRetry = false;\n                    }\n                    const writable = newFile.createWriteStream(options);\n                    if (options.onUploadProgress) {\n                        writable.on('progress', options.onUploadProgress);\n                    }\n                    fs__WEBPACK_IMPORTED_MODULE_3__.createReadStream(pathString)\n                        .on('error', bail)\n                        .pipe(writable)\n                        .on('error', err => {\n                        if (this.storage.retryOptions.autoRetry &&\n                            this.storage.retryOptions.retryableErrorFn(err)) {\n                            return reject(err);\n                        }\n                        else {\n                            return bail(err);\n                        }\n                    })\n                        .on('finish', () => {\n                        return resolve();\n                    });\n                });\n            }, {\n                retries: numberOfRetries,\n                factor: this.storage.retryOptions.retryDelayMultiplier,\n                maxTimeout: this.storage.retryOptions.maxRetryDelay * 1000, //convert to milliseconds\n                maxRetryTime: this.storage.retryOptions.totalTimeout * 1000, //convert to milliseconds\n            });\n            if (!callback) {\n                return returnValue;\n            }\n            else {\n                return returnValue\n                    .then(() => {\n                    if (callback) {\n                        return callback(null, newFile, newFile.metadata);\n                    }\n                })\n                    .catch(callback);\n            }\n        };\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (global['GCLOUD_SANDBOX_ENV']) {\n            return;\n        }\n        let options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        options = Object.assign({\n            metadata: {},\n        }, options);\n        // Do not retry if precondition option ifGenerationMatch is not set\n        // because this is a file operation\n        let maxRetries = this.storage.retryOptions.maxRetries;\n        if ((((_a = options === null || options === void 0 ? void 0 : options.preconditionOpts) === null || _a === void 0 ? void 0 : _a.ifGenerationMatch) === undefined &&\n            ((_b = this.instancePreconditionOpts) === null || _b === void 0 ? void 0 : _b.ifGenerationMatch) === undefined &&\n            this.storage.retryOptions.idempotencyStrategy ===\n                _storage_js__WEBPACK_IMPORTED_MODULE_14__.IdempotencyStrategy.RetryConditional) ||\n            this.storage.retryOptions.idempotencyStrategy ===\n                _storage_js__WEBPACK_IMPORTED_MODULE_14__.IdempotencyStrategy.RetryNever) {\n            maxRetries = 0;\n        }\n        let newFile;\n        if (options.destination instanceof _file_js__WEBPACK_IMPORTED_MODULE_11__.File) {\n            newFile = options.destination;\n        }\n        else if (options.destination !== null &&\n            typeof options.destination === 'string') {\n            // Use the string as the name of the file.\n            newFile = this.file(options.destination, {\n                encryptionKey: options.encryptionKey,\n                kmsKeyName: options.kmsKeyName,\n                preconditionOpts: this.instancePreconditionOpts,\n            });\n        }\n        else {\n            // Resort to using the name of the incoming file.\n            const destination = path__WEBPACK_IMPORTED_MODULE_5__.basename(pathString);\n            newFile = this.file(destination, {\n                encryptionKey: options.encryptionKey,\n                kmsKeyName: options.kmsKeyName,\n                preconditionOpts: this.instancePreconditionOpts,\n            });\n        }\n        upload(maxRetries);\n    }\n    /**\n     * @private\n     *\n     * @typedef {object} MakeAllFilesPublicPrivateOptions\n     * @property {boolean} [force] Suppress errors until all files have been\n     *     processed.\n     * @property {boolean} [private] Make files private.\n     * @property {boolean} [public] Make files public.\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * @private\n     *\n     * @callback SetBucketMetadataCallback\n     * @param {?Error} err Request error, if any.\n     * @param {File[]} files Files that were updated.\n     */\n    /**\n     * @typedef {array} MakeAllFilesPublicPrivateResponse\n     * @property {File[]} 0 List of files affected.\n     */\n    /**\n     * Iterate over all of a bucket's files, calling `file.makePublic()` (public)\n     * or `file.makePrivate()` (private) on each.\n     *\n     * Operations are performed in parallel, up to 10 at once. The first error\n     * breaks the loop, and will execute the provided callback with it. Specify\n     * `{ force: true }` to suppress the errors.\n     *\n     * @private\n     *\n     * @param {MakeAllFilesPublicPrivateOptions} [options] Configuration options.\n     * @param {boolean} [options.force] Suppress errors until all files have been\n     *     processed.\n     * @param {boolean} [options.private] Make files private.\n     * @param {boolean} [options.public] Make files public.\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n  \n     * @param {MakeAllFilesPublicPrivateCallback} callback Callback function.\n     *\n     * @return {Promise<MakeAllFilesPublicPrivateResponse>}\n     */\n    makeAllFilesPublicPrivate_(optionsOrCallback, callback) {\n        const MAX_PARALLEL_LIMIT = 10;\n        const errors = [];\n        const updatedFiles = [];\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        const processFile = async (file) => {\n            try {\n                await (options.public ? file.makePublic() : file.makePrivate(options));\n                updatedFiles.push(file);\n            }\n            catch (e) {\n                if (!options.force) {\n                    throw e;\n                }\n                errors.push(e);\n            }\n        };\n        this.getFiles(options)\n            .then(([files]) => {\n            const limit = p_limit__WEBPACK_IMPORTED_MODULE_6__(MAX_PARALLEL_LIMIT);\n            const promises = files.map(file => {\n                return limit(() => processFile(file));\n            });\n            return Promise.all(promises);\n        })\n            .then(() => callback(errors.length > 0 ? errors : null, updatedFiles), err => callback(err, updatedFiles));\n    }\n    getId() {\n        return this.id;\n    }\n    disableAutoRetryConditionallyIdempotent_(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    coreOpts, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    methodType, localPreconditionOptions) {\n        var _a, _b;\n        if (typeof coreOpts === 'object' &&\n            ((_b = (_a = coreOpts === null || coreOpts === void 0 ? void 0 : coreOpts.reqOpts) === null || _a === void 0 ? void 0 : _a.qs) === null || _b === void 0 ? void 0 : _b.ifMetagenerationMatch) === undefined &&\n            (localPreconditionOptions === null || localPreconditionOptions === void 0 ? void 0 : localPreconditionOptions.ifMetagenerationMatch) === undefined &&\n            (methodType === AvailableServiceObjectMethods.setMetadata ||\n                methodType === AvailableServiceObjectMethods.delete) &&\n            this.storage.retryOptions.idempotencyStrategy ===\n                _storage_js__WEBPACK_IMPORTED_MODULE_14__.IdempotencyStrategy.RetryConditional) {\n            this.storage.retryOptions.autoRetry = false;\n        }\n        else if (this.storage.retryOptions.idempotencyStrategy ===\n            _storage_js__WEBPACK_IMPORTED_MODULE_14__.IdempotencyStrategy.RetryNever) {\n            this.storage.retryOptions.autoRetry = false;\n        }\n    }\n}\n/*! Developer Documentation\n *\n * These methods can be auto-paginated.\n */\n_google_cloud_paginator__WEBPACK_IMPORTED_MODULE_1__.paginator.extend(Bucket, 'getFiles');\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\n(0,_google_cloud_promisify__WEBPACK_IMPORTED_MODULE_2__.promisifyAll)(Bucket, {\n    exclude: ['cloudStorageURI', 'request', 'file', 'notification', 'restore'],\n});\n/**\n * Reference to the {@link Bucket} class.\n * @name module:@google-cloud/storage.Bucket\n * @see Bucket\n */\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/build/esm/src/bucket.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/build/esm/src/channel.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/build/esm/src/channel.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Channel: () => (/* binding */ Channel)\n/* harmony export */ });\n/* harmony import */ var _nodejs_common_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./nodejs-common/index.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/nodejs-common/index.js\");\n/* harmony import */ var _google_cloud_promisify__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @google-cloud/promisify */ \"(rsc)/./node_modules/@google-cloud/promisify/build/src/index.js\");\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\n/**\n * Create a channel object to interact with a Cloud Storage channel.\n *\n * See {@link https://cloud.google.com/storage/docs/object-change-notification| Object Change Notification}\n *\n * @class\n *\n * @param {string} id The ID of the channel.\n * @param {string} resourceId The resource ID of the channel.\n *\n * @example\n * ```\n * const {Storage} = require('@google-cloud/storage');\n * const storage = new Storage();\n * const channel = storage.channel('id', 'resource-id');\n * ```\n */\nclass Channel extends _nodejs_common_index_js__WEBPACK_IMPORTED_MODULE_0__.ServiceObject {\n    constructor(storage, id, resourceId) {\n        const config = {\n            parent: storage,\n            baseUrl: '/channels',\n            // An ID shouldn't be included in the API requests.\n            // RE:\n            // https://github.com/GoogleCloudPlatform/google-cloud-node/issues/1145\n            id: '',\n            methods: {\n            // Only need `request`.\n            },\n        };\n        super(config);\n        this.metadata.id = id;\n        this.metadata.resourceId = resourceId;\n    }\n    /**\n     * @typedef {array} StopResponse\n     * @property {object} 0 The full API response.\n     */\n    /**\n     * @callback StopCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Stop this channel.\n     *\n     * @param {StopCallback} [callback] Callback function.\n     * @returns {Promise<StopResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const channel = storage.channel('id', 'resource-id');\n     * channel.stop(function(err, apiResponse) {\n     *   if (!err) {\n     *     // Channel stopped successfully.\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * channel.stop().then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     * ```\n     */\n    stop(callback) {\n        callback = callback || _nodejs_common_index_js__WEBPACK_IMPORTED_MODULE_0__.util.noop;\n        this.request({\n            method: 'POST',\n            uri: '/stop',\n            json: this.metadata,\n        }, (err, apiResponse) => {\n            callback(err, apiResponse);\n        });\n    }\n}\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\n(0,_google_cloud_promisify__WEBPACK_IMPORTED_MODULE_1__.promisifyAll)(Channel);\n/**\n * Reference to the {@link Channel} class.\n * @name module:@google-cloud/storage.Channel\n * @see Channel\n */\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL2J1aWxkL2VzbS9zcmMvY2hhbm5lbC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUMrRDtBQUNSO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBLFVBQVUsU0FBUztBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixrRUFBYTtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsT0FBTztBQUN4QixrQkFBa0IsUUFBUTtBQUMxQjtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxjQUFjO0FBQzdCLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxjQUFjLFNBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IseURBQUk7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxRUFBWTtBQUNaO0FBQ0EscUJBQXFCLGVBQWU7QUFDcEM7QUFDQTtBQUNBO0FBQ21CIiwic291cmNlcyI6WyIvVXNlcnMvbHVjYXNzYW50b3MvRG93bmxvYWRzL3ZpdHJpbnktd2ViLWxsL25vZGVfbW9kdWxlcy9AZ29vZ2xlLWNsb3VkL3N0b3JhZ2UvYnVpbGQvZXNtL3NyYy9jaGFubmVsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuaW1wb3J0IHsgU2VydmljZU9iamVjdCwgdXRpbCB9IGZyb20gJy4vbm9kZWpzLWNvbW1vbi9pbmRleC5qcyc7XG5pbXBvcnQgeyBwcm9taXNpZnlBbGwgfSBmcm9tICdAZ29vZ2xlLWNsb3VkL3Byb21pc2lmeSc7XG4vKipcbiAqIENyZWF0ZSBhIGNoYW5uZWwgb2JqZWN0IHRvIGludGVyYWN0IHdpdGggYSBDbG91ZCBTdG9yYWdlIGNoYW5uZWwuXG4gKlxuICogU2VlIHtAbGluayBodHRwczovL2Nsb3VkLmdvb2dsZS5jb20vc3RvcmFnZS9kb2NzL29iamVjdC1jaGFuZ2Utbm90aWZpY2F0aW9ufCBPYmplY3QgQ2hhbmdlIE5vdGlmaWNhdGlvbn1cbiAqXG4gKiBAY2xhc3NcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIElEIG9mIHRoZSBjaGFubmVsLlxuICogQHBhcmFtIHtzdHJpbmd9IHJlc291cmNlSWQgVGhlIHJlc291cmNlIElEIG9mIHRoZSBjaGFubmVsLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBcbiAqIGNvbnN0IHtTdG9yYWdlfSA9IHJlcXVpcmUoJ0Bnb29nbGUtY2xvdWQvc3RvcmFnZScpO1xuICogY29uc3Qgc3RvcmFnZSA9IG5ldyBTdG9yYWdlKCk7XG4gKiBjb25zdCBjaGFubmVsID0gc3RvcmFnZS5jaGFubmVsKCdpZCcsICdyZXNvdXJjZS1pZCcpO1xuICogYGBgXG4gKi9cbmNsYXNzIENoYW5uZWwgZXh0ZW5kcyBTZXJ2aWNlT2JqZWN0IHtcbiAgICBjb25zdHJ1Y3RvcihzdG9yYWdlLCBpZCwgcmVzb3VyY2VJZCkge1xuICAgICAgICBjb25zdCBjb25maWcgPSB7XG4gICAgICAgICAgICBwYXJlbnQ6IHN0b3JhZ2UsXG4gICAgICAgICAgICBiYXNlVXJsOiAnL2NoYW5uZWxzJyxcbiAgICAgICAgICAgIC8vIEFuIElEIHNob3VsZG4ndCBiZSBpbmNsdWRlZCBpbiB0aGUgQVBJIHJlcXVlc3RzLlxuICAgICAgICAgICAgLy8gUkU6XG4gICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vR29vZ2xlQ2xvdWRQbGF0Zm9ybS9nb29nbGUtY2xvdWQtbm9kZS9pc3N1ZXMvMTE0NVxuICAgICAgICAgICAgaWQ6ICcnLFxuICAgICAgICAgICAgbWV0aG9kczoge1xuICAgICAgICAgICAgLy8gT25seSBuZWVkIGByZXF1ZXN0YC5cbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICAgIHN1cGVyKGNvbmZpZyk7XG4gICAgICAgIHRoaXMubWV0YWRhdGEuaWQgPSBpZDtcbiAgICAgICAgdGhpcy5tZXRhZGF0YS5yZXNvdXJjZUlkID0gcmVzb3VyY2VJZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHR5cGVkZWYge2FycmF5fSBTdG9wUmVzcG9uc2VcbiAgICAgKiBAcHJvcGVydHkge29iamVjdH0gMCBUaGUgZnVsbCBBUEkgcmVzcG9uc2UuXG4gICAgICovXG4gICAgLyoqXG4gICAgICogQGNhbGxiYWNrIFN0b3BDYWxsYmFja1xuICAgICAqIEBwYXJhbSB7P0Vycm9yfSBlcnIgUmVxdWVzdCBlcnJvciwgaWYgYW55LlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBhcGlSZXNwb25zZSBUaGUgZnVsbCBBUEkgcmVzcG9uc2UuXG4gICAgICovXG4gICAgLyoqXG4gICAgICogU3RvcCB0aGlzIGNoYW5uZWwuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0b3BDYWxsYmFja30gW2NhbGxiYWNrXSBDYWxsYmFjayBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxTdG9wUmVzcG9uc2U+fVxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGBcbiAgICAgKiBjb25zdCB7U3RvcmFnZX0gPSByZXF1aXJlKCdAZ29vZ2xlLWNsb3VkL3N0b3JhZ2UnKTtcbiAgICAgKiBjb25zdCBzdG9yYWdlID0gbmV3IFN0b3JhZ2UoKTtcbiAgICAgKiBjb25zdCBjaGFubmVsID0gc3RvcmFnZS5jaGFubmVsKCdpZCcsICdyZXNvdXJjZS1pZCcpO1xuICAgICAqIGNoYW5uZWwuc3RvcChmdW5jdGlvbihlcnIsIGFwaVJlc3BvbnNlKSB7XG4gICAgICogICBpZiAoIWVycikge1xuICAgICAqICAgICAvLyBDaGFubmVsIHN0b3BwZWQgc3VjY2Vzc2Z1bGx5LlxuICAgICAqICAgfVxuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogLy8tXG4gICAgICogLy8gSWYgdGhlIGNhbGxiYWNrIGlzIG9taXR0ZWQsIHdlJ2xsIHJldHVybiBhIFByb21pc2UuXG4gICAgICogLy8tXG4gICAgICogY2hhbm5lbC5zdG9wKCkudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICogICBjb25zdCBhcGlSZXNwb25zZSA9IGRhdGFbMF07XG4gICAgICogfSk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgc3RvcChjYWxsYmFjaykge1xuICAgICAgICBjYWxsYmFjayA9IGNhbGxiYWNrIHx8IHV0aWwubm9vcDtcbiAgICAgICAgdGhpcy5yZXF1ZXN0KHtcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgdXJpOiAnL3N0b3AnLFxuICAgICAgICAgICAganNvbjogdGhpcy5tZXRhZGF0YSxcbiAgICAgICAgfSwgKGVyciwgYXBpUmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgIGNhbGxiYWNrKGVyciwgYXBpUmVzcG9uc2UpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4vKiEgRGV2ZWxvcGVyIERvY3VtZW50YXRpb25cbiAqXG4gKiBBbGwgYXN5bmMgbWV0aG9kcyAoZXhjZXB0IGZvciBzdHJlYW1zKSB3aWxsIHJldHVybiBhIFByb21pc2UgaW4gdGhlIGV2ZW50XG4gKiB0aGF0IGEgY2FsbGJhY2sgaXMgb21pdHRlZC5cbiAqL1xucHJvbWlzaWZ5QWxsKENoYW5uZWwpO1xuLyoqXG4gKiBSZWZlcmVuY2UgdG8gdGhlIHtAbGluayBDaGFubmVsfSBjbGFzcy5cbiAqIEBuYW1lIG1vZHVsZTpAZ29vZ2xlLWNsb3VkL3N0b3JhZ2UuQ2hhbm5lbFxuICogQHNlZSBDaGFubmVsXG4gKi9cbmV4cG9ydCB7IENoYW5uZWwgfTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/build/esm/src/channel.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/build/esm/src/crc32c.js":
/*!********************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/build/esm/src/crc32c.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CRC32C: () => (/* binding */ CRC32C),\n/* harmony export */   CRC32C_DEFAULT_VALIDATOR_GENERATOR: () => (/* binding */ CRC32C_DEFAULT_VALIDATOR_GENERATOR),\n/* harmony export */   CRC32C_EXCEPTION_MESSAGES: () => (/* binding */ CRC32C_EXCEPTION_MESSAGES),\n/* harmony export */   CRC32C_EXTENSIONS: () => (/* binding */ CRC32C_EXTENSIONS),\n/* harmony export */   CRC32C_EXTENSION_TABLE: () => (/* binding */ CRC32C_EXTENSION_TABLE)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n// Copyright 2022 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _CRC32C_crc32c;\n\n/**\n * Ported from {@link https://github.com/google/crc32c/blob/21fc8ef30415a635e7351ffa0e5d5367943d4a94/src/crc32c_portable.cc#L16-L59 github.com/google/crc32c}\n */\nconst CRC32C_EXTENSIONS = [\n    0x00000000, 0xf26b8303, 0xe13b70f7, 0x1350f3f4, 0xc79a971f, 0x35f1141c,\n    0x26a1e7e8, 0xd4ca64eb, 0x8ad958cf, 0x78b2dbcc, 0x6be22838, 0x9989ab3b,\n    0x4d43cfd0, 0xbf284cd3, 0xac78bf27, 0x5e133c24, 0x105ec76f, 0xe235446c,\n    0xf165b798, 0x030e349b, 0xd7c45070, 0x25afd373, 0x36ff2087, 0xc494a384,\n    0x9a879fa0, 0x68ec1ca3, 0x7bbcef57, 0x89d76c54, 0x5d1d08bf, 0xaf768bbc,\n    0xbc267848, 0x4e4dfb4b, 0x20bd8ede, 0xd2d60ddd, 0xc186fe29, 0x33ed7d2a,\n    0xe72719c1, 0x154c9ac2, 0x061c6936, 0xf477ea35, 0xaa64d611, 0x580f5512,\n    0x4b5fa6e6, 0xb93425e5, 0x6dfe410e, 0x9f95c20d, 0x8cc531f9, 0x7eaeb2fa,\n    0x30e349b1, 0xc288cab2, 0xd1d83946, 0x23b3ba45, 0xf779deae, 0x05125dad,\n    0x1642ae59, 0xe4292d5a, 0xba3a117e, 0x4851927d, 0x5b016189, 0xa96ae28a,\n    0x7da08661, 0x8fcb0562, 0x9c9bf696, 0x6ef07595, 0x417b1dbc, 0xb3109ebf,\n    0xa0406d4b, 0x522bee48, 0x86e18aa3, 0x748a09a0, 0x67dafa54, 0x95b17957,\n    0xcba24573, 0x39c9c670, 0x2a993584, 0xd8f2b687, 0x0c38d26c, 0xfe53516f,\n    0xed03a29b, 0x1f682198, 0x5125dad3, 0xa34e59d0, 0xb01eaa24, 0x42752927,\n    0x96bf4dcc, 0x64d4cecf, 0x77843d3b, 0x85efbe38, 0xdbfc821c, 0x2997011f,\n    0x3ac7f2eb, 0xc8ac71e8, 0x1c661503, 0xee0d9600, 0xfd5d65f4, 0x0f36e6f7,\n    0x61c69362, 0x93ad1061, 0x80fde395, 0x72966096, 0xa65c047d, 0x5437877e,\n    0x4767748a, 0xb50cf789, 0xeb1fcbad, 0x197448ae, 0x0a24bb5a, 0xf84f3859,\n    0x2c855cb2, 0xdeeedfb1, 0xcdbe2c45, 0x3fd5af46, 0x7198540d, 0x83f3d70e,\n    0x90a324fa, 0x62c8a7f9, 0xb602c312, 0x44694011, 0x5739b3e5, 0xa55230e6,\n    0xfb410cc2, 0x092a8fc1, 0x1a7a7c35, 0xe811ff36, 0x3cdb9bdd, 0xceb018de,\n    0xdde0eb2a, 0x2f8b6829, 0x82f63b78, 0x709db87b, 0x63cd4b8f, 0x91a6c88c,\n    0x456cac67, 0xb7072f64, 0xa457dc90, 0x563c5f93, 0x082f63b7, 0xfa44e0b4,\n    0xe9141340, 0x1b7f9043, 0xcfb5f4a8, 0x3dde77ab, 0x2e8e845f, 0xdce5075c,\n    0x92a8fc17, 0x60c37f14, 0x73938ce0, 0x81f80fe3, 0x55326b08, 0xa759e80b,\n    0xb4091bff, 0x466298fc, 0x1871a4d8, 0xea1a27db, 0xf94ad42f, 0x0b21572c,\n    0xdfeb33c7, 0x2d80b0c4, 0x3ed04330, 0xccbbc033, 0xa24bb5a6, 0x502036a5,\n    0x4370c551, 0xb11b4652, 0x65d122b9, 0x97baa1ba, 0x84ea524e, 0x7681d14d,\n    0x2892ed69, 0xdaf96e6a, 0xc9a99d9e, 0x3bc21e9d, 0xef087a76, 0x1d63f975,\n    0x0e330a81, 0xfc588982, 0xb21572c9, 0x407ef1ca, 0x532e023e, 0xa145813d,\n    0x758fe5d6, 0x87e466d5, 0x94b49521, 0x66df1622, 0x38cc2a06, 0xcaa7a905,\n    0xd9f75af1, 0x2b9cd9f2, 0xff56bd19, 0x0d3d3e1a, 0x1e6dcdee, 0xec064eed,\n    0xc38d26c4, 0x31e6a5c7, 0x22b65633, 0xd0ddd530, 0x0417b1db, 0xf67c32d8,\n    0xe52cc12c, 0x1747422f, 0x49547e0b, 0xbb3ffd08, 0xa86f0efc, 0x5a048dff,\n    0x8ecee914, 0x7ca56a17, 0x6ff599e3, 0x9d9e1ae0, 0xd3d3e1ab, 0x21b862a8,\n    0x32e8915c, 0xc083125f, 0x144976b4, 0xe622f5b7, 0xf5720643, 0x07198540,\n    0x590ab964, 0xab613a67, 0xb831c993, 0x4a5a4a90, 0x9e902e7b, 0x6cfbad78,\n    0x7fab5e8c, 0x8dc0dd8f, 0xe330a81a, 0x115b2b19, 0x020bd8ed, 0xf0605bee,\n    0x24aa3f05, 0xd6c1bc06, 0xc5914ff2, 0x37faccf1, 0x69e9f0d5, 0x9b8273d6,\n    0x88d28022, 0x7ab90321, 0xae7367ca, 0x5c18e4c9, 0x4f48173d, 0xbd23943e,\n    0xf36e6f75, 0x0105ec76, 0x12551f82, 0xe03e9c81, 0x34f4f86a, 0xc69f7b69,\n    0xd5cf889d, 0x27a40b9e, 0x79b737ba, 0x8bdcb4b9, 0x988c474d, 0x6ae7c44e,\n    0xbe2da0a5, 0x4c4623a6, 0x5f16d052, 0xad7d5351,\n];\nconst CRC32C_EXTENSION_TABLE = new Int32Array(CRC32C_EXTENSIONS);\nconst CRC32C_DEFAULT_VALIDATOR_GENERATOR = () => new CRC32C();\nconst CRC32C_EXCEPTION_MESSAGES = {\n    INVALID_INIT_BASE64_RANGE: (l) => `base64-encoded data expected to equal 4 bytes, not ${l}`,\n    INVALID_INIT_BUFFER_LENGTH: (l) => `Buffer expected to equal 4 bytes, not ${l}`,\n    INVALID_INIT_INTEGER: (l) => `Number expected to be a safe, unsigned 32-bit integer, not ${l}`,\n};\nclass CRC32C {\n    /**\n     * Constructs a new `CRC32C` object.\n     *\n     * Reconstruction is recommended via the `CRC32C.from` static method.\n     *\n     * @param initialValue An initial CRC32C value - a signed 32-bit integer.\n     */\n    constructor(initialValue = 0) {\n        /** Current CRC32C value */\n        _CRC32C_crc32c.set(this, 0);\n        __classPrivateFieldSet(this, _CRC32C_crc32c, initialValue, \"f\");\n    }\n    /**\n     * Calculates a CRC32C from a provided buffer.\n     *\n     * Implementation inspired from:\n     * - {@link https://github.com/google/crc32c/blob/21fc8ef30415a635e7351ffa0e5d5367943d4a94/src/crc32c_portable.cc github.com/google/crc32c}\n     * - {@link https://github.com/googleapis/python-crc32c/blob/a595e758c08df445a99c3bf132ee8e80a3ec4308/src/google_crc32c/python.py github.com/googleapis/python-crc32c}\n     * - {@link https://github.com/googleapis/java-storage/pull/1376/files github.com/googleapis/java-storage}\n     *\n     * @param data The `Buffer` to generate the CRC32C from\n     */\n    update(data) {\n        let current = __classPrivateFieldGet(this, _CRC32C_crc32c, \"f\") ^ 0xffffffff;\n        for (const d of data) {\n            const tablePoly = CRC32C.CRC32C_EXTENSION_TABLE[(d ^ current) & 0xff];\n            current = tablePoly ^ (current >>> 8);\n        }\n        __classPrivateFieldSet(this, _CRC32C_crc32c, current ^ 0xffffffff, \"f\");\n    }\n    /**\n     * Validates a provided input to the current CRC32C value.\n     *\n     * @param input A Buffer, `CRC32C`-compatible object, base64-encoded data (string), or signed 32-bit integer\n     */\n    validate(input) {\n        if (typeof input === 'number') {\n            return input === __classPrivateFieldGet(this, _CRC32C_crc32c, \"f\");\n        }\n        else if (typeof input === 'string') {\n            return input === this.toString();\n        }\n        else if (Buffer.isBuffer(input)) {\n            return Buffer.compare(input, this.toBuffer()) === 0;\n        }\n        else {\n            // `CRC32C`-like object\n            return input.toString() === this.toString();\n        }\n    }\n    /**\n     * Returns a `Buffer` representation of the CRC32C value\n     */\n    toBuffer() {\n        const buffer = Buffer.alloc(4);\n        buffer.writeInt32BE(__classPrivateFieldGet(this, _CRC32C_crc32c, \"f\"));\n        return buffer;\n    }\n    /**\n     * Returns a JSON-compatible, base64-encoded representation of the CRC32C value.\n     *\n     * See {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify `JSON#stringify`}\n     */\n    toJSON() {\n        return this.toString();\n    }\n    /**\n     * Returns a base64-encoded representation of the CRC32C value.\n     *\n     * See {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString `Object#toString`}\n     */\n    toString() {\n        return this.toBuffer().toString('base64');\n    }\n    /**\n     * Returns the `number` representation of the CRC32C value as a signed 32-bit integer\n     *\n     * See {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf `Object#valueOf`}\n     */\n    valueOf() {\n        return __classPrivateFieldGet(this, _CRC32C_crc32c, \"f\");\n    }\n    /**\n     * Generates a `CRC32C` from a compatible buffer format.\n     *\n     * @param value 4-byte `ArrayBufferView`/`Buffer`/`TypedArray`\n     */\n    static fromBuffer(value) {\n        let buffer;\n        if (Buffer.isBuffer(value)) {\n            buffer = value;\n        }\n        else if ('buffer' in value) {\n            // `ArrayBufferView`\n            buffer = Buffer.from(value.buffer);\n        }\n        else {\n            // `ArrayBuffer`\n            buffer = Buffer.from(value);\n        }\n        if (buffer.byteLength !== 4) {\n            throw new RangeError(CRC32C_EXCEPTION_MESSAGES.INVALID_INIT_BUFFER_LENGTH(buffer.byteLength));\n        }\n        return new CRC32C(buffer.readInt32BE());\n    }\n    static async fromFile(file) {\n        const crc32c = new CRC32C();\n        await new Promise((resolve, reject) => {\n            (0,fs__WEBPACK_IMPORTED_MODULE_0__.createReadStream)(file)\n                .on('data', (d) => {\n                if (typeof d === 'string') {\n                    crc32c.update(Buffer.from(d));\n                }\n                else {\n                    crc32c.update(d);\n                }\n            })\n                .on('end', () => resolve())\n                .on('error', reject);\n        });\n        return crc32c;\n    }\n    /**\n     * Generates a `CRC32C` from 4-byte base64-encoded data (string).\n     *\n     * @param value 4-byte base64-encoded data (string)\n     */\n    static fromString(value) {\n        const buffer = Buffer.from(value, 'base64');\n        if (buffer.byteLength !== 4) {\n            throw new RangeError(CRC32C_EXCEPTION_MESSAGES.INVALID_INIT_BASE64_RANGE(buffer.byteLength));\n        }\n        return this.fromBuffer(buffer);\n    }\n    /**\n     * Generates a `CRC32C` from a safe, unsigned 32-bit integer.\n     *\n     * @param value an unsigned 32-bit integer\n     */\n    static fromNumber(value) {\n        if (!Number.isSafeInteger(value) || value > 2 ** 32 || value < -(2 ** 32)) {\n            throw new RangeError(CRC32C_EXCEPTION_MESSAGES.INVALID_INIT_INTEGER(value));\n        }\n        return new CRC32C(value);\n    }\n    /**\n     * Generates a `CRC32C` from a variety of compatable types.\n     * Note: strings are treated as input, not as file paths to read from.\n     *\n     * @param value A number, 4-byte `ArrayBufferView`/`Buffer`/`TypedArray`, or 4-byte base64-encoded data (string)\n     */\n    static from(value) {\n        if (typeof value === 'number') {\n            return this.fromNumber(value);\n        }\n        else if (typeof value === 'string') {\n            return this.fromString(value);\n        }\n        else if ('byteLength' in value) {\n            // `ArrayBuffer` | `Buffer` | `ArrayBufferView`\n            return this.fromBuffer(value);\n        }\n        else {\n            // `CRC32CValidator`/`CRC32C`-like\n            return this.fromString(value.toString());\n        }\n    }\n}\n_CRC32C_crc32c = new WeakMap();\nCRC32C.CRC32C_EXTENSIONS = CRC32C_EXTENSIONS;\nCRC32C.CRC32C_EXTENSION_TABLE = CRC32C_EXTENSION_TABLE;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/build/esm/src/crc32c.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/build/esm/src/file.js":
/*!******************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/build/esm/src/file.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ActionToHTTPMethod: () => (/* binding */ ActionToHTTPMethod),\n/* harmony export */   File: () => (/* binding */ File),\n/* harmony export */   FileExceptionMessages: () => (/* binding */ FileExceptionMessages),\n/* harmony export */   RequestError: () => (/* binding */ RequestError),\n/* harmony export */   STORAGE_POST_POLICY_BASE_URL: () => (/* binding */ STORAGE_POST_POLICY_BASE_URL)\n/* harmony export */ });\n/* harmony import */ var _nodejs_common_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./nodejs-common/index.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/nodejs-common/index.js\");\n/* harmony import */ var _google_cloud_promisify__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @google-cloud/promisify */ \"(rsc)/./node_modules/@google-cloud/promisify/build/src/index.js\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var mime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! mime */ \"(rsc)/./node_modules/mime/index.js\");\n/* harmony import */ var _resumable_upload_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./resumable-upload.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/resumable-upload.js\");\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! stream */ \"stream\");\n/* harmony import */ var zlib__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! zlib */ \"zlib\");\n/* harmony import */ var _storage_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./storage.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/storage.js\");\n/* harmony import */ var _bucket_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./bucket.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/bucket.js\");\n/* harmony import */ var _acl_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./acl.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/acl.js\");\n/* harmony import */ var _signer_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./signer.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/signer.js\");\n/* harmony import */ var _nodejs_common_util_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./nodejs-common/util.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/nodejs-common/util.js\");\n/* harmony import */ var duplexify__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! duplexify */ \"(rsc)/./node_modules/duplexify/index.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./util.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/util.js\");\n/* harmony import */ var _crc32c_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./crc32c.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/crc32c.js\");\n/* harmony import */ var _hash_stream_validator_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./hash-stream-validator.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/hash-stream-validator.js\");\n/* harmony import */ var async_retry__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! async-retry */ \"(rsc)/./node_modules/async-retry/lib/index.js\");\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _File_instances, _File_validateIntegrity;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar ActionToHTTPMethod;\n(function (ActionToHTTPMethod) {\n    ActionToHTTPMethod[\"read\"] = \"GET\";\n    ActionToHTTPMethod[\"write\"] = \"PUT\";\n    ActionToHTTPMethod[\"delete\"] = \"DELETE\";\n    ActionToHTTPMethod[\"resumable\"] = \"POST\";\n})(ActionToHTTPMethod || (ActionToHTTPMethod = {}));\n/**\n * @deprecated - no longer used\n */\nconst STORAGE_POST_POLICY_BASE_URL = 'https://storage.googleapis.com';\n/**\n * @private\n */\nconst GS_URL_REGEXP = /^gs:\\/\\/([a-z0-9_.-]+)\\/(.+)$/;\n/**\n * @private\n * This regex will match compressible content types. These are primarily text/*, +json, +text, +xml content types.\n * This was based off of mime-db and may periodically need to be updated if new compressible content types become\n * standards.\n */\nconst COMPRESSIBLE_MIME_REGEX = new RegExp([\n    /^text\\/|application\\/ecmascript|application\\/javascript|application\\/json/,\n    /|application\\/postscript|application\\/rtf|application\\/toml|application\\/vnd.dart/,\n    /|application\\/vnd.ms-fontobject|application\\/wasm|application\\/x-httpd-php|application\\/x-ns-proxy-autoconfig/,\n    /|application\\/x-sh(?!ockwave-flash)|application\\/x-tar|application\\/x-virtualbox-hdd|application\\/x-virtualbox-ova|application\\/x-virtualbox-ovf/,\n    /|^application\\/x-virtualbox-vbox$|application\\/x-virtualbox-vdi|application\\/x-virtualbox-vhd|application\\/x-virtualbox-vmdk/,\n    /|application\\/xml|application\\/xml-dtd|font\\/otf|font\\/ttf|image\\/bmp|image\\/vnd.adobe.photoshop|image\\/vnd.microsoft.icon/,\n    /|image\\/vnd.ms-dds|image\\/x-icon|image\\/x-ms-bmp|message\\/rfc822|model\\/gltf-binary|\\+json|\\+text|\\+xml|\\+yaml/,\n]\n    .map(r => r.source)\n    .join(''), 'i');\nclass RequestError extends Error {\n}\nconst SEVEN_DAYS = 7 * 24 * 60 * 60;\nconst GS_UTIL_URL_REGEX = /(gs):\\/\\/([a-z0-9_.-]+)\\/(.+)/g;\nconst HTTPS_PUBLIC_URL_REGEX = /(https):\\/\\/(storage\\.googleapis\\.com)\\/([a-z0-9_.-]+)\\/(.+)/g;\nvar FileExceptionMessages;\n(function (FileExceptionMessages) {\n    FileExceptionMessages[\"EXPIRATION_TIME_NA\"] = \"An expiration time is not available.\";\n    FileExceptionMessages[\"DESTINATION_NO_NAME\"] = \"Destination file should have a name.\";\n    FileExceptionMessages[\"INVALID_VALIDATION_FILE_RANGE\"] = \"Cannot use validation with file ranges (start/end).\";\n    FileExceptionMessages[\"MD5_NOT_AVAILABLE\"] = \"MD5 verification was specified, but is not available for the requested object. MD5 is not available for composite objects.\";\n    FileExceptionMessages[\"EQUALS_CONDITION_TWO_ELEMENTS\"] = \"Equals condition must be an array of 2 elements.\";\n    FileExceptionMessages[\"STARTS_WITH_TWO_ELEMENTS\"] = \"StartsWith condition must be an array of 2 elements.\";\n    FileExceptionMessages[\"CONTENT_LENGTH_RANGE_MIN_MAX\"] = \"ContentLengthRange must have numeric min & max fields.\";\n    FileExceptionMessages[\"DOWNLOAD_MISMATCH\"] = \"The downloaded data did not match the data from the server. To be sure the content is the same, you should download the file again.\";\n    FileExceptionMessages[\"UPLOAD_MISMATCH_DELETE_FAIL\"] = \"The uploaded data did not match the data from the server.\\n    As a precaution, we attempted to delete the file, but it was not successful.\\n    To be sure the content is the same, you should try removing the file manually,\\n    then uploading the file again.\\n    \\n\\nThe delete attempt failed with this message:\\n\\n  \";\n    FileExceptionMessages[\"UPLOAD_MISMATCH\"] = \"The uploaded data did not match the data from the server.\\n    As a precaution, the file has been deleted.\\n    To be sure the content is the same, you should try uploading the file again.\";\n    FileExceptionMessages[\"MD5_RESUMED_UPLOAD\"] = \"MD5 cannot be used with a continued resumable upload as MD5 cannot be extended from an existing value\";\n    FileExceptionMessages[\"MISSING_RESUME_CRC32C_FINAL_UPLOAD\"] = \"The CRC32C is missing for the final portion of a resumed upload, which is required for validation. Please provide `resumeCRC32C` if validation is required, or disable `validation`.\";\n})(FileExceptionMessages || (FileExceptionMessages = {}));\n/**\n * A File object is created from your {@link Bucket} object using\n * {@link Bucket#file}.\n *\n * @class\n */\nclass File extends _nodejs_common_index_js__WEBPACK_IMPORTED_MODULE_0__.ServiceObject {\n    /**\n     * Cloud Storage uses access control lists (ACLs) to manage object and\n     * bucket access. ACLs are the mechanism you use to share objects with other\n     * users and allow other users to access your buckets and objects.\n     *\n     * An ACL consists of one or more entries, where each entry grants permissions\n     * to an entity. Permissions define the actions that can be performed against\n     * an object or bucket (for example, `READ` or `WRITE`); the entity defines\n     * who the permission applies to (for example, a specific user or group of\n     * users).\n     *\n     * The `acl` object on a File instance provides methods to get you a list of\n     * the ACLs defined on your bucket, as well as set, update, and delete them.\n     *\n     * See {@link http://goo.gl/6qBBPO| About Access Control lists}\n     *\n     * @name File#acl\n     * @mixes Acl\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const myBucket = storage.bucket('my-bucket');\n     *\n     * const file = myBucket.file('my-file');\n     * //-\n     * // Make a file publicly readable.\n     * //-\n     * const options = {\n     *   entity: 'allUsers',\n     *   role: storage.acl.READER_ROLE\n     * };\n     *\n     * file.acl.add(options, function(err, aclObject) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * file.acl.add(options).then(function(data) {\n     *   const aclObject = data[0];\n     *   const apiResponse = data[1];\n     * });\n     * ```\n     */\n    /**\n     * The API-formatted resource description of the file.\n     *\n     * Note: This is not guaranteed to be up-to-date when accessed. To get the\n     * latest record, call the `getMetadata()` method.\n     *\n     * @name File#metadata\n     * @type {object}\n     */\n    /**\n     * The file's name.\n     * @name File#name\n     * @type {string}\n     */\n    /**\n     * @callback Crc32cGeneratorToStringCallback\n     * A method returning the CRC32C as a base64-encoded string.\n     *\n     * @returns {string}\n     *\n     * @example\n     * Hashing the string 'data' should return 'rth90Q=='\n     *\n     * ```js\n     * const buffer = Buffer.from('data');\n     * crc32c.update(buffer);\n     * crc32c.toString(); // 'rth90Q=='\n     * ```\n     **/\n    /**\n     * @callback Crc32cGeneratorValidateCallback\n     * A method validating a base64-encoded CRC32C string.\n     *\n     * @param {string} [value] base64-encoded CRC32C string to validate\n     * @returns {boolean}\n     *\n     * @example\n     * Should return `true` if the value matches, `false` otherwise\n     *\n     * ```js\n     * const buffer = Buffer.from('data');\n     * crc32c.update(buffer);\n     * crc32c.validate('DkjKuA=='); // false\n     * crc32c.validate('rth90Q=='); // true\n     * ```\n     **/\n    /**\n     * @callback Crc32cGeneratorUpdateCallback\n     * A method for passing `Buffer`s for CRC32C generation.\n     *\n     * @param {Buffer} [data] data to update CRC32C value with\n     * @returns {undefined}\n     *\n     * @example\n     * Hashing buffers from 'some ' and 'text\\n'\n     *\n     * ```js\n     * const buffer1 = Buffer.from('some ');\n     * crc32c.update(buffer1);\n     *\n     * const buffer2 = Buffer.from('text\\n');\n     * crc32c.update(buffer2);\n     *\n     * crc32c.toString(); // 'DkjKuA=='\n     * ```\n     **/\n    /**\n     * @typedef {object} CRC32CValidator\n     * @property {Crc32cGeneratorToStringCallback}\n     * @property {Crc32cGeneratorValidateCallback}\n     * @property {Crc32cGeneratorUpdateCallback}\n     */\n    /**\n     * @callback Crc32cGeneratorCallback\n     * @returns {CRC32CValidator}\n     */\n    /**\n     * @typedef {object} FileOptions Options passed to the File constructor.\n     * @property {string} [encryptionKey] A custom encryption key.\n     * @property {number} [generation] Generation to scope the file to.\n     * @property {string} [kmsKeyName] Cloud KMS Key used to encrypt this\n     *     object, if the object is encrypted by such a key. Limited availability;\n     *     usable only by enabled projects.\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for all requests made from File object.\n     * @property {Crc32cGeneratorCallback} [callback] A function that generates a CRC32C Validator. Defaults to {@link CRC32C}\n     */\n    /**\n     * Constructs a file object.\n     *\n     * @param {Bucket} bucket The Bucket instance this file is\n     *     attached to.\n     * @param {string} name The name of the remote file.\n     * @param {FileOptions} [options] Configuration options.\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const myBucket = storage.bucket('my-bucket');\n     *\n     * const file = myBucket.file('my-file');\n     * ```\n     */\n    constructor(bucket, name, options = {}) {\n        var _a, _b;\n        const requestQueryObject = {};\n        let generation;\n        if (options.generation !== null) {\n            if (typeof options.generation === 'string') {\n                generation = Number(options.generation);\n            }\n            else {\n                generation = options.generation;\n            }\n            if (!isNaN(generation)) {\n                requestQueryObject.generation = generation;\n            }\n        }\n        Object.assign(requestQueryObject, options.preconditionOpts);\n        const userProject = options.userProject || bucket.userProject;\n        if (typeof userProject === 'string') {\n            requestQueryObject.userProject = userProject;\n        }\n        const methods = {\n            /**\n             * @typedef {array} DeleteFileResponse\n             * @property {object} 0 The full API response.\n             */\n            /**\n             * @callback DeleteFileCallback\n             * @param {?Error} err Request error, if any.\n             * @param {object} apiResponse The full API response.\n             */\n            /**\n             * Delete the file.\n             *\n             * See {@link https://cloud.google.com/storage/docs/json_api/v1/objects/delete| Objects: delete API Documentation}\n             *\n             * @method File#delete\n             * @param {object} [options] Configuration options.\n             * @param {boolean} [options.ignoreNotFound = false] Ignore an error if\n             *     the file does not exist.\n             * @param {string} [options.userProject] The ID of the project which will be\n             *     billed for the request.\n             * @param {DeleteFileCallback} [callback] Callback function.\n             * @returns {Promise<DeleteFileResponse>}\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const myBucket = storage.bucket('my-bucket');\n             *\n             * const file = myBucket.file('my-file');\n             * file.delete(function(err, apiResponse) {});\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * file.delete().then(function(data) {\n             *   const apiResponse = data[0];\n             * });\n             *\n             * ```\n             * @example <caption>include:samples/files.js</caption>\n             * region_tag:storage_delete_file\n             * Another example:\n             */\n            delete: {\n                reqOpts: {\n                    qs: requestQueryObject,\n                },\n            },\n            /**\n             * @typedef {array} FileExistsResponse\n             * @property {boolean} 0 Whether the {@link File} exists.\n             */\n            /**\n             * @callback FileExistsCallback\n             * @param {?Error} err Request error, if any.\n             * @param {boolean} exists Whether the {@link File} exists.\n             */\n            /**\n             * Check if the file exists.\n             *\n             * @method File#exists\n             * @param {options} [options] Configuration options.\n             * @param {string} [options.userProject] The ID of the project which will be\n             *     billed for the request.\n             * @param {FileExistsCallback} [callback] Callback function.\n             * @returns {Promise<FileExistsResponse>}\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const myBucket = storage.bucket('my-bucket');\n             *\n             * const file = myBucket.file('my-file');\n             *\n             * file.exists(function(err, exists) {});\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * file.exists().then(function(data) {\n             *   const exists = data[0];\n             * });\n             * ```\n             */\n            exists: {\n                reqOpts: {\n                    qs: requestQueryObject,\n                },\n            },\n            /**\n             * @typedef {array} GetFileResponse\n             * @property {File} 0 The {@link File}.\n             * @property {object} 1 The full API response.\n             */\n            /**\n             * @callback GetFileCallback\n             * @param {?Error} err Request error, if any.\n             * @param {File} file The {@link File}.\n             * @param {object} apiResponse The full API response.\n             */\n            /**\n             * Get a file object and its metadata if it exists.\n             *\n             * @method File#get\n             * @param {options} [options] Configuration options.\n             * @param {string} [options.userProject] The ID of the project which will be\n             *     billed for the request.\n             * @param {number} [options.generation] The generation number to get\n             * @param {string} [options.restoreToken] If this is a soft-deleted object in an HNS-enabled bucket, returns the restore token which will\n             *    be necessary to restore it if there's a name conflict with another object.\n             * @param {boolean} [options.softDeleted] If true, returns the soft-deleted object.\n                  Object `generation` is required if `softDeleted` is set to True.\n             * @param {GetFileCallback} [callback] Callback function.\n             * @returns {Promise<GetFileResponse>}\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const myBucket = storage.bucket('my-bucket');\n             *\n             * const file = myBucket.file('my-file');\n             *\n             * file.get(function(err, file, apiResponse) {\n             *   // file.metadata` has been populated.\n             * });\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * file.get().then(function(data) {\n             *   const file = data[0];\n             *   const apiResponse = data[1];\n             * });\n             * ```\n             */\n            get: {\n                reqOpts: {\n                    qs: requestQueryObject,\n                },\n            },\n            /**\n             * @typedef {array} GetFileMetadataResponse\n             * @property {object} 0 The {@link File} metadata.\n             * @property {object} 1 The full API response.\n             */\n            /**\n             * @callback GetFileMetadataCallback\n             * @param {?Error} err Request error, if any.\n             * @param {object} metadata The {@link File} metadata.\n             * @param {object} apiResponse The full API response.\n             */\n            /**\n             * Get the file's metadata.\n             *\n             * See {@link https://cloud.google.com/storage/docs/json_api/v1/objects/get| Objects: get API Documentation}\n             *\n             * @method File#getMetadata\n             * @param {object} [options] Configuration options.\n             * @param {string} [options.userProject] The ID of the project which will be\n             *     billed for the request.\n             * @param {GetFileMetadataCallback} [callback] Callback function.\n             * @returns {Promise<GetFileMetadataResponse>}\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const myBucket = storage.bucket('my-bucket');\n             *\n             * const file = myBucket.file('my-file');\n             *\n             * file.getMetadata(function(err, metadata, apiResponse) {});\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * file.getMetadata().then(function(data) {\n             *   const metadata = data[0];\n             *   const apiResponse = data[1];\n             * });\n             *\n             * ```\n             * @example <caption>include:samples/files.js</caption>\n             * region_tag:storage_get_metadata\n             * Another example:\n             */\n            getMetadata: {\n                reqOpts: {\n                    qs: requestQueryObject,\n                },\n            },\n            /**\n             * @typedef {object} SetFileMetadataOptions Configuration options for File#setMetadata().\n             * @param {string} [userProject] The ID of the project which will be billed for the request.\n             */\n            /**\n             * @callback SetFileMetadataCallback\n             * @param {?Error} err Request error, if any.\n             * @param {object} apiResponse The full API response.\n             */\n            /**\n             * @typedef {array} SetFileMetadataResponse\n             * @property {object} 0 The full API response.\n             */\n            /**\n             * Merge the given metadata with the current remote file's metadata. This\n             * will set metadata if it was previously unset or update previously set\n             * metadata. To unset previously set metadata, set its value to null.\n             *\n             * You can set custom key/value pairs in the metadata key of the given\n             * object, however the other properties outside of this object must adhere\n             * to the {@link https://goo.gl/BOnnCK| official API documentation}.\n             *\n             *\n             * See the examples below for more information.\n             *\n             * See {@link https://cloud.google.com/storage/docs/json_api/v1/objects/patch| Objects: patch API Documentation}\n             *\n             * @method File#setMetadata\n             * @param {object} [metadata] The metadata you wish to update.\n             * @param {SetFileMetadataOptions} [options] Configuration options.\n             * @param {SetFileMetadataCallback} [callback] Callback function.\n             * @returns {Promise<SetFileMetadataResponse>}\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const myBucket = storage.bucket('my-bucket');\n             *\n             * const file = myBucket.file('my-file');\n             *\n             * const metadata = {\n             *   contentType: 'application/x-font-ttf',\n             *   metadata: {\n             *     my: 'custom',\n             *     properties: 'go here'\n             *   }\n             * };\n             *\n             * file.setMetadata(metadata, function(err, apiResponse) {});\n             *\n             * // Assuming current metadata = { hello: 'world', unsetMe: 'will do' }\n             * file.setMetadata({\n             *   metadata: {\n             *     abc: '123', // will be set.\n             *     unsetMe: null, // will be unset (deleted).\n             *     hello: 'goodbye' // will be updated from 'world' to 'goodbye'.\n             *   }\n             * }, function(err, apiResponse) {\n             *   // metadata should now be { abc: '123', hello: 'goodbye' }\n             * });\n             *\n             * //-\n             * // Set a temporary hold on this file from its bucket's retention period\n             * // configuration.\n             * //\n             * file.setMetadata({\n             *   temporaryHold: true\n             * }, function(err, apiResponse) {});\n             *\n             * //-\n             * // Alternatively, you may set a temporary hold. This will follow the\n             * // same behavior as an event-based hold, with the exception that the\n             * // bucket's retention policy will not renew for this file from the time\n             * // the hold is released.\n             * //-\n             * file.setMetadata({\n             *   eventBasedHold: true\n             * }, function(err, apiResponse) {});\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * file.setMetadata(metadata).then(function(data) {\n             *   const apiResponse = data[0];\n             * });\n             * ```\n             */\n            setMetadata: {\n                reqOpts: {\n                    qs: requestQueryObject,\n                },\n            },\n        };\n        super({\n            parent: bucket,\n            baseUrl: '/o',\n            id: encodeURIComponent(name),\n            methods,\n        });\n        _File_instances.add(this);\n        this.bucket = bucket;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.storage = bucket.parent;\n        // @TODO Can this duplicate code from above be avoided?\n        if (options.generation !== null) {\n            let generation;\n            if (typeof options.generation === 'string') {\n                generation = Number(options.generation);\n            }\n            else {\n                generation = options.generation;\n            }\n            if (!isNaN(generation)) {\n                this.generation = generation;\n            }\n        }\n        this.kmsKeyName = options.kmsKeyName;\n        this.userProject = userProject;\n        this.name = name;\n        if (options.encryptionKey) {\n            this.setEncryptionKey(options.encryptionKey);\n        }\n        this.acl = new _acl_js__WEBPACK_IMPORTED_MODULE_10__.Acl({\n            request: this.request.bind(this),\n            pathPrefix: '/acl',\n        });\n        this.crc32cGenerator =\n            options.crc32cGenerator || this.bucket.crc32cGenerator;\n        this.instanceRetryValue = (_b = (_a = this.storage) === null || _a === void 0 ? void 0 : _a.retryOptions) === null || _b === void 0 ? void 0 : _b.autoRetry;\n        this.instancePreconditionOpts = options === null || options === void 0 ? void 0 : options.preconditionOpts;\n    }\n    /**\n     * The object's Cloud Storage URI (`gs://`)\n     *\n     * @example\n     * ```ts\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('my-bucket');\n     * const file = bucket.file('image.png');\n     *\n     * // `gs://my-bucket/image.png`\n     * const href = file.cloudStorageURI.href;\n     * ```\n     */\n    get cloudStorageURI() {\n        const uri = this.bucket.cloudStorageURI;\n        uri.pathname = this.name;\n        return uri;\n    }\n    /**\n     * A helper method for determining if a request should be retried based on preconditions.\n     * This should only be used for methods where the idempotency is determined by\n     * `ifGenerationMatch`\n     * @private\n     *\n     * A request should not be retried under the following conditions:\n     * - if precondition option `ifGenerationMatch` is not set OR\n     * - if `idempotencyStrategy` is set to `RetryNever`\n     */\n    shouldRetryBasedOnPreconditionAndIdempotencyStrat(options) {\n        var _a;\n        return !(((options === null || options === void 0 ? void 0 : options.ifGenerationMatch) === undefined &&\n            ((_a = this.instancePreconditionOpts) === null || _a === void 0 ? void 0 : _a.ifGenerationMatch) === undefined &&\n            this.storage.retryOptions.idempotencyStrategy ===\n                _storage_js__WEBPACK_IMPORTED_MODULE_8__.IdempotencyStrategy.RetryConditional) ||\n            this.storage.retryOptions.idempotencyStrategy ===\n                _storage_js__WEBPACK_IMPORTED_MODULE_8__.IdempotencyStrategy.RetryNever);\n    }\n    /**\n     * @typedef {array} CopyResponse\n     * @property {File} 0 The copied {@link File}.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * @callback CopyCallback\n     * @param {?Error} err Request error, if any.\n     * @param {File} copiedFile The copied {@link File}.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * @typedef {object} CopyOptions Configuration options for File#copy(). See an\n     *     {@link https://cloud.google.com/storage/docs/json_api/v1/objects#resource| Object resource}.\n     * @property {string} [cacheControl] The cacheControl setting for the new file.\n     * @property {string} [contentEncoding] The contentEncoding setting for the new file.\n     * @property {string} [contentType] The contentType setting for the new file.\n     * @property {string} [destinationKmsKeyName] Resource name of the Cloud\n     *     KMS key, of the form\n     *     `projects/my-project/locations/location/keyRings/my-kr/cryptoKeys/my-key`,\n     *     that will be used to encrypt the object. Overwrites the object\n     * metadata's `kms_key_name` value, if any.\n     * @property {Metadata} [metadata] Metadata to specify on the copied file.\n     * @property {string} [predefinedAcl] Set the ACL for the new file.\n     * @property {string} [token] A previously-returned `rewriteToken` from an\n     *     unfinished rewrite request.\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * Copy this file to another file. By default, this will copy the file to the\n     * same bucket, but you can choose to copy it to another Bucket by providing\n     * a Bucket or File object or a URL starting with \"gs://\".\n     * The generation of the file will not be preserved.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/objects/rewrite| Objects: rewrite API Documentation}\n     *\n     * @throws {Error} If the destination file is not provided.\n     *\n     * @param {string|Bucket|File} destination Destination file.\n     * @param {CopyOptions} [options] Configuration options. See an\n     * @param {CopyCallback} [callback] Callback function.\n     * @returns {Promise<CopyResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     *\n     * //-\n     * // You can pass in a variety of types for the destination.\n     * //\n     * // For all of the below examples, assume we are working with the following\n     * // Bucket and File objects.\n     * //-\n     * const bucket = storage.bucket('my-bucket');\n     * const file = bucket.file('my-image.png');\n     *\n     * //-\n     * // If you pass in a string for the destination, the file is copied to its\n     * // current bucket, under the new name provided.\n     * //-\n     * file.copy('my-image-copy.png', function(err, copiedFile, apiResponse) {\n     *   // `my-bucket` now contains:\n     *   // - \"my-image.png\"\n     *   // - \"my-image-copy.png\"\n     *\n     *   // `copiedFile` is an instance of a File object that refers to your new\n     *   // file.\n     * });\n     *\n     * //-\n     * // If you pass in a string starting with \"gs://\" for the destination, the\n     * // file is copied to the other bucket and under the new name provided.\n     * //-\n     * const newLocation = 'gs://another-bucket/my-image-copy.png';\n     * file.copy(newLocation, function(err, copiedFile, apiResponse) {\n     *   // `my-bucket` still contains:\n     *   // - \"my-image.png\"\n     *   //\n     *   // `another-bucket` now contains:\n     *   // - \"my-image-copy.png\"\n     *\n     *   // `copiedFile` is an instance of a File object that refers to your new\n     *   // file.\n     * });\n     *\n     * //-\n     * // If you pass in a Bucket object, the file will be copied to that bucket\n     * // using the same name.\n     * //-\n     * const anotherBucket = storage.bucket('another-bucket');\n     * file.copy(anotherBucket, function(err, copiedFile, apiResponse) {\n     *   // `my-bucket` still contains:\n     *   // - \"my-image.png\"\n     *   //\n     *   // `another-bucket` now contains:\n     *   // - \"my-image.png\"\n     *\n     *   // `copiedFile` is an instance of a File object that refers to your new\n     *   // file.\n     * });\n     *\n     * //-\n     * // If you pass in a File object, you have complete control over the new\n     * // bucket and filename.\n     * //-\n     * const anotherFile = anotherBucket.file('my-awesome-image.png');\n     * file.copy(anotherFile, function(err, copiedFile, apiResponse) {\n     *   // `my-bucket` still contains:\n     *   // - \"my-image.png\"\n     *   //\n     *   // `another-bucket` now contains:\n     *   // - \"my-awesome-image.png\"\n     *\n     *   // Note:\n     *   // The `copiedFile` parameter is equal to `anotherFile`.\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * file.copy(newLocation).then(function(data) {\n     *   const newFile = data[0];\n     *   const apiResponse = data[1];\n     * });\n     *\n     * ```\n     * @example <caption>include:samples/files.js</caption>\n     * region_tag:storage_copy_file\n     * Another example:\n     */\n    copy(destination, optionsOrCallback, callback) {\n        var _a, _b;\n        const noDestinationError = new Error(FileExceptionMessages.DESTINATION_NO_NAME);\n        if (!destination) {\n            throw noDestinationError;\n        }\n        let options = {};\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else if (optionsOrCallback) {\n            options = { ...optionsOrCallback };\n        }\n        callback = callback || _nodejs_common_index_js__WEBPACK_IMPORTED_MODULE_0__.util.noop;\n        let destBucket;\n        let destName;\n        let newFile;\n        if (typeof destination === 'string') {\n            const parsedDestination = GS_URL_REGEXP.exec(destination);\n            if (parsedDestination !== null && parsedDestination.length === 3) {\n                destBucket = this.storage.bucket(parsedDestination[1]);\n                destName = parsedDestination[2];\n            }\n            else {\n                destBucket = this.bucket;\n                destName = destination;\n            }\n        }\n        else if (destination instanceof _bucket_js__WEBPACK_IMPORTED_MODULE_9__.Bucket) {\n            destBucket = destination;\n            destName = this.name;\n        }\n        else if (destination instanceof File) {\n            destBucket = destination.bucket;\n            destName = destination.name;\n            newFile = destination;\n        }\n        else {\n            throw noDestinationError;\n        }\n        const query = {};\n        if (this.generation !== undefined) {\n            query.sourceGeneration = this.generation;\n        }\n        if (options.token !== undefined) {\n            query.rewriteToken = options.token;\n        }\n        if (options.userProject !== undefined) {\n            query.userProject = options.userProject;\n            delete options.userProject;\n        }\n        if (options.predefinedAcl !== undefined) {\n            query.destinationPredefinedAcl = options.predefinedAcl;\n            delete options.predefinedAcl;\n        }\n        newFile = newFile || destBucket.file(destName);\n        const headers = {};\n        if (this.encryptionKey !== undefined) {\n            headers['x-goog-copy-source-encryption-algorithm'] = 'AES256';\n            headers['x-goog-copy-source-encryption-key'] = this.encryptionKeyBase64;\n            headers['x-goog-copy-source-encryption-key-sha256'] =\n                this.encryptionKeyHash;\n        }\n        if (newFile.encryptionKey !== undefined) {\n            this.setEncryptionKey(newFile.encryptionKey);\n        }\n        else if (options.destinationKmsKeyName !== undefined) {\n            query.destinationKmsKeyName = options.destinationKmsKeyName;\n            delete options.destinationKmsKeyName;\n        }\n        else if (newFile.kmsKeyName !== undefined) {\n            query.destinationKmsKeyName = newFile.kmsKeyName;\n        }\n        if (query.destinationKmsKeyName) {\n            this.kmsKeyName = query.destinationKmsKeyName;\n            const keyIndex = this.interceptors.indexOf(this.encryptionKeyInterceptor);\n            if (keyIndex > -1) {\n                this.interceptors.splice(keyIndex, 1);\n            }\n        }\n        if (!this.shouldRetryBasedOnPreconditionAndIdempotencyStrat(options === null || options === void 0 ? void 0 : options.preconditionOpts)) {\n            this.storage.retryOptions.autoRetry = false;\n        }\n        if (((_a = options.preconditionOpts) === null || _a === void 0 ? void 0 : _a.ifGenerationMatch) !== undefined) {\n            query.ifGenerationMatch = (_b = options.preconditionOpts) === null || _b === void 0 ? void 0 : _b.ifGenerationMatch;\n            delete options.preconditionOpts;\n        }\n        this.request({\n            method: 'POST',\n            uri: `/rewriteTo/b/${destBucket.name}/o/${encodeURIComponent(newFile.name)}`,\n            qs: query,\n            json: options,\n            headers,\n        }, (err, resp) => {\n            this.storage.retryOptions.autoRetry = this.instanceRetryValue;\n            if (err) {\n                callback(err, null, resp);\n                return;\n            }\n            if (resp.rewriteToken) {\n                const options = {\n                    token: resp.rewriteToken,\n                };\n                if (query.userProject) {\n                    options.userProject = query.userProject;\n                }\n                if (query.destinationKmsKeyName) {\n                    options.destinationKmsKeyName = query.destinationKmsKeyName;\n                }\n                this.copy(newFile, options, callback);\n                return;\n            }\n            callback(null, newFile, resp);\n        });\n    }\n    /**\n     * @typedef {object} CreateReadStreamOptions Configuration options for File#createReadStream.\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     * @property {string|boolean} [validation] Possible values: `\"md5\"`,\n     *     `\"crc32c\"`, or `false`. By default, data integrity is validated with a\n     *     CRC32c checksum. You may use MD5 if preferred, but that hash is not\n     *     supported for composite objects. An error will be raised if MD5 is\n     *     specified but is not available. You may also choose to skip validation\n     *     completely, however this is **not recommended**.\n     * @property {number} [start] A byte offset to begin the file's download\n     *     from. Default is 0. NOTE: Byte ranges are inclusive; that is,\n     *     `options.start = 0` and `options.end = 999` represent the first 1000\n     *     bytes in a file or object. NOTE: when specifying a byte range, data\n     *     integrity is not available.\n     * @property {number} [end] A byte offset to stop reading the file at.\n     *     NOTE: Byte ranges are inclusive; that is, `options.start = 0` and\n     *     `options.end = 999` represent the first 1000 bytes in a file or object.\n     *     NOTE: when specifying a byte range, data integrity is not available.\n     * @property {boolean} [decompress=true] Disable auto decompression of the\n     *     received data. By default this option is set to `true`.\n     *     Applicable in cases where the data was uploaded with\n     *     `gzip: true` option. See {@link File#createWriteStream}.\n     */\n    /**\n     * Create a readable stream to read the contents of the remote file. It can be\n     * piped to a writable stream or listened to for 'data' events to read a\n     * file's contents.\n     *\n     * In the unlikely event there is a mismatch between what you downloaded and\n     * the version in your Bucket, your error handler will receive an error with\n     * code \"CONTENT_DOWNLOAD_MISMATCH\". If you receive this error, the best\n     * recourse is to try downloading the file again.\n     *\n     * NOTE: Readable streams will emit the `end` event when the file is fully\n     * downloaded.\n     *\n     * @param {CreateReadStreamOptions} [options] Configuration options.\n     * @returns {ReadableStream}\n     *\n     * @example\n     * ```\n     * //-\n     * // <h4>Downloading a File</h4>\n     * //\n     * // The example below demonstrates how we can reference a remote file, then\n     * // pipe its contents to a local file. This is effectively creating a local\n     * // backup of your remote data.\n     * //-\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('my-bucket');\n     *\n     * const fs = require('fs');\n     * const remoteFile = bucket.file('image.png');\n     * const localFilename = '/Users/stephen/Photos/image.png';\n     *\n     * remoteFile.createReadStream()\n     *   .on('error', function(err) {})\n     *   .on('response', function(response) {\n     *     // Server connected and responded with the specified status and headers.\n     *    })\n     *   .on('end', function() {\n     *     // The file is fully downloaded.\n     *   })\n     *   .pipe(fs.createWriteStream(localFilename));\n     *\n     * //-\n     * // To limit the downloaded data to only a byte range, pass an options\n     * // object.\n     * //-\n     * const logFile = myBucket.file('access_log');\n     * logFile.createReadStream({\n     *     start: 10000,\n     *     end: 20000\n     *   })\n     *   .on('error', function(err) {})\n     *   .pipe(fs.createWriteStream('/Users/stephen/logfile.txt'));\n     *\n     * //-\n     * // To read a tail byte range, specify only `options.end` as a negative\n     * // number.\n     * //-\n     * const logFile = myBucket.file('access_log');\n     * logFile.createReadStream({\n     *     end: -100\n     *   })\n     *   .on('error', function(err) {})\n     *   .pipe(fs.createWriteStream('/Users/stephen/logfile.txt'));\n     * ```\n     */\n    createReadStream(options = {}) {\n        options = Object.assign({ decompress: true }, options);\n        const rangeRequest = typeof options.start === 'number' || typeof options.end === 'number';\n        const tailRequest = options.end < 0;\n        let validateStream = undefined;\n        let request = undefined;\n        const throughStream = new _util_js__WEBPACK_IMPORTED_MODULE_14__.PassThroughShim();\n        let crc32c = true;\n        let md5 = false;\n        if (typeof options.validation === 'string') {\n            const value = options.validation.toLowerCase().trim();\n            crc32c = value === 'crc32c';\n            md5 = value === 'md5';\n        }\n        else if (options.validation === false) {\n            crc32c = false;\n        }\n        const shouldRunValidation = !rangeRequest && (crc32c || md5);\n        if (rangeRequest) {\n            if (typeof options.validation === 'string' ||\n                options.validation === true) {\n                throw new Error(FileExceptionMessages.INVALID_VALIDATION_FILE_RANGE);\n            }\n            // Range requests can't receive data integrity checks.\n            crc32c = false;\n            md5 = false;\n        }\n        const onComplete = (err) => {\n            if (err) {\n                // There is an issue with node-fetch 2.x that if the stream errors the underlying socket connection is not closed.\n                // This causes a memory leak, so cleanup the sockets manually here by destroying the agent.\n                if (request === null || request === void 0 ? void 0 : request.agent) {\n                    request.agent.destroy();\n                }\n                throughStream.destroy(err);\n            }\n        };\n        // We listen to the response event from the request stream so that we\n        // can...\n        //\n        //   1) Intercept any data from going to the user if an error occurred.\n        //   2) Calculate the hashes from the http.IncomingMessage response\n        //   stream,\n        //      which will return the bytes from the source without decompressing\n        //      gzip'd content. We then send it through decompressed, if\n        //      applicable, to the user.\n        const onResponse = (err, _body, rawResponseStream) => {\n            if (err) {\n                // Get error message from the body.\n                this.getBufferFromReadable(rawResponseStream).then(body => {\n                    err.message = body.toString('utf8');\n                    throughStream.destroy(err);\n                });\n                return;\n            }\n            request = rawResponseStream.request;\n            const headers = rawResponseStream.toJSON().headers;\n            const isCompressed = headers['content-encoding'] === 'gzip';\n            const hashes = {};\n            // The object is safe to validate if:\n            // 1. It was stored gzip and returned to us gzip OR\n            // 2. It was never stored as gzip\n            const safeToValidate = (headers['x-goog-stored-content-encoding'] === 'gzip' &&\n                isCompressed) ||\n                headers['x-goog-stored-content-encoding'] === 'identity';\n            const transformStreams = [];\n            if (shouldRunValidation) {\n                // The x-goog-hash header should be set with a crc32c and md5 hash.\n                // ex: headers['x-goog-hash'] = 'crc32c=xxxx,md5=xxxx'\n                if (typeof headers['x-goog-hash'] === 'string') {\n                    headers['x-goog-hash']\n                        .split(',')\n                        .forEach((hashKeyValPair) => {\n                        const delimiterIndex = hashKeyValPair.indexOf('=');\n                        const hashType = hashKeyValPair.substring(0, delimiterIndex);\n                        const hashValue = hashKeyValPair.substring(delimiterIndex + 1);\n                        hashes[hashType] = hashValue;\n                    });\n                }\n                validateStream = new _hash_stream_validator_js__WEBPACK_IMPORTED_MODULE_16__.HashStreamValidator({\n                    crc32c,\n                    md5,\n                    crc32cGenerator: this.crc32cGenerator,\n                    crc32cExpected: hashes.crc32c,\n                    md5Expected: hashes.md5,\n                });\n            }\n            if (md5 && !hashes.md5) {\n                const hashError = new RequestError(FileExceptionMessages.MD5_NOT_AVAILABLE);\n                hashError.code = 'MD5_NOT_AVAILABLE';\n                throughStream.destroy(hashError);\n                return;\n            }\n            if (safeToValidate && shouldRunValidation && validateStream) {\n                transformStreams.push(validateStream);\n            }\n            if (isCompressed && options.decompress) {\n                transformStreams.push(zlib__WEBPACK_IMPORTED_MODULE_7__.createGunzip());\n            }\n            (0,stream__WEBPACK_IMPORTED_MODULE_6__.pipeline)(rawResponseStream, ...transformStreams, throughStream, onComplete);\n        };\n        // Authenticate the request, then pipe the remote API request to the stream\n        // returned to the user.\n        const makeRequest = () => {\n            const query = { alt: 'media' };\n            if (this.generation) {\n                query.generation = this.generation;\n            }\n            if (options.userProject) {\n                query.userProject = options.userProject;\n            }\n            const headers = {\n                'Accept-Encoding': 'gzip',\n                'Cache-Control': 'no-store',\n            };\n            if (rangeRequest) {\n                const start = typeof options.start === 'number' ? options.start : '0';\n                const end = typeof options.end === 'number' ? options.end : '';\n                headers.Range = `bytes=${tailRequest ? end : `${start}-${end}`}`;\n            }\n            const reqOpts = {\n                uri: '',\n                headers,\n                qs: query,\n            };\n            if (options[_nodejs_common_util_js__WEBPACK_IMPORTED_MODULE_12__.GCCL_GCS_CMD_KEY]) {\n                reqOpts[_nodejs_common_util_js__WEBPACK_IMPORTED_MODULE_12__.GCCL_GCS_CMD_KEY] = options[_nodejs_common_util_js__WEBPACK_IMPORTED_MODULE_12__.GCCL_GCS_CMD_KEY];\n            }\n            this.requestStream(reqOpts)\n                .on('error', err => {\n                throughStream.destroy(err);\n            })\n                .on('response', res => {\n                throughStream.emit('response', res);\n                _nodejs_common_index_js__WEBPACK_IMPORTED_MODULE_0__.util.handleResp(null, res, null, onResponse);\n            })\n                .resume();\n        };\n        throughStream.on('reading', makeRequest);\n        return throughStream;\n    }\n    /**\n     * @callback CreateResumableUploadCallback\n     * @param {?Error} err Request error, if any.\n     * @param {string} uri The resumable upload's unique session URI.\n     */\n    /**\n     * @typedef {array} CreateResumableUploadResponse\n     * @property {string} 0 The resumable upload's unique session URI.\n     */\n    /**\n     * @typedef {object} CreateResumableUploadOptions\n     * @property {object} [metadata] Metadata to set on the file.\n     * @property {number} [offset] The starting byte of the upload stream for resuming an interrupted upload.\n     * @property {string} [origin] Origin header to set for the upload.\n     * @property {string} [predefinedAcl] Apply a predefined set of access\n     * controls to this object.\n     *\n     * Acceptable values are:\n     * - **`authenticatedRead`** - Object owner gets `OWNER` access, and\n     *   `allAuthenticatedUsers` get `READER` access.\n     *\n     * - **`bucketOwnerFullControl`** - Object owner gets `OWNER` access, and\n     *   project team owners get `OWNER` access.\n     *\n     * - **`bucketOwnerRead`** - Object owner gets `OWNER` access, and project\n     *   team owners get `READER` access.\n     *\n     * - **`private`** - Object owner gets `OWNER` access.\n     *\n     * - **`projectPrivate`** - Object owner gets `OWNER` access, and project\n     *   team members get access according to their roles.\n     *\n     * - **`publicRead`** - Object owner gets `OWNER` access, and `allUsers`\n     *   get `READER` access.\n     * @property {boolean} [private] Make the uploaded file private. (Alias for\n     *     `options.predefinedAcl = 'private'`)\n     * @property {boolean} [public] Make the uploaded file public. (Alias for\n     *     `options.predefinedAcl = 'publicRead'`)\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     * @property {string} [chunkSize] Create a separate request per chunk. This\n     *     value is in bytes and should be a multiple of 256 KiB (2^18).\n     *     {@link https://cloud.google.com/storage/docs/performing-resumable-uploads#chunked-upload| We recommend using at least 8 MiB for the chunk size.}\n     */\n    /**\n     * Create a unique resumable upload session URI. This is the first step when\n     * performing a resumable upload.\n     *\n     * See the {@link https://cloud.google.com/storage/docs/json_api/v1/how-tos/resumable-upload| Resumable upload guide}\n     * for more on how the entire process works.\n     *\n     * <h4>Note</h4>\n     *\n     * If you are just looking to perform a resumable upload without worrying\n     * about any of the details, see {@link File#createWriteStream}. Resumable\n     * uploads are performed by default.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/how-tos/resumable-upload| Resumable upload guide}\n     *\n     * @param {CreateResumableUploadOptions} [options] Configuration options.\n     * @param {CreateResumableUploadCallback} [callback] Callback function.\n     * @returns {Promise<CreateResumableUploadResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const myBucket = storage.bucket('my-bucket');\n     *\n     * const file = myBucket.file('my-file');\n     * file.createResumableUpload(function(err, uri) {\n     *   if (!err) {\n     *     // `uri` can be used to PUT data to.\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * file.createResumableUpload().then(function(data) {\n     *   const uri = data[0];\n     * });\n     * ```\n     */\n    createResumableUpload(optionsOrCallback, callback) {\n        var _a, _b;\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        const retryOptions = this.storage.retryOptions;\n        if ((((_a = options === null || options === void 0 ? void 0 : options.preconditionOpts) === null || _a === void 0 ? void 0 : _a.ifGenerationMatch) === undefined &&\n            ((_b = this.instancePreconditionOpts) === null || _b === void 0 ? void 0 : _b.ifGenerationMatch) === undefined &&\n            this.storage.retryOptions.idempotencyStrategy ===\n                _storage_js__WEBPACK_IMPORTED_MODULE_8__.IdempotencyStrategy.RetryConditional) ||\n            this.storage.retryOptions.idempotencyStrategy ===\n                _storage_js__WEBPACK_IMPORTED_MODULE_8__.IdempotencyStrategy.RetryNever) {\n            retryOptions.autoRetry = false;\n        }\n        _resumable_upload_js__WEBPACK_IMPORTED_MODULE_5__.createURI({\n            authClient: this.storage.authClient,\n            apiEndpoint: this.storage.apiEndpoint,\n            bucket: this.bucket.name,\n            customRequestOptions: this.getRequestInterceptors().reduce((reqOpts, interceptorFn) => interceptorFn(reqOpts), {}),\n            file: this.name,\n            generation: this.generation,\n            key: this.encryptionKey,\n            kmsKeyName: this.kmsKeyName,\n            metadata: options.metadata,\n            offset: options.offset,\n            origin: options.origin,\n            predefinedAcl: options.predefinedAcl,\n            private: options.private,\n            public: options.public,\n            userProject: options.userProject || this.userProject,\n            retryOptions: retryOptions,\n            params: (options === null || options === void 0 ? void 0 : options.preconditionOpts) || this.instancePreconditionOpts,\n            universeDomain: this.bucket.storage.universeDomain,\n            [_nodejs_common_util_js__WEBPACK_IMPORTED_MODULE_12__.GCCL_GCS_CMD_KEY]: options[_nodejs_common_util_js__WEBPACK_IMPORTED_MODULE_12__.GCCL_GCS_CMD_KEY],\n        }, callback);\n        this.storage.retryOptions.autoRetry = this.instanceRetryValue;\n    }\n    /**\n     * @typedef {object} CreateWriteStreamOptions Configuration options for File#createWriteStream().\n     * @property {string} [contentType] Alias for\n     *     `options.metadata.contentType`. If set to `auto`, the file name is used\n     *     to determine the contentType.\n     * @property {string|boolean} [gzip] If true, automatically gzip the file.\n     *     If set to `auto`, the contentType is used to determine if the file\n     * should be gzipped. This will set `options.metadata.contentEncoding` to\n     * `gzip` if necessary.\n     * @property {object} [metadata] See the examples below or\n     *     {@link https://cloud.google.com/storage/docs/json_api/v1/objects/insert#request_properties_JSON| Objects: insert request body}\n     *     for more details.\n     * @property {number} [offset] The starting byte of the upload stream, for\n     *     resuming an interrupted upload. Defaults to 0.\n     * @property {string} [predefinedAcl] Apply a predefined set of access\n     * controls to this object.\n     *\n     * Acceptable values are:\n     * - **`authenticatedRead`** - Object owner gets `OWNER` access, and\n     *   `allAuthenticatedUsers` get `READER` access.\n     *\n     * - **`bucketOwnerFullControl`** - Object owner gets `OWNER` access, and\n     *   project team owners get `OWNER` access.\n     *\n     * - **`bucketOwnerRead`** - Object owner gets `OWNER` access, and project\n     *   team owners get `READER` access.\n     *\n     * - **`private`** - Object owner gets `OWNER` access.\n     *\n     * - **`projectPrivate`** - Object owner gets `OWNER` access, and project\n     *   team members get access according to their roles.\n     *\n     * - **`publicRead`** - Object owner gets `OWNER` access, and `allUsers`\n     *   get `READER` access.\n     * @property {boolean} [private] Make the uploaded file private. (Alias for\n     *     `options.predefinedAcl = 'private'`)\n     * @property {boolean} [public] Make the uploaded file public. (Alias for\n     *     `options.predefinedAcl = 'publicRead'`)\n     * @property {boolean} [resumable] Force a resumable upload. NOTE: When\n     *     working with streams, the file format and size is unknown until it's\n     *     completely consumed. Because of this, it's best for you to be explicit\n     *     for what makes sense given your input.\n     * @property {number} [timeout=60000] Set the HTTP request timeout in\n     *     milliseconds. This option is not available for resumable uploads.\n     *     Default: `60000`\n     * @property {string} [uri] The URI for an already-created resumable\n     *     upload. See {@link File#createResumableUpload}.\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     * @property {string|boolean} [validation] Possible values: `\"md5\"`,\n     *     `\"crc32c\"`, or `false`. By default, data integrity is validated with a\n     *     CRC32c checksum. You may use MD5 if preferred, but that hash is not\n     *     supported for composite objects. An error will be raised if MD5 is\n     *     specified but is not available. You may also choose to skip validation\n     *     completely, however this is **not recommended**. In addition to specifying\n     *     validation type, providing `metadata.crc32c` or `metadata.md5Hash` will\n     *     cause the server to perform validation in addition to client validation.\n     *     NOTE: Validation is automatically skipped for objects that were\n     *     uploaded using the `gzip` option and have already compressed content.\n     */\n    /**\n     * Create a writable stream to overwrite the contents of the file in your\n     * bucket.\n     *\n     * A File object can also be used to create files for the first time.\n     *\n     * Resumable uploads are automatically enabled and must be shut off explicitly\n     * by setting `options.resumable` to `false`.\n     *\n     *\n     * <p class=\"notice\">\n     *   There is some overhead when using a resumable upload that can cause\n     *   noticeable performance degradation while uploading a series of small\n     *   files. When uploading files less than 10MB, it is recommended that the\n     *   resumable feature is disabled.\n     * </p>\n     *\n     * NOTE: Writable streams will emit the `finish` event when the file is fully\n     * uploaded.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/how-tos/upload Upload Options (Simple or Resumable)}\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/objects/insert Objects: insert API Documentation}\n     *\n     * @param {CreateWriteStreamOptions} [options] Configuration options.\n     * @returns {WritableStream}\n     *\n     * @example\n     * ```\n     * const fs = require('fs');\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const myBucket = storage.bucket('my-bucket');\n     *\n     * const file = myBucket.file('my-file');\n     *\n     * //-\n     * // <h4>Uploading a File</h4>\n     * //\n     * // Now, consider a case where we want to upload a file to your bucket. You\n     * // have the option of using {@link Bucket#upload}, but that is just\n     * // a convenience method which will do the following.\n     * //-\n     * fs.createReadStream('/Users/stephen/Photos/birthday-at-the-zoo/panda.jpg')\n     *   .pipe(file.createWriteStream())\n     *   .on('error', function(err) {})\n     *   .on('finish', function() {\n     *     // The file upload is complete.\n     *   });\n     *\n     * //-\n     * // <h4>Uploading a File with gzip compression</h4>\n     * //-\n     * fs.createReadStream('/Users/stephen/site/index.html')\n     *   .pipe(file.createWriteStream({ gzip: true }))\n     *   .on('error', function(err) {})\n     *   .on('finish', function() {\n     *     // The file upload is complete.\n     *   });\n     *\n     * //-\n     * // Downloading the file with `createReadStream` will automatically decode\n     * // the file.\n     * //-\n     *\n     * //-\n     * // <h4>Uploading a File with Metadata</h4>\n     * //\n     * // One last case you may run into is when you want to upload a file to your\n     * // bucket and set its metadata at the same time. Like above, you can use\n     * // {@link Bucket#upload} to do this, which is just a wrapper around\n     * // the following.\n     * //-\n     * fs.createReadStream('/Users/stephen/Photos/birthday-at-the-zoo/panda.jpg')\n     *   .pipe(file.createWriteStream({\n     *     metadata: {\n     *       contentType: 'image/jpeg',\n     *       metadata: {\n     *         custom: 'metadata'\n     *       }\n     *     }\n     *   }))\n     *   .on('error', function(err) {})\n     *   .on('finish', function() {\n     *     // The file upload is complete.\n     *   });\n     * ```\n     *\n     * //-\n     * // <h4>Continuing a Resumable Upload</h4>\n     * //\n     * // One can capture a `uri` from a resumable upload to reuse later.\n     * // Additionally, for validation, one can also capture and pass `crc32c`.\n     * //-\n     * let uri: string | undefined = undefined;\n     * let resumeCRC32C: string | undefined = undefined;\n     *\n     * fs.createWriteStream()\n     *   .on('uri', link => {uri = link})\n     *   .on('crc32', crc32c => {resumeCRC32C = crc32c});\n     *\n     * // later...\n     * fs.createWriteStream({uri, resumeCRC32C});\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    createWriteStream(options = {}) {\n        var _a;\n        (_a = options.metadata) !== null && _a !== void 0 ? _a : (options.metadata = {});\n        if (options.contentType) {\n            options.metadata.contentType = options.contentType;\n        }\n        if (!options.metadata.contentType ||\n            options.metadata.contentType === 'auto') {\n            const detectedContentType = mime__WEBPACK_IMPORTED_MODULE_4__.getType(this.name);\n            if (detectedContentType) {\n                options.metadata.contentType = detectedContentType;\n            }\n        }\n        let gzip = options.gzip;\n        if (gzip === 'auto') {\n            gzip = COMPRESSIBLE_MIME_REGEX.test(options.metadata.contentType || '');\n        }\n        if (gzip) {\n            options.metadata.contentEncoding = 'gzip';\n        }\n        let crc32c = true;\n        let md5 = false;\n        if (typeof options.validation === 'string') {\n            options.validation = options.validation.toLowerCase();\n            crc32c = options.validation === 'crc32c';\n            md5 = options.validation === 'md5';\n        }\n        else if (options.validation === false) {\n            crc32c = false;\n            md5 = false;\n        }\n        if (options.offset) {\n            if (md5) {\n                throw new RangeError(FileExceptionMessages.MD5_RESUMED_UPLOAD);\n            }\n            if (crc32c && !options.isPartialUpload && !options.resumeCRC32C) {\n                throw new RangeError(FileExceptionMessages.MISSING_RESUME_CRC32C_FINAL_UPLOAD);\n            }\n        }\n        /**\n         * A callback for determining when the underlying pipeline is complete.\n         * It's possible the pipeline callback could error before the write stream\n         * calls `final` so by default this will destroy the write stream unless the\n         * write stream sets this callback via its `final` handler.\n         * @param error An optional error\n         */\n        let pipelineCallback = error => {\n            writeStream.destroy(error || undefined);\n        };\n        // A stream for consumer to write to\n        const writeStream = new stream__WEBPACK_IMPORTED_MODULE_6__.Writable({\n            final(cb) {\n                // Set the pipeline callback to this callback so the pipeline's results\n                // can be populated to the consumer\n                pipelineCallback = cb;\n                emitStream.end();\n            },\n            write(chunk, encoding, cb) {\n                emitStream.write(chunk, encoding, cb);\n            },\n        });\n        // If the write stream, which is returned to the caller, catches an error we need to make sure that\n        // at least one of the streams in the pipeline below gets notified so that they\n        // all get cleaned up / destroyed.\n        writeStream.once('error', e => {\n            emitStream.destroy(e);\n        });\n        // If the write stream is closed, cleanup the pipeline below by calling destroy on one of the streams.\n        writeStream.once('close', () => {\n            emitStream.destroy();\n        });\n        const transformStreams = [];\n        if (gzip) {\n            transformStreams.push(zlib__WEBPACK_IMPORTED_MODULE_7__.createGzip());\n        }\n        const emitStream = new _util_js__WEBPACK_IMPORTED_MODULE_14__.PassThroughShim();\n        let hashCalculatingStream = null;\n        if (crc32c || md5) {\n            const crc32cInstance = options.resumeCRC32C\n                ? _crc32c_js__WEBPACK_IMPORTED_MODULE_15__.CRC32C.from(options.resumeCRC32C)\n                : undefined;\n            hashCalculatingStream = new _hash_stream_validator_js__WEBPACK_IMPORTED_MODULE_16__.HashStreamValidator({\n                crc32c,\n                crc32cInstance,\n                md5,\n                crc32cGenerator: this.crc32cGenerator,\n                updateHashesOnly: true,\n            });\n            transformStreams.push(hashCalculatingStream);\n        }\n        const fileWriteStream = duplexify__WEBPACK_IMPORTED_MODULE_13__();\n        let fileWriteStreamMetadataReceived = false;\n        // Handing off emitted events to users\n        emitStream.on('reading', () => writeStream.emit('reading'));\n        emitStream.on('writing', () => writeStream.emit('writing'));\n        fileWriteStream.on('uri', evt => writeStream.emit('uri', evt));\n        fileWriteStream.on('progress', evt => writeStream.emit('progress', evt));\n        fileWriteStream.on('response', resp => writeStream.emit('response', resp));\n        fileWriteStream.once('metadata', () => {\n            fileWriteStreamMetadataReceived = true;\n        });\n        writeStream.once('writing', () => {\n            if (options.resumable === false) {\n                this.startSimpleUpload_(fileWriteStream, options);\n            }\n            else {\n                this.startResumableUpload_(fileWriteStream, options);\n            }\n            (0,stream__WEBPACK_IMPORTED_MODULE_6__.pipeline)(emitStream, ...transformStreams, fileWriteStream, async (e) => {\n                if (e) {\n                    return pipelineCallback(e);\n                }\n                // We want to make sure we've received the metadata from the server in order\n                // to properly validate the object's integrity. Depending on the type of upload,\n                // the stream could close before the response is returned.\n                if (!fileWriteStreamMetadataReceived) {\n                    try {\n                        await new Promise((resolve, reject) => {\n                            fileWriteStream.once('metadata', resolve);\n                            fileWriteStream.once('error', reject);\n                        });\n                    }\n                    catch (e) {\n                        return pipelineCallback(e);\n                    }\n                }\n                // Emit the local CRC32C value for future validation, if validation is enabled.\n                if (hashCalculatingStream === null || hashCalculatingStream === void 0 ? void 0 : hashCalculatingStream.crc32c) {\n                    writeStream.emit('crc32c', hashCalculatingStream.crc32c);\n                }\n                try {\n                    // Metadata may not be ready if the upload is a partial upload,\n                    // nothing to validate yet.\n                    const metadataNotReady = options.isPartialUpload && !this.metadata;\n                    if (hashCalculatingStream && !metadataNotReady) {\n                        await __classPrivateFieldGet(this, _File_instances, \"m\", _File_validateIntegrity).call(this, hashCalculatingStream, {\n                            crc32c,\n                            md5,\n                        });\n                    }\n                    pipelineCallback();\n                }\n                catch (e) {\n                    pipelineCallback(e);\n                }\n            });\n        });\n        return writeStream;\n    }\n    delete(optionsOrCallback, cb) {\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        cb = typeof optionsOrCallback === 'function' ? optionsOrCallback : cb;\n        this.disableAutoRetryConditionallyIdempotent_(this.methods.delete, _bucket_js__WEBPACK_IMPORTED_MODULE_9__.AvailableServiceObjectMethods.delete, options);\n        super\n            .delete(options)\n            .then(resp => cb(null, ...resp))\n            .catch(cb)\n            .finally(() => {\n            this.storage.retryOptions.autoRetry = this.instanceRetryValue;\n        });\n    }\n    /**\n     * @typedef {array} DownloadResponse\n     * @property [0] The contents of a File.\n     */\n    /**\n     * @callback DownloadCallback\n     * @param err Request error, if any.\n     * @param contents The contents of a File.\n     */\n    /**\n     * Convenience method to download a file into memory or to a local\n     * destination.\n     *\n     * @param {object} [options] Configuration options. The arguments match those\n     *     passed to {@link File#createReadStream}.\n     * @param {string} [options.destination] Local file path to write the file's\n     *     contents to.\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {DownloadCallback} [callback] Callback function.\n     * @returns {Promise<DownloadResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const myBucket = storage.bucket('my-bucket');\n     *\n     * const file = myBucket.file('my-file');\n     *\n     * //-\n     * // Download a file into memory. The contents will be available as the\n     * second\n     * // argument in the demonstration below, `contents`.\n     * //-\n     * file.download(function(err, contents) {});\n     *\n     * //-\n     * // Download a file to a local destination.\n     * //-\n     * file.download({\n     *   destination: '/Users/me/Desktop/file-backup.txt'\n     * }, function(err) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * file.download().then(function(data) {\n     *   const contents = data[0];\n     * });\n     *\n     * ```\n     * @example <caption>include:samples/files.js</caption>\n     * region_tag:storage_download_file\n     * Another example:\n     *\n     * @example <caption>include:samples/encryption.js</caption>\n     * region_tag:storage_download_encrypted_file\n     * Example of downloading an encrypted file:\n     *\n     * @example <caption>include:samples/requesterPays.js</caption>\n     * region_tag:storage_download_file_requester_pays\n     * Example of downloading a file where the requester pays:\n     */\n    download(optionsOrCallback, cb) {\n        let options;\n        if (typeof optionsOrCallback === 'function') {\n            cb = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        let called = false;\n        const callback = ((...args) => {\n            if (!called)\n                cb(...args);\n            called = true;\n        });\n        const destination = options.destination;\n        delete options.destination;\n        const fileStream = this.createReadStream(options);\n        let receivedData = false;\n        if (destination) {\n            fileStream\n                .on('error', callback)\n                .once('data', data => {\n                receivedData = true;\n                // We know that the file exists the server - now we can truncate/write to a file\n                const writable = fs__WEBPACK_IMPORTED_MODULE_3__.createWriteStream(destination);\n                writable.write(data);\n                fileStream\n                    .pipe(writable)\n                    .on('error', (err) => {\n                    callback(err, Buffer.from(''));\n                })\n                    .on('finish', () => {\n                    callback(null, data);\n                });\n            })\n                .on('end', () => {\n                // In the case of an empty file no data will be received before the end event fires\n                if (!receivedData) {\n                    const data = Buffer.alloc(0);\n                    try {\n                        fs__WEBPACK_IMPORTED_MODULE_3__.writeFileSync(destination, data);\n                        callback(null, data);\n                    }\n                    catch (e) {\n                        callback(e, data);\n                    }\n                }\n            });\n        }\n        else {\n            this.getBufferFromReadable(fileStream)\n                .then(contents => callback === null || callback === void 0 ? void 0 : callback(null, contents))\n                .catch(callback);\n        }\n    }\n    /**\n     * The Storage API allows you to use a custom key for server-side encryption.\n     *\n     * See {@link https://cloud.google.com/storage/docs/encryption#customer-supplied| Customer-supplied Encryption Keys}\n     *\n     * @param {string|buffer} encryptionKey An AES-256 encryption key.\n     * @returns {File}\n     *\n     * @example\n     * ```\n     * const crypto = require('crypto');\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const myBucket = storage.bucket('my-bucket');\n     *\n     * const encryptionKey = crypto.randomBytes(32);\n     *\n     * const fileWithCustomEncryption = myBucket.file('my-file');\n     * fileWithCustomEncryption.setEncryptionKey(encryptionKey);\n     *\n     * const fileWithoutCustomEncryption = myBucket.file('my-file');\n     *\n     * fileWithCustomEncryption.save('data', function(err) {\n     *   // Try to download with the File object that hasn't had\n     *   // `setEncryptionKey()` called:\n     *   fileWithoutCustomEncryption.download(function(err) {\n     *     // We will receive an error:\n     *     //   err.message === 'Bad Request'\n     *\n     *     // Try again with the File object we called `setEncryptionKey()` on:\n     *     fileWithCustomEncryption.download(function(err, contents) {\n     *       // contents.toString() === 'data'\n     *     });\n     *   });\n     * });\n     *\n     * ```\n     * @example <caption>include:samples/encryption.js</caption>\n     * region_tag:storage_upload_encrypted_file\n     * Example of uploading an encrypted file:\n     *\n     * @example <caption>include:samples/encryption.js</caption>\n     * region_tag:storage_download_encrypted_file\n     * Example of downloading an encrypted file:\n     */\n    setEncryptionKey(encryptionKey) {\n        this.encryptionKey = encryptionKey;\n        this.encryptionKeyBase64 = Buffer.from(encryptionKey).toString('base64');\n        this.encryptionKeyHash = crypto__WEBPACK_IMPORTED_MODULE_2__.createHash('sha256')\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            .update(this.encryptionKeyBase64, 'base64')\n            .digest('base64');\n        this.encryptionKeyInterceptor = {\n            request: reqOpts => {\n                reqOpts.headers = reqOpts.headers || {};\n                reqOpts.headers['x-goog-encryption-algorithm'] = 'AES256';\n                reqOpts.headers['x-goog-encryption-key'] = this.encryptionKeyBase64;\n                reqOpts.headers['x-goog-encryption-key-sha256'] =\n                    this.encryptionKeyHash;\n                return reqOpts;\n            },\n        };\n        this.interceptors.push(this.encryptionKeyInterceptor);\n        return this;\n    }\n    /**\n     * Gets a reference to a Cloud Storage {@link File} file from the provided URL in string format.\n     * @param {string} publicUrlOrGsUrl the URL as a string. Must be of the format gs://bucket/file\n     *  or https://storage.googleapis.com/bucket/file.\n     * @param {Storage} storageInstance an instance of a Storage object.\n     * @param {FileOptions} [options] Configuration options\n     * @returns {File}\n     */\n    static from(publicUrlOrGsUrl, storageInstance, options) {\n        const gsMatches = [...publicUrlOrGsUrl.matchAll(GS_UTIL_URL_REGEX)];\n        const httpsMatches = [...publicUrlOrGsUrl.matchAll(HTTPS_PUBLIC_URL_REGEX)];\n        if (gsMatches.length > 0) {\n            const bucket = new _bucket_js__WEBPACK_IMPORTED_MODULE_9__.Bucket(storageInstance, gsMatches[0][2]);\n            return new File(bucket, gsMatches[0][3], options);\n        }\n        else if (httpsMatches.length > 0) {\n            const bucket = new _bucket_js__WEBPACK_IMPORTED_MODULE_9__.Bucket(storageInstance, httpsMatches[0][3]);\n            return new File(bucket, httpsMatches[0][4], options);\n        }\n        else {\n            throw new Error('URL string must be of format gs://bucket/file or https://storage.googleapis.com/bucket/file');\n        }\n    }\n    get(optionsOrCallback, cb) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        cb =\n            typeof optionsOrCallback === 'function'\n                ? optionsOrCallback\n                : cb;\n        super\n            .get(options)\n            .then(resp => cb(null, ...resp))\n            .catch(cb);\n    }\n    /**\n     * @typedef {array} GetExpirationDateResponse\n     * @property {date} 0 A Date object representing the earliest time this file's\n     *     retention policy will expire.\n     */\n    /**\n     * @callback GetExpirationDateCallback\n     * @param {?Error} err Request error, if any.\n     * @param {date} expirationDate A Date object representing the earliest time\n     *     this file's retention policy will expire.\n     */\n    /**\n     * If this bucket has a retention policy defined, use this method to get a\n     * Date object representing the earliest time this file will expire.\n     *\n     * @param {GetExpirationDateCallback} [callback] Callback function.\n     * @returns {Promise<GetExpirationDateResponse>}\n     *\n     * @example\n     * ```\n     * const storage = require('@google-cloud/storage')();\n     * const myBucket = storage.bucket('my-bucket');\n     *\n     * const file = myBucket.file('my-file');\n     *\n     * file.getExpirationDate(function(err, expirationDate) {\n     *   // expirationDate is a Date object.\n     * });\n     * ```\n     */\n    getExpirationDate(callback) {\n        this.getMetadata((err, metadata, apiResponse) => {\n            if (err) {\n                callback(err, null, apiResponse);\n                return;\n            }\n            if (!metadata.retentionExpirationTime) {\n                const error = new Error(FileExceptionMessages.EXPIRATION_TIME_NA);\n                callback(error, null, apiResponse);\n                return;\n            }\n            callback(null, new Date(metadata.retentionExpirationTime), apiResponse);\n        });\n    }\n    /**\n     * @typedef {array} GenerateSignedPostPolicyV2Response\n     * @property {object} 0 The document policy.\n     */\n    /**\n     * @callback GenerateSignedPostPolicyV2Callback\n     * @param {?Error} err Request error, if any.\n     * @param {object} policy The document policy.\n     */\n    /**\n     * Get a signed policy document to allow a user to upload data with a POST\n     * request.\n     *\n     * In Google Cloud Platform environments, such as Cloud Functions and App\n     * Engine, you usually don't provide a `keyFilename` or `credentials` during\n     * instantiation. In those environments, we call the\n     * {@link https://cloud.google.com/iam/docs/reference/credentials/rest/v1/projects.serviceAccounts/signBlob| signBlob API}\n     * to create a signed policy. That API requires either the\n     * `https://www.googleapis.com/auth/iam` or\n     * `https://www.googleapis.com/auth/cloud-platform` scope, so be sure they are\n     * enabled.\n     *\n     * See {@link https://cloud.google.com/storage/docs/xml-api/post-object-v2| POST Object with the V2 signing process}\n     *\n     * @throws {Error} If an expiration timestamp from the past is given.\n     * @throws {Error} If options.equals has an array with less or more than two\n     *     members.\n     * @throws {Error} If options.startsWith has an array with less or more than two\n     *     members.\n     *\n     * @param {object} options Configuration options.\n     * @param {array|array[]} [options.equals] Array of request parameters and\n     *     their expected value (e.g. [['$<field>', '<value>']]). Values are\n     *     translated into equality constraints in the conditions field of the\n     *     policy document (e.g. ['eq', '$<field>', '<value>']). If only one\n     *     equality condition is to be specified, options.equals can be a one-\n     *     dimensional array (e.g. ['$<field>', '<value>']).\n     * @param {*} options.expires - A timestamp when this policy will expire. Any\n     *     value given is passed to `new Date()`.\n     * @param {array|array[]} [options.startsWith] Array of request parameters and\n     *     their expected prefixes (e.g. [['$<field>', '<value>']). Values are\n     *     translated into starts-with constraints in the conditions field of the\n     *     policy document (e.g. ['starts-with', '$<field>', '<value>']). If only\n     *     one prefix condition is to be specified, options.startsWith can be a\n     * one- dimensional array (e.g. ['$<field>', '<value>']).\n     * @param {string} [options.acl] ACL for the object from possibly predefined\n     *     ACLs.\n     * @param {string} [options.successRedirect] The URL to which the user client\n     *     is redirected if the upload is successful.\n     * @param {string} [options.successStatus] - The status of the Google Storage\n     *     response if the upload is successful (must be string).\n     * @param {object} [options.contentLengthRange]\n     * @param {number} [options.contentLengthRange.min] Minimum value for the\n     *     request's content length.\n     * @param {number} [options.contentLengthRange.max] Maximum value for the\n     *     request's content length.\n     * @param {GenerateSignedPostPolicyV2Callback} [callback] Callback function.\n     * @returns {Promise<GenerateSignedPostPolicyV2Response>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const myBucket = storage.bucket('my-bucket');\n     *\n     * const file = myBucket.file('my-file');\n     * const options = {\n     *   equals: ['$Content-Type', 'image/jpeg'],\n     *   expires: '10-25-2022',\n     *   contentLengthRange: {\n     *     min: 0,\n     *     max: 1024\n     *   }\n     * };\n     *\n     * file.generateSignedPostPolicyV2(options, function(err, policy) {\n     *   // policy.string: the policy document in plain text.\n     *   // policy.base64: the policy document in base64.\n     *   // policy.signature: the policy signature in base64.\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * file.generateSignedPostPolicyV2(options).then(function(data) {\n     *   const policy = data[0];\n     * });\n     * ```\n     */\n    generateSignedPostPolicyV2(optionsOrCallback, cb) {\n        const args = (0,_util_js__WEBPACK_IMPORTED_MODULE_14__.normalize)(optionsOrCallback, cb);\n        let options = args.options;\n        const callback = args.callback;\n        const expires = new Date(options.expires);\n        if (isNaN(expires.getTime())) {\n            throw new Error(_storage_js__WEBPACK_IMPORTED_MODULE_8__.ExceptionMessages.EXPIRATION_DATE_INVALID);\n        }\n        if (expires.valueOf() < Date.now()) {\n            throw new Error(_storage_js__WEBPACK_IMPORTED_MODULE_8__.ExceptionMessages.EXPIRATION_DATE_PAST);\n        }\n        options = Object.assign({}, options);\n        const conditions = [\n            ['eq', '$key', this.name],\n            {\n                bucket: this.bucket.name,\n            },\n        ];\n        if (Array.isArray(options.equals)) {\n            if (!Array.isArray(options.equals[0])) {\n                options.equals = [options.equals];\n            }\n            options.equals.forEach(condition => {\n                if (!Array.isArray(condition) || condition.length !== 2) {\n                    throw new Error(FileExceptionMessages.EQUALS_CONDITION_TWO_ELEMENTS);\n                }\n                conditions.push(['eq', condition[0], condition[1]]);\n            });\n        }\n        if (Array.isArray(options.startsWith)) {\n            if (!Array.isArray(options.startsWith[0])) {\n                options.startsWith = [options.startsWith];\n            }\n            options.startsWith.forEach(condition => {\n                if (!Array.isArray(condition) || condition.length !== 2) {\n                    throw new Error(FileExceptionMessages.STARTS_WITH_TWO_ELEMENTS);\n                }\n                conditions.push(['starts-with', condition[0], condition[1]]);\n            });\n        }\n        if (options.acl) {\n            conditions.push({\n                acl: options.acl,\n            });\n        }\n        if (options.successRedirect) {\n            conditions.push({\n                success_action_redirect: options.successRedirect,\n            });\n        }\n        if (options.successStatus) {\n            conditions.push({\n                success_action_status: options.successStatus,\n            });\n        }\n        if (options.contentLengthRange) {\n            const min = options.contentLengthRange.min;\n            const max = options.contentLengthRange.max;\n            if (typeof min !== 'number' || typeof max !== 'number') {\n                throw new Error(FileExceptionMessages.CONTENT_LENGTH_RANGE_MIN_MAX);\n            }\n            conditions.push(['content-length-range', min, max]);\n        }\n        const policy = {\n            expiration: expires.toISOString(),\n            conditions,\n        };\n        const policyString = JSON.stringify(policy);\n        const policyBase64 = Buffer.from(policyString).toString('base64');\n        this.storage.authClient.sign(policyBase64, options.signingEndpoint).then(signature => {\n            callback(null, {\n                string: policyString,\n                base64: policyBase64,\n                signature,\n            });\n        }, err => {\n            callback(new _signer_js__WEBPACK_IMPORTED_MODULE_11__.SigningError(err.message));\n        });\n    }\n    /**\n     * @typedef {object} SignedPostPolicyV4Output\n     * @property {string} url The request URL.\n     * @property {object} fields The form fields to include in the POST request.\n     */\n    /**\n     * @typedef {array} GenerateSignedPostPolicyV4Response\n     * @property {SignedPostPolicyV4Output} 0 An object containing the request URL and form fields.\n     */\n    /**\n     * @callback GenerateSignedPostPolicyV4Callback\n     * @param {?Error} err Request error, if any.\n     * @param {SignedPostPolicyV4Output} output An object containing the request URL and form fields.\n     */\n    /**\n     * Get a v4 signed policy document to allow a user to upload data with a POST\n     * request.\n     *\n     * In Google Cloud Platform environments, such as Cloud Functions and App\n     * Engine, you usually don't provide a `keyFilename` or `credentials` during\n     * instantiation. In those environments, we call the\n     * {@link https://cloud.google.com/iam/docs/reference/credentials/rest/v1/projects.serviceAccounts/signBlob| signBlob API}\n     * to create a signed policy. That API requires either the\n     * `https://www.googleapis.com/auth/iam` or\n     * `https://www.googleapis.com/auth/cloud-platform` scope, so be sure they are\n     * enabled.\n     *\n     * See {@link https://cloud.google.com/storage/docs/xml-api/post-object#policydocument| Policy Document Reference}\n     *\n     * @param {object} options Configuration options.\n     * @param {Date|number|string} options.expires - A timestamp when this policy will expire. Any\n     *     value given is passed to `new Date()`.\n     * @param {boolean} [config.virtualHostedStyle=false] Use virtual hosted-style\n     *     URLs ('https://mybucket.storage.googleapis.com/...') instead of path-style\n     *     ('https://storage.googleapis.com/mybucket/...'). Virtual hosted-style URLs\n     *     should generally be preferred instead of path-style URL.\n     *     Currently defaults to `false` for path-style, although this may change in a\n     *     future major-version release.\n     * @param {string} [config.bucketBoundHostname] The bucket-bound hostname to return in\n     *     the result, e.g. \"https://cdn.example.com\".\n     * @param {object} [config.fields] [Form fields]{@link https://cloud.google.com/storage/docs/xml-api/post-object#policydocument}\n     *     to include in the signed policy. Any fields with key beginning with 'x-ignore-'\n     *     will not be included in the policy to be signed.\n     * @param {object[]} [config.conditions] [Conditions]{@link https://cloud.google.com/storage/docs/authentication/signatures#policy-document}\n     *     to include in the signed policy. All fields given in `config.fields` are\n     *     automatically included in the conditions array, adding the same entry\n     *     in both `fields` and `conditions` will result in duplicate entries.\n     *\n     * @param {GenerateSignedPostPolicyV4Callback} [callback] Callback function.\n     * @returns {Promise<GenerateSignedPostPolicyV4Response>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const myBucket = storage.bucket('my-bucket');\n     *\n     * const file = myBucket.file('my-file');\n     * const options = {\n     *   expires: '10-25-2022',\n     *   conditions: [\n     *     ['eq', '$Content-Type', 'image/jpeg'],\n     *     ['content-length-range', 0, 1024],\n     *   ],\n     *   fields: {\n     *     acl: 'public-read',\n     *     'x-goog-meta-foo': 'bar',\n     *     'x-ignore-mykey': 'data'\n     *   }\n     * };\n     *\n     * file.generateSignedPostPolicyV4(options, function(err, response) {\n     *   // response.url The request URL\n     *   // response.fields The form fields (including the signature) to include\n     *   //     to be used to upload objects by HTML forms.\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * file.generateSignedPostPolicyV4(options).then(function(data) {\n     *   const response = data[0];\n     *   // response.url The request URL\n     *   // response.fields The form fields (including the signature) to include\n     *   //     to be used to upload objects by HTML forms.\n     * });\n     * ```\n     */\n    generateSignedPostPolicyV4(optionsOrCallback, cb) {\n        const args = (0,_util_js__WEBPACK_IMPORTED_MODULE_14__.normalize)(optionsOrCallback, cb);\n        let options = args.options;\n        const callback = args.callback;\n        const expires = new Date(options.expires);\n        if (isNaN(expires.getTime())) {\n            throw new Error(_storage_js__WEBPACK_IMPORTED_MODULE_8__.ExceptionMessages.EXPIRATION_DATE_INVALID);\n        }\n        if (expires.valueOf() < Date.now()) {\n            throw new Error(_storage_js__WEBPACK_IMPORTED_MODULE_8__.ExceptionMessages.EXPIRATION_DATE_PAST);\n        }\n        if (expires.valueOf() - Date.now() > SEVEN_DAYS * 1000) {\n            throw new Error(`Max allowed expiration is seven days (${SEVEN_DAYS} seconds).`);\n        }\n        options = Object.assign({}, options);\n        let fields = Object.assign({}, options.fields);\n        const now = new Date();\n        const nowISO = (0,_util_js__WEBPACK_IMPORTED_MODULE_14__.formatAsUTCISO)(now, true);\n        const todayISO = (0,_util_js__WEBPACK_IMPORTED_MODULE_14__.formatAsUTCISO)(now);\n        const sign = async () => {\n            const { client_email } = await this.storage.authClient.getCredentials();\n            const credential = `${client_email}/${todayISO}/auto/storage/goog4_request`;\n            fields = {\n                ...fields,\n                bucket: this.bucket.name,\n                key: this.name,\n                'x-goog-date': nowISO,\n                'x-goog-credential': credential,\n                'x-goog-algorithm': 'GOOG4-RSA-SHA256',\n            };\n            const conditions = options.conditions || [];\n            Object.entries(fields).forEach(([key, value]) => {\n                if (!key.startsWith('x-ignore-')) {\n                    conditions.push({ [key]: value });\n                }\n            });\n            delete fields.bucket;\n            const expiration = (0,_util_js__WEBPACK_IMPORTED_MODULE_14__.formatAsUTCISO)(expires, true, '-', ':');\n            const policy = {\n                conditions,\n                expiration,\n            };\n            const policyString = (0,_util_js__WEBPACK_IMPORTED_MODULE_14__.unicodeJSONStringify)(policy);\n            const policyBase64 = Buffer.from(policyString).toString('base64');\n            try {\n                const signature = await this.storage.authClient.sign(policyBase64, options.signingEndpoint);\n                const signatureHex = Buffer.from(signature, 'base64').toString('hex');\n                const universe = this.parent.storage.universeDomain;\n                fields['policy'] = policyBase64;\n                fields['x-goog-signature'] = signatureHex;\n                let url;\n                if (this.storage.customEndpoint) {\n                    url = this.storage.apiEndpoint;\n                }\n                else if (options.virtualHostedStyle) {\n                    url = `https://${this.bucket.name}.storage.${universe}/`;\n                }\n                else if (options.bucketBoundHostname) {\n                    url = `${options.bucketBoundHostname}/`;\n                }\n                else {\n                    url = `https://storage.${universe}/${this.bucket.name}/`;\n                }\n                return {\n                    url,\n                    fields,\n                };\n            }\n            catch (err) {\n                throw new _signer_js__WEBPACK_IMPORTED_MODULE_11__.SigningError(err.message);\n            }\n        };\n        sign().then(res => callback(null, res), callback);\n    }\n    /**\n     * @typedef {array} GetSignedUrlResponse\n     * @property {object} 0 The signed URL.\n     */\n    /**\n     * @callback GetSignedUrlCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} url The signed URL.\n     */\n    /**\n     * Get a signed URL to allow limited time access to the file.\n     *\n     * In Google Cloud Platform environments, such as Cloud Functions and App\n     * Engine, you usually don't provide a `keyFilename` or `credentials` during\n     * instantiation. In those environments, we call the\n     * {@link https://cloud.google.com/iam/docs/reference/credentials/rest/v1/projects.serviceAccounts/signBlob| signBlob API}\n     * to create a signed URL. That API requires either the\n     * `https://www.googleapis.com/auth/iam` or\n     * `https://www.googleapis.com/auth/cloud-platform` scope, so be sure they are\n     * enabled.\n     *\n     * See {@link https://cloud.google.com/storage/docs/access-control/signed-urls| Signed URLs Reference}\n     *\n     * @throws {Error} if an expiration timestamp from the past is given.\n     *\n     * @param {object} config Configuration object.\n     * @param {string} config.action \"read\" (HTTP: GET), \"write\" (HTTP: PUT), or\n     *     \"delete\" (HTTP: DELETE), \"resumable\" (HTTP: POST).\n     *     When using \"resumable\", the header `X-Goog-Resumable: start` has\n     *     to be sent when making a request with the signed URL.\n     * @param {*} config.expires A timestamp when this link will expire. Any value\n     *     given is passed to `new Date()`.\n     *     Note: 'v4' supports maximum duration of 7 days (604800 seconds) from now.\n     *     See [reference]{@link https://cloud.google.com/storage/docs/access-control/signed-urls#example}\n     * @param {string} [config.version='v2'] The signing version to use, either\n     *     'v2' or 'v4'.\n     * @param {boolean} [config.virtualHostedStyle=false] Use virtual hosted-style\n     *     URLs (e.g. 'https://mybucket.storage.googleapis.com/...') instead of path-style\n     *     (e.g. 'https://storage.googleapis.com/mybucket/...'). Virtual hosted-style URLs\n     *     should generally be preferred instaed of path-style URL.\n     *     Currently defaults to `false` for path-style, although this may change in a\n     *     future major-version release.\n     * @param {string} [config.cname] The cname for this bucket, i.e.,\n     *     \"https://cdn.example.com\".\n     * @param {string} [config.contentMd5] The MD5 digest value in base64. Just like\n     *     if you provide this, the client must provide this HTTP header with this same\n     *     value in its request, so to if this parameter is not provided here,\n     *     the client must not provide any value for this HTTP header in its request.\n     * @param {string} [config.contentType] Just like if you provide this, the client\n     *     must provide this HTTP header with this same value in its request, so to if\n     *     this parameter is not provided here, the client must not provide any value\n     *     for this HTTP header in its request.\n     * @param {object} [config.extensionHeaders] If these headers are used, the\n     * server will check to make sure that the client provides matching\n     * values. See {@link https://cloud.google.com/storage/docs/access-control/signed-urls#about-canonical-extension-headers| Canonical extension headers}\n     * for the requirements of this feature, most notably:\n     * - The header name must be prefixed with `x-goog-`\n     * - The header name must be all lowercase\n     *\n     * Note: Multi-valued header passed as an array in the extensionHeaders\n     *       object is converted into a string, delimited by `,` with\n     *       no space. Requests made using the signed URL will need to\n     *       delimit multi-valued headers using a single `,` as well, or\n     *       else the server will report a mismatched signature.\n     * @param {object} [config.queryParams] Additional query parameters to include\n     *     in the signed URL.\n     * @param {string} [config.promptSaveAs] The filename to prompt the user to\n     *     save the file as when the signed url is accessed. This is ignored if\n     *     `config.responseDisposition` is set.\n     * @param {string} [config.responseDisposition] The\n     *     {@link http://goo.gl/yMWxQV| response-content-disposition parameter} of the\n     *     signed url.\n     * @param {*} [config.accessibleAt=Date.now()] A timestamp when this link became usable. Any value\n     *     given is passed to `new Date()`.\n     *     Note: Use for 'v4' only.\n     * @param {string} [config.responseType] The response-content-type parameter\n     *     of the signed url.\n     * @param {GetSignedUrlCallback} [callback] Callback function.\n     * @returns {Promise<GetSignedUrlResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const myBucket = storage.bucket('my-bucket');\n     *\n     * const file = myBucket.file('my-file');\n     *\n     * //-\n     * // Generate a URL that allows temporary access to download your file.\n     * //-\n     * const request = require('request');\n     *\n     * const config = {\n     *   action: 'read',\n     *   expires: '03-17-2025',\n     * };\n     *\n     * file.getSignedUrl(config, function(err, url) {\n     *   if (err) {\n     *     console.error(err);\n     *     return;\n     *   }\n     *\n     *   // The file is now available to read from this URL.\n     *   request(url, function(err, resp) {\n     *     // resp.statusCode = 200\n     *   });\n     * });\n     *\n     * //-\n     * // Generate a URL that allows temporary access to download your file.\n     * // Access will begin at accessibleAt and end at expires.\n     * //-\n     * const request = require('request');\n     *\n     * const config = {\n     *   action: 'read',\n     *   expires: '03-17-2025',\n     *   accessibleAt: '03-13-2025'\n     * };\n     *\n     * file.getSignedUrl(config, function(err, url) {\n     *   if (err) {\n     *     console.error(err);\n     *     return;\n     *   }\n     *\n     *   // The file will be available to read from this URL from 03-13-2025 to 03-17-2025.\n     *   request(url, function(err, resp) {\n     *     // resp.statusCode = 200\n     *   });\n     * });\n     *\n     * //-\n     * // Generate a URL to allow write permissions. This means anyone with this\n     * URL\n     * // can send a POST request with new data that will overwrite the file.\n     * //-\n     * file.getSignedUrl({\n     *   action: 'write',\n     *   expires: '03-17-2025'\n     * }, function(err, url) {\n     *   if (err) {\n     *     console.error(err);\n     *     return;\n     *   }\n     *\n     *   // The file is now available to be written to.\n     *   const writeStream = request.put(url);\n     *   writeStream.end('New data');\n     *\n     *   writeStream.on('complete', function(resp) {\n     *     // Confirm the new content was saved.\n     *     file.download(function(err, fileContents) {\n     *       console.log('Contents:', fileContents.toString());\n     *       // Contents: New data\n     *     });\n     *   });\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * file.getSignedUrl(config).then(function(data) {\n     *   const url = data[0];\n     * });\n     *\n     * ```\n     * @example <caption>include:samples/files.js</caption>\n     * region_tag:storage_generate_signed_url\n     * Another example:\n     */\n    getSignedUrl(cfg, callback) {\n        const method = ActionToHTTPMethod[cfg.action];\n        const extensionHeaders = (0,_util_js__WEBPACK_IMPORTED_MODULE_14__.objectKeyToLowercase)(cfg.extensionHeaders || {});\n        if (cfg.action === 'resumable') {\n            extensionHeaders['x-goog-resumable'] = 'start';\n        }\n        const queryParams = Object.assign({}, cfg.queryParams);\n        if (typeof cfg.responseType === 'string') {\n            queryParams['response-content-type'] = cfg.responseType;\n        }\n        if (typeof cfg.promptSaveAs === 'string') {\n            queryParams['response-content-disposition'] =\n                'attachment; filename=\"' + cfg.promptSaveAs + '\"';\n        }\n        if (typeof cfg.responseDisposition === 'string') {\n            queryParams['response-content-disposition'] = cfg.responseDisposition;\n        }\n        if (this.generation) {\n            queryParams['generation'] = this.generation.toString();\n        }\n        const signConfig = {\n            method,\n            expires: cfg.expires,\n            accessibleAt: cfg.accessibleAt,\n            extensionHeaders,\n            queryParams,\n            contentMd5: cfg.contentMd5,\n            contentType: cfg.contentType,\n            host: cfg.host,\n        };\n        if (cfg.cname) {\n            signConfig.cname = cfg.cname;\n        }\n        if (cfg.version) {\n            signConfig.version = cfg.version;\n        }\n        if (cfg.virtualHostedStyle) {\n            signConfig.virtualHostedStyle = cfg.virtualHostedStyle;\n        }\n        if (!this.signer) {\n            this.signer = new _signer_js__WEBPACK_IMPORTED_MODULE_11__.URLSigner(this.storage.authClient, this.bucket, this, this.storage);\n        }\n        this.signer\n            .getSignedUrl(signConfig)\n            .then(signedUrl => callback(null, signedUrl), callback);\n    }\n    /**\n     * @callback IsPublicCallback\n     * @param {?Error} err Request error, if any.\n     * @param {boolean} resp Whether file is public or not.\n     */\n    /**\n     * @typedef {array} IsPublicResponse\n     * @property {boolean} 0 Whether file is public or not.\n     */\n    /**\n     * Check whether this file is public or not by sending\n     * a HEAD request without credentials.\n     * No errors from the server indicates that the current\n     * file is public.\n     * A 403-Forbidden error {@link https://cloud.google.com/storage/docs/json_api/v1/status-codes#403_Forbidden}\n     * indicates that file is private.\n     * Any other non 403 error is propagated to user.\n     *\n     * @param {IsPublicCallback} [callback] Callback function.\n     * @returns {Promise<IsPublicResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const myBucket = storage.bucket('my-bucket');\n     *\n     * const file = myBucket.file('my-file');\n     *\n     * //-\n     * // Check whether the file is publicly accessible.\n     * //-\n     * file.isPublic(function(err, resp) {\n     *   if (err) {\n     *     console.error(err);\n     *     return;\n     *   }\n     *   console.log(`the file ${file.id} is public: ${resp}`) ;\n     * })\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * file.isPublic().then(function(data) {\n     *   const resp = data[0];\n     * });\n     * ```\n     */\n    isPublic(callback) {\n        var _a;\n        // Build any custom headers based on the defined interceptors on the parent\n        // storage object and this object\n        const storageInterceptors = ((_a = this.storage) === null || _a === void 0 ? void 0 : _a.interceptors) || [];\n        const fileInterceptors = this.interceptors || [];\n        const allInterceptors = storageInterceptors.concat(fileInterceptors);\n        const headers = allInterceptors.reduce((acc, curInterceptor) => {\n            const currentHeaders = curInterceptor.request({\n                uri: `${this.storage.apiEndpoint}/${this.bucket.name}/${encodeURIComponent(this.name)}`,\n            });\n            Object.assign(acc, currentHeaders.headers);\n            return acc;\n        }, {});\n        _nodejs_common_index_js__WEBPACK_IMPORTED_MODULE_0__.util.makeRequest({\n            method: 'GET',\n            uri: `${this.storage.apiEndpoint}/${this.bucket.name}/${encodeURIComponent(this.name)}`,\n            headers,\n        }, {\n            retryOptions: this.storage.retryOptions,\n        }, (err) => {\n            if (err) {\n                const apiError = err;\n                if (apiError.code === 403) {\n                    callback(null, false);\n                }\n                else {\n                    callback(err);\n                }\n            }\n            else {\n                callback(null, true);\n            }\n        });\n    }\n    /**\n     * @typedef {object} MakeFilePrivateOptions Configuration options for File#makePrivate().\n     * @property {Metadata} [metadata] Define custom metadata properties to define\n     *     along with the operation.\n     * @property {boolean} [strict] If true, set the file to be private to\n     *     only the owner user. Otherwise, it will be private to the project.\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * @callback MakeFilePrivateCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * @typedef {array} MakeFilePrivateResponse\n     * @property {object} 0 The full API response.\n     */\n    /**\n     * Make a file private to the project and remove all other permissions.\n     * Set `options.strict` to true to make the file private to only the owner.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/objects/patch| Objects: patch API Documentation}\n     *\n     * @param {MakeFilePrivateOptions} [options] Configuration options.\n     * @param {MakeFilePrivateCallback} [callback] Callback function.\n     * @returns {Promise<MakeFilePrivateResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const myBucket = storage.bucket('my-bucket');\n     *\n     * const file = myBucket.file('my-file');\n     *\n     * //-\n     * // Set the file private so only project maintainers can see and modify it.\n     * //-\n     * file.makePrivate(function(err) {});\n     *\n     * //-\n     * // Set the file private so only the owner can see and modify it.\n     * //-\n     * file.makePrivate({ strict: true }, function(err) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * file.makePrivate().then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     * ```\n     */\n    makePrivate(optionsOrCallback, callback) {\n        var _a, _b;\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        const query = {\n            predefinedAcl: options.strict ? 'private' : 'projectPrivate',\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        };\n        if (((_a = options.preconditionOpts) === null || _a === void 0 ? void 0 : _a.ifMetagenerationMatch) !== undefined) {\n            query.ifMetagenerationMatch =\n                (_b = options.preconditionOpts) === null || _b === void 0 ? void 0 : _b.ifMetagenerationMatch;\n            delete options.preconditionOpts;\n        }\n        if (options.userProject) {\n            query.userProject = options.userProject;\n        }\n        // You aren't allowed to set both predefinedAcl & acl properties on a file,\n        // so acl must explicitly be nullified, destroying all previous acls on the\n        // file.\n        const metadata = { ...options.metadata, acl: null };\n        this.setMetadata(metadata, query, callback);\n    }\n    /**\n     * @typedef {array} MakeFilePublicResponse\n     * @property {object} 0 The full API response.\n     */\n    /**\n     * @callback MakeFilePublicCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Set a file to be publicly readable and maintain all previous permissions.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/objectAccessControls/insert| ObjectAccessControls: insert API Documentation}\n     *\n     * @param {MakeFilePublicCallback} [callback] Callback function.\n     * @returns {Promise<MakeFilePublicResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const myBucket = storage.bucket('my-bucket');\n     *\n     * const file = myBucket.file('my-file');\n     *\n     * file.makePublic(function(err, apiResponse) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * file.makePublic().then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     *\n     * ```\n     * @example <caption>include:samples/files.js</caption>\n     * region_tag:storage_make_public\n     * Another example:\n     */\n    makePublic(callback) {\n        callback = callback || _nodejs_common_index_js__WEBPACK_IMPORTED_MODULE_0__.util.noop;\n        this.acl.add({\n            entity: 'allUsers',\n            role: 'READER',\n        }, (err, acl, resp) => {\n            callback(err, resp);\n        });\n    }\n    /**\n     * The public URL of this File\n     * Use {@link File#makePublic} to enable anonymous access via the returned URL.\n     *\n     * @returns {string}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     * const file = bucket.file('my-file');\n     *\n     * // publicUrl will be \"https://storage.googleapis.com/albums/my-file\"\n     * const publicUrl = file.publicUrl();\n     * ```\n     */\n    publicUrl() {\n        return `${this.storage.apiEndpoint}/${this.bucket.name}/${encodeURIComponent(this.name)}`;\n    }\n    /**\n     * @typedef {array} MoveFileAtomicResponse\n     * @property {File} 0 The moved {@link File}.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * @callback MoveFileAtomicCallback\n     * @param {?Error} err Request error, if any.\n     * @param {File} movedFile The moved {@link File}.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * @typedef {object} MoveFileAtomicOptions Configuration options for File#moveFileAtomic(). See an\n     *     {@link https://cloud.google.com/storage/docs/json_api/v1/objects#resource| Object resource}.\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     * @property {object} [preconditionOpts] Precondition options.\n     * @property {number} [preconditionOpts.ifGenerationMatch] Makes the operation conditional on whether the object's current generation matches the given value.\n     */\n    /**\n     * Move this file within the same HNS-enabled bucket.\n     * The source object must exist and be a live object.\n     * The source and destination object IDs must be different.\n     * Overwriting the destination object is allowed by default, but can be prevented\n     * using preconditions.\n     * If the destination path includes non-existent parent folders, they will be created.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/objects/move| Objects: move API Documentation}\n     *\n     * @throws {Error} If the destination file is not provided.\n     *\n     * @param {string|File} destination Destination file name or File object within the same bucket..\n     * @param {MoveFileAtomicOptions} [options] Configuration options. See an\n     * @param {MoveFileAtomicCallback} [callback] Callback function.\n     * @returns {Promise<MoveFileAtomicResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     *\n     * //-\n     * // Assume 'my-hns-bucket' is an HNS-enabled bucket.\n     * //-\n     * const bucket = storage.bucket('my-hns-bucket');\n     * const file = bucket.file('my-image.png');\n     *\n     * //-\n     * // If you pass in a string for the destination, the file is copied to its\n     * // current bucket, under the new name provided.\n     * //-\n     * file.moveFileAtomic('moved-image.png', function(err, movedFile, apiResponse) {\n     *   // `my-hns-bucket` now contains:\n     *   // - \"moved-image.png\"\n     *\n     *   // `movedFile` is an instance of a File object that refers to your new\n     *   // file.\n     * });\n     *\n     * //-\n     * // Move the file to a subdirectory, creating parent folders if necessary.\n     * //-\n     * file.moveFileAtomic('new-folder/subfolder/moved-image.png', function(err, movedFile, apiResponse) {\n     * // `my-hns-bucket` now contains:\n     * // - \"new-folder/subfolder/moved-image.png\"\n     * });\n     *\n     * //-\n     * // Prevent overwriting an existing destination object using preconditions.\n     * //-\n     * file.moveFileAtomic('existing-destination.png', {\n     * preconditionOpts: {\n     * ifGenerationMatch: 0 // Fails if the destination object exists.\n     * }\n     * }, function(err, movedFile, apiResponse) {\n     * if (err) {\n     * // Handle the error (e.g., the destination object already exists).\n     * } else {\n     * // Move successful.\n     * }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * file.moveFileAtomic('moved-image.png).then(function(data) {\n     *   const newFile = data[0];\n     *   const apiResponse = data[1];\n     * });\n     *\n     * ```\n     * @example <caption>include:samples/files.js</caption>\n     * region_tag:storage_move_file_hns\n     * Another example:\n     */\n    moveFileAtomic(destination, optionsOrCallback, callback) {\n        var _a, _b;\n        const noDestinationError = new Error(FileExceptionMessages.DESTINATION_NO_NAME);\n        if (!destination) {\n            throw noDestinationError;\n        }\n        let options = {};\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else if (optionsOrCallback) {\n            options = { ...optionsOrCallback };\n        }\n        callback = callback || _nodejs_common_index_js__WEBPACK_IMPORTED_MODULE_0__.util.noop;\n        let destName;\n        let newFile;\n        if (typeof destination === 'string') {\n            const parsedDestination = GS_URL_REGEXP.exec(destination);\n            if (parsedDestination !== null && parsedDestination.length === 3) {\n                destName = parsedDestination[2];\n            }\n            else {\n                destName = destination;\n            }\n        }\n        else if (destination instanceof File) {\n            destName = destination.name;\n            newFile = destination;\n        }\n        else {\n            throw noDestinationError;\n        }\n        newFile = newFile || this.bucket.file(destName);\n        if (!this.shouldRetryBasedOnPreconditionAndIdempotencyStrat(options === null || options === void 0 ? void 0 : options.preconditionOpts)) {\n            this.storage.retryOptions.autoRetry = false;\n        }\n        const query = {};\n        if (options.userProject !== undefined) {\n            query.userProject = options.userProject;\n            delete options.userProject;\n        }\n        if (((_a = options.preconditionOpts) === null || _a === void 0 ? void 0 : _a.ifGenerationMatch) !== undefined) {\n            query.ifGenerationMatch = (_b = options.preconditionOpts) === null || _b === void 0 ? void 0 : _b.ifGenerationMatch;\n            delete options.preconditionOpts;\n        }\n        this.request({\n            method: 'POST',\n            uri: `/moveTo/o/${encodeURIComponent(newFile.name)}`,\n            qs: query,\n            json: options,\n        }, (err, resp) => {\n            this.storage.retryOptions.autoRetry = this.instanceRetryValue;\n            if (err) {\n                callback(err, null, resp);\n                return;\n            }\n            callback(null, newFile, resp);\n        });\n    }\n    /**\n     * @typedef {array} MoveResponse\n     * @property {File} 0 The destination File.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * @callback MoveCallback\n     * @param {?Error} err Request error, if any.\n     * @param {?File} destinationFile The destination File.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * @typedef {object} MoveOptions Configuration options for File#move(). See an\n     *     {@link https://cloud.google.com/storage/docs/json_api/v1/objects#resource| Object resource}.\n     * @param {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * Move this file to another location. By default, this will rename the file\n     * and keep it in the same bucket, but you can choose to move it to another\n     * Bucket by providing a Bucket or File object or a URL beginning with\n     * \"gs://\".\n     *\n     * **Warning**:\n     * There is currently no atomic `move` method in the Cloud Storage API,\n     * so this method is a composition of {@link File#copy} (to the new\n     * location) and {@link File#delete} (from the old location). While\n     * unlikely, it is possible that an error returned to your callback could be\n     * triggered from either one of these API calls failing, which could leave a\n     * duplicate file lingering. The error message will indicate what operation\n     * has failed.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/objects/copy| Objects: copy API Documentation}\n     *\n     * @throws {Error} If the destination file is not provided.\n     *\n     * @param {string|Bucket|File} destination Destination file.\n     * @param {MoveCallback} [callback] Callback function.\n     * @returns {Promise<MoveResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * //-\n     * // You can pass in a variety of types for the destination.\n     * //\n     * // For all of the below examples, assume we are working with the following\n     * // Bucket and File objects.\n     * //-\n     * const bucket = storage.bucket('my-bucket');\n     * const file = bucket.file('my-image.png');\n     *\n     * //-\n     * // If you pass in a string for the destination, the file is moved to its\n     * // current bucket, under the new name provided.\n     * //-\n     * file.move('my-image-new.png', function(err, destinationFile, apiResponse) {\n     *   // `my-bucket` no longer contains:\n     *   // - \"my-image.png\"\n     *   // but contains instead:\n     *   // - \"my-image-new.png\"\n     *\n     *   // `destinationFile` is an instance of a File object that refers to your\n     *   // new file.\n     * });\n     *\n     * //-\n     * // If you pass in a string starting with \"gs://\" for the destination, the\n     * // file is copied to the other bucket and under the new name provided.\n     * //-\n     * const newLocation = 'gs://another-bucket/my-image-new.png';\n     * file.move(newLocation, function(err, destinationFile, apiResponse) {\n     *   // `my-bucket` no longer contains:\n     *   // - \"my-image.png\"\n     *   //\n     *   // `another-bucket` now contains:\n     *   // - \"my-image-new.png\"\n     *\n     *   // `destinationFile` is an instance of a File object that refers to your\n     *   // new file.\n     * });\n     *\n     * //-\n     * // If you pass in a Bucket object, the file will be moved to that bucket\n     * // using the same name.\n     * //-\n     * const anotherBucket = gcs.bucket('another-bucket');\n     *\n     * file.move(anotherBucket, function(err, destinationFile, apiResponse) {\n     *   // `my-bucket` no longer contains:\n     *   // - \"my-image.png\"\n     *   //\n     *   // `another-bucket` now contains:\n     *   // - \"my-image.png\"\n     *\n     *   // `destinationFile` is an instance of a File object that refers to your\n     *   // new file.\n     * });\n     *\n     * //-\n     * // If you pass in a File object, you have complete control over the new\n     * // bucket and filename.\n     * //-\n     * const anotherFile = anotherBucket.file('my-awesome-image.png');\n     *\n     * file.move(anotherFile, function(err, destinationFile, apiResponse) {\n     *   // `my-bucket` no longer contains:\n     *   // - \"my-image.png\"\n     *   //\n     *   // `another-bucket` now contains:\n     *   // - \"my-awesome-image.png\"\n     *\n     *   // Note:\n     *   // The `destinationFile` parameter is equal to `anotherFile`.\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * file.move('my-image-new.png').then(function(data) {\n     *   const destinationFile = data[0];\n     *   const apiResponse = data[1];\n     * });\n     *\n     * ```\n     * @example <caption>include:samples/files.js</caption>\n     * region_tag:storage_move_file\n     * Another example:\n     */\n    move(destination, optionsOrCallback, callback) {\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        callback = callback || _nodejs_common_index_js__WEBPACK_IMPORTED_MODULE_0__.util.noop;\n        this.copy(destination, options, (err, destinationFile, copyApiResponse) => {\n            if (err) {\n                err.message = 'file#copy failed with an error - ' + err.message;\n                callback(err, null, copyApiResponse);\n                return;\n            }\n            if (this.name !== destinationFile.name ||\n                this.bucket.name !== destinationFile.bucket.name) {\n                this.delete(options, (err, apiResponse) => {\n                    if (err) {\n                        err.message = 'file#delete failed with an error - ' + err.message;\n                        callback(err, destinationFile, apiResponse);\n                        return;\n                    }\n                    callback(null, destinationFile, copyApiResponse);\n                });\n            }\n            else {\n                callback(null, destinationFile, copyApiResponse);\n            }\n        });\n    }\n    /**\n     * @typedef {array} RenameResponse\n     * @property {File} 0 The destination File.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * @callback RenameCallback\n     * @param {?Error} err Request error, if any.\n     * @param {?File} destinationFile The destination File.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * @typedef {object} RenameOptions Configuration options for File#move(). See an\n     *     {@link https://cloud.google.com/storage/docs/json_api/v1/objects#resource| Object resource}.\n     * @param {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * Rename this file.\n     *\n     * **Warning**:\n     * There is currently no atomic `rename` method in the Cloud Storage API,\n     * so this method is an alias of {@link File#move}, which in turn is a\n     * composition of {@link File#copy} (to the new location) and\n     * {@link File#delete} (from the old location). While\n     * unlikely, it is possible that an error returned to your callback could be\n     * triggered from either one of these API calls failing, which could leave a\n     * duplicate file lingering. The error message will indicate what operation\n     * has failed.\n     *\n     * @param {string|File} destinationFile Destination file.\n     * @param {RenameCallback} [callback] Callback function.\n     * @returns {Promise<RenameResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     *\n     * //-\n     * // You can pass in a string or a File object.\n     * //\n     * // For all of the below examples, assume we are working with the following\n     * // Bucket and File objects.\n     * //-\n     *\n     * const bucket = storage.bucket('my-bucket');\n     * const file = bucket.file('my-image.png');\n     *\n     * //-\n     * // You can pass in a string for the destinationFile.\n     * //-\n     * file.rename('renamed-image.png', function(err, renamedFile, apiResponse) {\n     *   // `my-bucket` no longer contains:\n     *   // - \"my-image.png\"\n     *   // but contains instead:\n     *   // - \"renamed-image.png\"\n     *\n     *   // `renamedFile` is an instance of a File object that refers to your\n     *   // renamed file.\n     * });\n     *\n     * //-\n     * // You can pass in a File object.\n     * //-\n     * const anotherFile = anotherBucket.file('my-awesome-image.png');\n     *\n     * file.rename(anotherFile, function(err, renamedFile, apiResponse) {\n     *   // `my-bucket` no longer contains:\n     *   // - \"my-image.png\"\n     *\n     *   // Note:\n     *   // The `renamedFile` parameter is equal to `anotherFile`.\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * file.rename('my-renamed-image.png').then(function(data) {\n     *   const renamedFile = data[0];\n     *   const apiResponse = data[1];\n     * });\n     * ```\n     */\n    rename(destinationFile, optionsOrCallback, callback) {\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        callback = callback || _nodejs_common_index_js__WEBPACK_IMPORTED_MODULE_0__.util.noop;\n        this.move(destinationFile, options, callback);\n    }\n    /**\n     * @typedef {object} RestoreOptions Options for File#restore(). See an\n     *     {@link https://cloud.google.com/storage/docs/json_api/v1/objects#resource| Object resource}.\n     * @param {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {number} [generation] If present, selects a specific revision of this object.\n     * @param {string} [restoreToken] Returns an option that must be specified when getting a soft-deleted object from an HNS-enabled\n     *  bucket that has a naming and generation conflict with another object in the same bucket.\n     * @param {string} [projection] Specifies the set of properties to return. If used, must be 'full' or 'noAcl'.\n     * @param {string | number} [ifGenerationMatch] Request proceeds if the generation of the target resource\n     *  matches the value used in the precondition.\n     *  If the values don't match, the request fails with a 412 Precondition Failed response.\n     * @param {string | number} [ifGenerationNotMatch] Request proceeds if the generation of the target resource does\n     *  not match the value used in the precondition. If the values match, the request fails with a 304 Not Modified response.\n     * @param {string | number} [ifMetagenerationMatch] Request proceeds if the meta-generation of the target resource\n     *  matches the value used in the precondition.\n     *  If the values don't match, the request fails with a 412 Precondition Failed response.\n     * @param {string | number} [ifMetagenerationNotMatch]  Request proceeds if the meta-generation of the target resource does\n     *  not match the value used in the precondition. If the values match, the request fails with a 304 Not Modified response.\n     */\n    /**\n     * Restores a soft-deleted file\n     * @param {RestoreOptions} options Restore options.\n     * @returns {Promise<File>}\n     */\n    async restore(options) {\n        const [file] = await this.request({\n            method: 'POST',\n            uri: '/restore',\n            qs: options,\n        });\n        return file;\n    }\n    /**\n     * Makes request and applies userProject query parameter if necessary.\n     *\n     * @private\n     *\n     * @param {object} reqOpts - The request options.\n     * @param {function} callback - The callback function.\n     */\n    request(reqOpts, callback) {\n        return this.parent.request.call(this, reqOpts, callback);\n    }\n    /**\n     * @callback RotateEncryptionKeyCallback\n     * @extends CopyCallback\n     */\n    /**\n     * @typedef RotateEncryptionKeyResponse\n     * @extends CopyResponse\n     */\n    /**\n     * @param {string|buffer|object} RotateEncryptionKeyOptions Configuration options\n     *     for File#rotateEncryptionKey().\n     * If a string or Buffer is provided, it is interpreted as an AES-256,\n     * customer-supplied encryption key. If you'd like to use a Cloud KMS key\n     * name, you must specify an options object with the property name:\n     * `kmsKeyName`.\n     * @param {string|buffer} [options.encryptionKey] An AES-256 encryption key.\n     * @param {string} [options.kmsKeyName] A Cloud KMS key name.\n     */\n    /**\n     * This method allows you to update the encryption key associated with this\n     * file.\n     *\n     * See {@link https://cloud.google.com/storage/docs/encryption#customer-supplied| Customer-supplied Encryption Keys}\n     *\n     * @param {RotateEncryptionKeyOptions} [options] - Configuration options.\n     * @param {RotateEncryptionKeyCallback} [callback]\n     * @returns {Promise<File>}\n     *\n     * @example <caption>include:samples/encryption.js</caption>\n     * region_tag:storage_rotate_encryption_key\n     * Example of rotating the encryption key for this file:\n     */\n    rotateEncryptionKey(optionsOrCallback, callback) {\n        var _a;\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        let options = {};\n        if (typeof optionsOrCallback === 'string' ||\n            optionsOrCallback instanceof Buffer) {\n            options = {\n                encryptionKey: optionsOrCallback,\n            };\n        }\n        else if (typeof optionsOrCallback === 'object') {\n            options = optionsOrCallback;\n        }\n        const newFile = this.bucket.file(this.id, options);\n        const copyOptions = ((_a = options.preconditionOpts) === null || _a === void 0 ? void 0 : _a.ifGenerationMatch) !== undefined\n            ? { preconditionOpts: options.preconditionOpts }\n            : {};\n        this.copy(newFile, copyOptions, callback);\n    }\n    /**\n     * @typedef {object} SaveOptions\n     * @extends CreateWriteStreamOptions\n     */\n    /**\n     * @callback SaveCallback\n     * @param {?Error} err Request error, if any.\n     */\n    /**\n     * Write strings or buffers to a file.\n     *\n     * *This is a convenience method which wraps {@link File#createWriteStream}.*\n     * To upload arbitrary data to a file, please use {@link File#createWriteStream} directly.\n     *\n     * Resumable uploads are automatically enabled and must be shut off explicitly\n     * by setting `options.resumable` to `false`.\n     *\n     * Multipart uploads with retryable error codes will be retried 3 times with exponential backoff.\n     *\n     * <p class=\"notice\">\n     *   There is some overhead when using a resumable upload that can cause\n     *   noticeable performance degradation while uploading a series of small\n     * files. When uploading files less than 10MB, it is recommended that the\n     * resumable feature is disabled.\n     * </p>\n     *\n     * @param {SaveData} data The data to write to a file.\n     * @param {SaveOptions} [options] See {@link File#createWriteStream}'s `options`\n     *     parameter.\n     * @param {SaveCallback} [callback] Callback function.\n     * @returns {Promise}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const myBucket = storage.bucket('my-bucket');\n     *\n     * const file = myBucket.file('my-file');\n     * const contents = 'This is the contents of the file.';\n     *\n     * file.save(contents, function(err) {\n     *   if (!err) {\n     *     // File written successfully.\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * file.save(contents).then(function() {});\n     * ```\n     */\n    save(data, optionsOrCallback, callback) {\n        // tslint:enable:no-any\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        let maxRetries = this.storage.retryOptions.maxRetries;\n        if (!this.shouldRetryBasedOnPreconditionAndIdempotencyStrat(options === null || options === void 0 ? void 0 : options.preconditionOpts)) {\n            maxRetries = 0;\n        }\n        const returnValue = async_retry__WEBPACK_IMPORTED_MODULE_17__(async (bail) => {\n            return new Promise((resolve, reject) => {\n                if (maxRetries === 0) {\n                    this.storage.retryOptions.autoRetry = false;\n                }\n                const writable = this.createWriteStream(options);\n                if (options.onUploadProgress) {\n                    writable.on('progress', options.onUploadProgress);\n                }\n                const handleError = (err) => {\n                    if (this.storage.retryOptions.autoRetry &&\n                        this.storage.retryOptions.retryableErrorFn(err)) {\n                        return reject(err);\n                    }\n                    return bail(err);\n                };\n                if (typeof data === 'string' ||\n                    Buffer.isBuffer(data) ||\n                    data instanceof Uint8Array) {\n                    writable\n                        .on('error', handleError)\n                        .on('finish', () => resolve())\n                        .end(data);\n                }\n                else {\n                    (0,stream__WEBPACK_IMPORTED_MODULE_6__.pipeline)(data, writable, err => {\n                        if (err) {\n                            if (typeof data !== 'function') {\n                                // Only PipelineSourceFunction can be retried. Async-iterables\n                                // and Readable streams can only be consumed once.\n                                return bail(err);\n                            }\n                            handleError(err);\n                        }\n                        else {\n                            resolve();\n                        }\n                    });\n                }\n            });\n        }, {\n            retries: maxRetries,\n            factor: this.storage.retryOptions.retryDelayMultiplier,\n            maxTimeout: this.storage.retryOptions.maxRetryDelay * 1000, //convert to milliseconds\n            maxRetryTime: this.storage.retryOptions.totalTimeout * 1000, //convert to milliseconds\n        });\n        if (!callback) {\n            return returnValue;\n        }\n        else {\n            return returnValue\n                .then(() => {\n                if (callback) {\n                    return callback();\n                }\n            })\n                .catch(callback);\n        }\n    }\n    setMetadata(metadata, optionsOrCallback, cb) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        cb =\n            typeof optionsOrCallback === 'function'\n                ? optionsOrCallback\n                : cb;\n        this.disableAutoRetryConditionallyIdempotent_(this.methods.setMetadata, _bucket_js__WEBPACK_IMPORTED_MODULE_9__.AvailableServiceObjectMethods.setMetadata, options);\n        super\n            .setMetadata(metadata, options)\n            .then(resp => cb(null, ...resp))\n            .catch(cb)\n            .finally(() => {\n            this.storage.retryOptions.autoRetry = this.instanceRetryValue;\n        });\n    }\n    /**\n     * @typedef {array} SetStorageClassResponse\n     * @property {object} 0 The full API response.\n     */\n    /**\n     * @typedef {object} SetStorageClassOptions Configuration options for File#setStorageClass().\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * @callback SetStorageClassCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Set the storage class for this file.\n     *\n     * See {@link https://cloud.google.com/storage/docs/per-object-storage-class| Per-Object Storage Class}\n     * See {@link https://cloud.google.com/storage/docs/storage-classes| Storage Classes}\n     *\n     * @param {string} storageClass The new storage class. (`standard`,\n     *     `nearline`, `coldline`, or `archive`)\n     *     **Note:** The storage classes `multi_regional` and `regional`\n     *     are now legacy and will be deprecated in the future.\n     * @param {SetStorageClassOptions} [options] Configuration options.\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {SetStorageClassCallback} [callback] Callback function.\n     * @returns {Promise<SetStorageClassResponse>}\n     *\n     * @example\n     * ```\n     * file.setStorageClass('nearline', function(err, apiResponse) {\n     *   if (err) {\n     *     // Error handling omitted.\n     *   }\n     *\n     *   // The storage class was updated successfully.\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * file.setStorageClass('nearline').then(function() {});\n     * ```\n     */\n    setStorageClass(storageClass, optionsOrCallback, callback) {\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        const req = {\n            ...options,\n            // In case we get input like `storageClass`, convert to `storage_class`.\n            storageClass: storageClass\n                .replace(/-/g, '_')\n                .replace(/([a-z])([A-Z])/g, (_, low, up) => {\n                return low + '_' + up;\n            })\n                .toUpperCase(),\n        };\n        this.copy(this, req, (err, file, apiResponse) => {\n            if (err) {\n                callback(err, apiResponse);\n                return;\n            }\n            this.metadata = file.metadata;\n            callback(null, apiResponse);\n        });\n    }\n    /**\n     * Set a user project to be billed for all requests made from this File\n     * object.\n     *\n     * @param {string} userProject The user project.\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     * const file = bucket.file('my-file');\n     *\n     * file.setUserProject('grape-spaceship-123');\n     * ```\n     */\n    setUserProject(userProject) {\n        this.bucket.setUserProject.call(this, userProject);\n    }\n    /**\n     * This creates a resumable-upload upload stream.\n     *\n     * @param {Duplexify} stream - Duplexify stream of data to pipe to the file.\n     * @param {object=} options - Configuration object.\n     *\n     * @private\n     */\n    startResumableUpload_(dup, options = {}) {\n        var _a;\n        (_a = options.metadata) !== null && _a !== void 0 ? _a : (options.metadata = {});\n        const retryOptions = this.storage.retryOptions;\n        if (!this.shouldRetryBasedOnPreconditionAndIdempotencyStrat(options.preconditionOpts)) {\n            retryOptions.autoRetry = false;\n        }\n        const cfg = {\n            authClient: this.storage.authClient,\n            apiEndpoint: this.storage.apiEndpoint,\n            bucket: this.bucket.name,\n            customRequestOptions: this.getRequestInterceptors().reduce((reqOpts, interceptorFn) => interceptorFn(reqOpts), {}),\n            file: this.name,\n            generation: this.generation,\n            isPartialUpload: options.isPartialUpload,\n            key: this.encryptionKey,\n            kmsKeyName: this.kmsKeyName,\n            metadata: options.metadata,\n            offset: options.offset,\n            predefinedAcl: options.predefinedAcl,\n            private: options.private,\n            public: options.public,\n            uri: options.uri,\n            userProject: options.userProject || this.userProject,\n            retryOptions: { ...retryOptions },\n            params: (options === null || options === void 0 ? void 0 : options.preconditionOpts) || this.instancePreconditionOpts,\n            chunkSize: options === null || options === void 0 ? void 0 : options.chunkSize,\n            highWaterMark: options === null || options === void 0 ? void 0 : options.highWaterMark,\n            universeDomain: this.bucket.storage.universeDomain,\n            [_nodejs_common_util_js__WEBPACK_IMPORTED_MODULE_12__.GCCL_GCS_CMD_KEY]: options[_nodejs_common_util_js__WEBPACK_IMPORTED_MODULE_12__.GCCL_GCS_CMD_KEY],\n        };\n        let uploadStream;\n        try {\n            uploadStream = _resumable_upload_js__WEBPACK_IMPORTED_MODULE_5__.upload(cfg);\n        }\n        catch (error) {\n            dup.destroy(error);\n            this.storage.retryOptions.autoRetry = this.instanceRetryValue;\n            return;\n        }\n        uploadStream\n            .on('response', resp => {\n            dup.emit('response', resp);\n        })\n            .on('uri', uri => {\n            dup.emit('uri', uri);\n        })\n            .on('metadata', metadata => {\n            this.metadata = metadata;\n            dup.emit('metadata');\n        })\n            .on('finish', () => {\n            dup.emit('complete');\n        })\n            .on('progress', evt => dup.emit('progress', evt));\n        dup.setWritable(uploadStream);\n        this.storage.retryOptions.autoRetry = this.instanceRetryValue;\n    }\n    /**\n     * Takes a readable stream and pipes it to a remote file. Unlike\n     * `startResumableUpload_`, which uses the resumable upload technique, this\n     * method uses a simple upload (all or nothing).\n     *\n     * @param {Duplexify} dup - Duplexify stream of data to pipe to the file.\n     * @param {object=} options - Configuration object.\n     *\n     * @private\n     */\n    startSimpleUpload_(dup, options = {}) {\n        var _a;\n        (_a = options.metadata) !== null && _a !== void 0 ? _a : (options.metadata = {});\n        const apiEndpoint = this.storage.apiEndpoint;\n        const bucketName = this.bucket.name;\n        const uri = `${apiEndpoint}/upload/storage/v1/b/${bucketName}/o`;\n        const reqOpts = {\n            qs: {\n                name: this.name,\n            },\n            uri: uri,\n            [_nodejs_common_util_js__WEBPACK_IMPORTED_MODULE_12__.GCCL_GCS_CMD_KEY]: options[_nodejs_common_util_js__WEBPACK_IMPORTED_MODULE_12__.GCCL_GCS_CMD_KEY],\n        };\n        if (this.generation !== undefined) {\n            reqOpts.qs.ifGenerationMatch = this.generation;\n        }\n        if (this.kmsKeyName !== undefined) {\n            reqOpts.qs.kmsKeyName = this.kmsKeyName;\n        }\n        if (typeof options.timeout === 'number') {\n            reqOpts.timeout = options.timeout;\n        }\n        if (options.userProject || this.userProject) {\n            reqOpts.qs.userProject = options.userProject || this.userProject;\n        }\n        if (options.predefinedAcl) {\n            reqOpts.qs.predefinedAcl = options.predefinedAcl;\n        }\n        else if (options.private) {\n            reqOpts.qs.predefinedAcl = 'private';\n        }\n        else if (options.public) {\n            reqOpts.qs.predefinedAcl = 'publicRead';\n        }\n        Object.assign(reqOpts.qs, this.instancePreconditionOpts, options.preconditionOpts);\n        _nodejs_common_index_js__WEBPACK_IMPORTED_MODULE_0__.util.makeWritableStream(dup, {\n            makeAuthenticatedRequest: (reqOpts) => {\n                this.request(reqOpts, (err, body, resp) => {\n                    if (err) {\n                        dup.destroy(err);\n                        return;\n                    }\n                    this.metadata = body;\n                    dup.emit('metadata', body);\n                    dup.emit('response', resp);\n                    dup.emit('complete');\n                });\n            },\n            metadata: options.metadata,\n            request: reqOpts,\n        });\n    }\n    disableAutoRetryConditionallyIdempotent_(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    coreOpts, methodType, localPreconditionOptions) {\n        var _a, _b, _c, _d;\n        if ((typeof coreOpts === 'object' &&\n            ((_b = (_a = coreOpts === null || coreOpts === void 0 ? void 0 : coreOpts.reqOpts) === null || _a === void 0 ? void 0 : _a.qs) === null || _b === void 0 ? void 0 : _b.ifGenerationMatch) === undefined &&\n            (localPreconditionOptions === null || localPreconditionOptions === void 0 ? void 0 : localPreconditionOptions.ifGenerationMatch) === undefined &&\n            methodType === _bucket_js__WEBPACK_IMPORTED_MODULE_9__.AvailableServiceObjectMethods.delete &&\n            this.storage.retryOptions.idempotencyStrategy ===\n                _storage_js__WEBPACK_IMPORTED_MODULE_8__.IdempotencyStrategy.RetryConditional) ||\n            this.storage.retryOptions.idempotencyStrategy ===\n                _storage_js__WEBPACK_IMPORTED_MODULE_8__.IdempotencyStrategy.RetryNever) {\n            this.storage.retryOptions.autoRetry = false;\n        }\n        if ((typeof coreOpts === 'object' &&\n            ((_d = (_c = coreOpts === null || coreOpts === void 0 ? void 0 : coreOpts.reqOpts) === null || _c === void 0 ? void 0 : _c.qs) === null || _d === void 0 ? void 0 : _d.ifMetagenerationMatch) === undefined &&\n            (localPreconditionOptions === null || localPreconditionOptions === void 0 ? void 0 : localPreconditionOptions.ifMetagenerationMatch) === undefined &&\n            methodType === _bucket_js__WEBPACK_IMPORTED_MODULE_9__.AvailableServiceObjectMethods.setMetadata &&\n            this.storage.retryOptions.idempotencyStrategy ===\n                _storage_js__WEBPACK_IMPORTED_MODULE_8__.IdempotencyStrategy.RetryConditional) ||\n            this.storage.retryOptions.idempotencyStrategy ===\n                _storage_js__WEBPACK_IMPORTED_MODULE_8__.IdempotencyStrategy.RetryNever) {\n            this.storage.retryOptions.autoRetry = false;\n        }\n    }\n    async getBufferFromReadable(readable) {\n        const buf = [];\n        for await (const chunk of readable) {\n            buf.push(chunk);\n        }\n        return Buffer.concat(buf);\n    }\n}\n_File_instances = new WeakSet(), _File_validateIntegrity = \n/**\n *\n * @param hashCalculatingStream\n * @param verify\n * @returns {boolean} Returns `true` if valid, throws with error otherwise\n */\nasync function _File_validateIntegrity(hashCalculatingStream, verify = {}) {\n    const metadata = this.metadata;\n    // If we're doing validation, assume the worst\n    let dataMismatch = !!(verify.crc32c || verify.md5);\n    if (verify.crc32c && metadata.crc32c) {\n        dataMismatch = !hashCalculatingStream.test('crc32c', metadata.crc32c);\n    }\n    if (verify.md5 && metadata.md5Hash) {\n        dataMismatch = !hashCalculatingStream.test('md5', metadata.md5Hash);\n    }\n    if (dataMismatch) {\n        const errors = [];\n        let code = '';\n        let message = '';\n        try {\n            await this.delete();\n            if (verify.md5 && !metadata.md5Hash) {\n                code = 'MD5_NOT_AVAILABLE';\n                message = FileExceptionMessages.MD5_NOT_AVAILABLE;\n            }\n            else {\n                code = 'FILE_NO_UPLOAD';\n                message = FileExceptionMessages.UPLOAD_MISMATCH;\n            }\n        }\n        catch (e) {\n            const error = e;\n            code = 'FILE_NO_UPLOAD_DELETE';\n            message = `${FileExceptionMessages.UPLOAD_MISMATCH_DELETE_FAIL}${error.message}`;\n            errors.push(error);\n        }\n        const error = new RequestError(message);\n        error.code = code;\n        error.errors = errors;\n        throw error;\n    }\n    return true;\n};\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\n(0,_google_cloud_promisify__WEBPACK_IMPORTED_MODULE_1__.promisifyAll)(File, {\n    exclude: [\n        'cloudStorageURI',\n        'publicUrl',\n        'request',\n        'save',\n        'setEncryptionKey',\n        'shouldRetryBasedOnPreconditionAndIdempotencyStrat',\n        'getBufferFromReadable',\n        'restore',\n    ],\n});\n/**\n * Reference to the {@link File} class.\n * @name module:@google-cloud/storage.File\n * @see File\n */\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/build/esm/src/file.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/build/esm/src/hash-stream-validator.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/build/esm/src/hash-stream-validator.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HashStreamValidator: () => (/* binding */ HashStreamValidator)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! stream */ \"stream\");\n/* harmony import */ var _crc32c_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./crc32c.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/crc32c.js\");\n/* harmony import */ var _file_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./file.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/file.js\");\n// Copyright 2022 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _HashStreamValidator_crc32cHash, _HashStreamValidator_md5Hash, _HashStreamValidator_md5Digest;\n\n\n\n\nclass HashStreamValidator extends stream__WEBPACK_IMPORTED_MODULE_1__.Transform {\n    constructor(options = {}) {\n        super();\n        this.updateHashesOnly = false;\n        _HashStreamValidator_crc32cHash.set(this, undefined);\n        _HashStreamValidator_md5Hash.set(this, undefined);\n        _HashStreamValidator_md5Digest.set(this, '');\n        this.crc32cEnabled = !!options.crc32c;\n        this.md5Enabled = !!options.md5;\n        this.updateHashesOnly = !!options.updateHashesOnly;\n        this.crc32cExpected = options.crc32cExpected;\n        this.md5Expected = options.md5Expected;\n        if (this.crc32cEnabled) {\n            if (options.crc32cInstance) {\n                __classPrivateFieldSet(this, _HashStreamValidator_crc32cHash, options.crc32cInstance, \"f\");\n            }\n            else {\n                const crc32cGenerator = options.crc32cGenerator || _crc32c_js__WEBPACK_IMPORTED_MODULE_2__.CRC32C_DEFAULT_VALIDATOR_GENERATOR;\n                __classPrivateFieldSet(this, _HashStreamValidator_crc32cHash, crc32cGenerator(), \"f\");\n            }\n        }\n        if (this.md5Enabled) {\n            __classPrivateFieldSet(this, _HashStreamValidator_md5Hash, (0,crypto__WEBPACK_IMPORTED_MODULE_0__.createHash)('md5'), \"f\");\n        }\n    }\n    /**\n     * Return the current CRC32C value, if available.\n     */\n    get crc32c() {\n        var _a;\n        return (_a = __classPrivateFieldGet(this, _HashStreamValidator_crc32cHash, \"f\")) === null || _a === void 0 ? void 0 : _a.toString();\n    }\n    _flush(callback) {\n        if (__classPrivateFieldGet(this, _HashStreamValidator_md5Hash, \"f\")) {\n            __classPrivateFieldSet(this, _HashStreamValidator_md5Digest, __classPrivateFieldGet(this, _HashStreamValidator_md5Hash, \"f\").digest('base64'), \"f\");\n        }\n        if (this.updateHashesOnly) {\n            callback();\n            return;\n        }\n        // If we're doing validation, assume the worst-- a data integrity\n        // mismatch. If not, these tests won't be performed, and we can assume\n        // the best.\n        // We must check if the server decompressed the data on serve because hash\n        // validation is not possible in this case.\n        let failed = this.crc32cEnabled || this.md5Enabled;\n        if (this.crc32cEnabled && this.crc32cExpected) {\n            failed = !this.test('crc32c', this.crc32cExpected);\n        }\n        if (this.md5Enabled && this.md5Expected) {\n            failed = !this.test('md5', this.md5Expected);\n        }\n        if (failed) {\n            const mismatchError = new _file_js__WEBPACK_IMPORTED_MODULE_3__.RequestError(_file_js__WEBPACK_IMPORTED_MODULE_3__.FileExceptionMessages.DOWNLOAD_MISMATCH);\n            mismatchError.code = 'CONTENT_DOWNLOAD_MISMATCH';\n            callback(mismatchError);\n        }\n        else {\n            callback();\n        }\n    }\n    _transform(chunk, encoding, callback) {\n        this.push(chunk, encoding);\n        try {\n            if (__classPrivateFieldGet(this, _HashStreamValidator_crc32cHash, \"f\"))\n                __classPrivateFieldGet(this, _HashStreamValidator_crc32cHash, \"f\").update(chunk);\n            if (__classPrivateFieldGet(this, _HashStreamValidator_md5Hash, \"f\"))\n                __classPrivateFieldGet(this, _HashStreamValidator_md5Hash, \"f\").update(chunk);\n            callback();\n        }\n        catch (e) {\n            callback(e);\n        }\n    }\n    test(hash, sum) {\n        const check = Buffer.isBuffer(sum) ? sum.toString('base64') : sum;\n        if (hash === 'crc32c' && __classPrivateFieldGet(this, _HashStreamValidator_crc32cHash, \"f\")) {\n            return __classPrivateFieldGet(this, _HashStreamValidator_crc32cHash, \"f\").validate(check);\n        }\n        if (hash === 'md5' && __classPrivateFieldGet(this, _HashStreamValidator_md5Hash, \"f\")) {\n            return __classPrivateFieldGet(this, _HashStreamValidator_md5Digest, \"f\") === check;\n        }\n        return false;\n    }\n}\n_HashStreamValidator_crc32cHash = new WeakMap(), _HashStreamValidator_md5Hash = new WeakMap(), _HashStreamValidator_md5Digest = new WeakMap();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/build/esm/src/hash-stream-validator.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/build/esm/src/hmacKey.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/build/esm/src/hmacKey.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HmacKey: () => (/* binding */ HmacKey)\n/* harmony export */ });\n/* harmony import */ var _nodejs_common_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./nodejs-common/index.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/nodejs-common/index.js\");\n/* harmony import */ var _storage_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./storage.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/storage.js\");\n/* harmony import */ var _google_cloud_promisify__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @google-cloud/promisify */ \"(rsc)/./node_modules/@google-cloud/promisify/build/src/index.js\");\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\n\n/**\n * The API-formatted resource description of the HMAC key.\n *\n * Note: This is not guaranteed to be up-to-date when accessed. To get the\n * latest record, call the `getMetadata()` method.\n *\n * @name HmacKey#metadata\n * @type {object}\n */\n/**\n * An HmacKey object contains metadata of an HMAC key created from a\n * service account through the {@link Storage} client using\n * {@link Storage#createHmacKey}.\n *\n * See {@link https://cloud.google.com/storage/docs/authentication/hmackeys| HMAC keys documentation}\n *\n * @class\n */\nclass HmacKey extends _nodejs_common_index_js__WEBPACK_IMPORTED_MODULE_0__.ServiceObject {\n    /**\n     * @typedef {object} HmacKeyOptions\n     * @property {string} [projectId] The project ID of the project that owns\n     *     the service account of the requested HMAC key. If not provided,\n     *     the project ID used to instantiate the Storage client will be used.\n     */\n    /**\n     * Constructs an HmacKey object.\n     *\n     * Note: this only create a local reference to an HMAC key, to create\n     * an HMAC key, use {@link Storage#createHmacKey}.\n     *\n     * @param {Storage} storage The Storage instance this HMAC key is\n     *     attached to.\n     * @param {string} accessId The unique accessId for this HMAC key.\n     * @param {HmacKeyOptions} options Constructor configurations.\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const hmacKey = storage.hmacKey('access-id');\n     * ```\n     */\n    constructor(storage, accessId, options) {\n        const methods = {\n            /**\n             * @typedef {object} DeleteHmacKeyOptions\n             * @property {string} [userProject] This parameter is currently ignored.\n             */\n            /**\n             * @typedef {array} DeleteHmacKeyResponse\n             * @property {object} 0 The full API response.\n             */\n            /**\n             * @callback DeleteHmacKeyCallback\n             * @param {?Error} err Request error, if any.\n             * @param {object} apiResponse The full API response.\n             */\n            /**\n             * Deletes an HMAC key.\n             * Key state must be set to `INACTIVE` prior to deletion.\n             * Caution: HMAC keys cannot be recovered once you delete them.\n             *\n             * The authenticated user must have `storage.hmacKeys.delete` permission for the project in which the key exists.\n             *\n             * @method HmacKey#delete\n             * @param {DeleteHmacKeyOptions} [options] Configuration options.\n             * @param {DeleteHmacKeyCallback} [callback] Callback function.\n             * @returns {Promise<DeleteHmacKeyResponse>}\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             *\n             * //-\n             * // Delete HMAC key after making the key inactive.\n             * //-\n             * const hmacKey = storage.hmacKey('ACCESS_ID');\n             * hmacKey.setMetadata({state: 'INACTIVE'}, (err, hmacKeyMetadata) => {\n             *     if (err) {\n             *       // The request was an error.\n             *       console.error(err);\n             *       return;\n             *     }\n             *     hmacKey.delete((err) => {\n             *       if (err) {\n             *         console.error(err);\n             *         return;\n             *       }\n             *       // The HMAC key is deleted.\n             *     });\n             *   });\n             *\n             * //-\n             * // If the callback is omitted, a promise is returned.\n             * //-\n             * const hmacKey = storage.hmacKey('ACCESS_ID');\n             * hmacKey\n             *   .setMetadata({state: 'INACTIVE'})\n             *   .then(() => {\n             *     return hmacKey.delete();\n             *   });\n             * ```\n             */\n            delete: true,\n            /**\n             * @callback GetHmacKeyCallback\n             * @param {?Error} err Request error, if any.\n             * @param {HmacKey} hmacKey this {@link HmacKey} instance.\n             * @param {object} apiResponse The full API response.\n             */\n            /**\n             * @typedef {array} GetHmacKeyResponse\n             * @property {HmacKey} 0 This {@link HmacKey} instance.\n             * @property {object} 1 The full API response.\n             */\n            /**\n             * @typedef {object} GetHmacKeyOptions\n             * @property {string} [userProject] This parameter is currently ignored.\n             */\n            /**\n             * Retrieves and populate an HMAC key's metadata, and return\n             * this {@link HmacKey} instance.\n             *\n             * HmacKey.get() does not give the HMAC key secret, as\n             * it is only returned on creation.\n             *\n             * The authenticated user must have `storage.hmacKeys.get` permission\n             * for the project in which the key exists.\n             *\n             * @method HmacKey#get\n             * @param {GetHmacKeyOptions} [options] Configuration options.\n             * @param {GetHmacKeyCallback} [callback] Callback function.\n             * @returns {Promise<GetHmacKeyResponse>}\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             *\n             * //-\n             * // Get the HmacKey's Metadata.\n             * //-\n             * storage.hmacKey('ACCESS_ID')\n             *   .get((err, hmacKey) => {\n             *     if (err) {\n             *       // The request was an error.\n             *       console.error(err);\n             *       return;\n             *     }\n             *     // do something with the returned HmacKey object.\n             *   });\n             *\n             * //-\n             * // If the callback is omitted, a promise is returned.\n             * //-\n             * storage.hmacKey('ACCESS_ID')\n             *   .get()\n             *   .then((data) => {\n             *     const hmacKey = data[0];\n             *   });\n             * ```\n             */\n            get: true,\n            /**\n             * @typedef {object} GetHmacKeyMetadataOptions\n             * @property {string} [userProject] This parameter is currently ignored.\n             */\n            /**\n             * Retrieves and populate an HMAC key's metadata, and return\n             * the HMAC key's metadata as an object.\n             *\n             * HmacKey.getMetadata() does not give the HMAC key secret, as\n             * it is only returned on creation.\n             *\n             * The authenticated user must have `storage.hmacKeys.get` permission\n             * for the project in which the key exists.\n             *\n             * @method HmacKey#getMetadata\n             * @param {GetHmacKeyMetadataOptions} [options] Configuration options.\n             * @param {HmacKeyMetadataCallback} [callback] Callback function.\n             * @returns {Promise<HmacKeyMetadataResponse>}\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             *\n             * //-\n             * // Get the HmacKey's metadata and populate to the metadata property.\n             * //-\n             * storage.hmacKey('ACCESS_ID')\n             *   .getMetadata((err, hmacKeyMetadata) => {\n             *     if (err) {\n             *       // The request was an error.\n             *       console.error(err);\n             *       return;\n             *     }\n             *     console.log(hmacKeyMetadata);\n             *   });\n             *\n             * //-\n             * // If the callback is omitted, a promise is returned.\n             * //-\n             * storage.hmacKey('ACCESS_ID')\n             *   .getMetadata()\n             *   .then((data) => {\n             *     const hmacKeyMetadata = data[0];\n             *     console.log(hmacKeyMetadata);\n             *   });\n             * ```\n             */\n            getMetadata: true,\n            /**\n             * @typedef {object} SetHmacKeyMetadata Subset of {@link HmacKeyMetadata} to update.\n             * @property {string} state New state of the HmacKey. Either 'ACTIVE' or 'INACTIVE'.\n             * @property {string} [etag] Include an etag from a previous get HMAC key request\n             *    to perform safe read-modify-write.\n             */\n            /**\n             * @typedef {object} SetHmacKeyMetadataOptions\n             * @property {string} [userProject] This parameter is currently ignored.\n             */\n            /**\n             * @callback HmacKeyMetadataCallback\n             * @param {?Error} err Request error, if any.\n             * @param {HmacKeyMetadata} metadata The updated {@link HmacKeyMetadata} object.\n             * @param {object} apiResponse The full API response.\n             */\n            /**\n             * @typedef {array} HmacKeyMetadataResponse\n             * @property {HmacKeyMetadata} 0 The updated {@link HmacKeyMetadata} object.\n             * @property {object} 1 The full API response.\n             */\n            /**\n             * Updates the state of an HMAC key. See {@link SetHmacKeyMetadata} for\n             * valid states.\n             *\n             * @method HmacKey#setMetadata\n             * @param {SetHmacKeyMetadata} metadata The new metadata.\n             * @param {SetHmacKeyMetadataOptions} [options] Configuration options.\n             * @param {HmacKeyMetadataCallback} [callback] Callback function.\n             * @returns {Promise<HmacKeyMetadataResponse>}\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             *\n             * const metadata = {\n             *   state: 'INACTIVE',\n             * };\n             *\n             * storage.hmacKey('ACCESS_ID')\n             *   .setMetadata(metadata, (err, hmacKeyMetadata) => {\n             *     if (err) {\n             *       // The request was an error.\n             *       console.error(err);\n             *       return;\n             *     }\n             *     console.log(hmacKeyMetadata);\n             *   });\n             *\n             * //-\n             * // If the callback is omitted, a promise is returned.\n             * //-\n             * storage.hmacKey('ACCESS_ID')\n             *   .setMetadata(metadata)\n             *   .then((data) => {\n             *     const hmacKeyMetadata = data[0];\n             *     console.log(hmacKeyMetadata);\n             *   });\n             * ```\n             */\n            setMetadata: {\n                reqOpts: {\n                    method: 'PUT',\n                },\n            },\n        };\n        const projectId = (options && options.projectId) || storage.projectId;\n        super({\n            parent: storage,\n            id: accessId,\n            baseUrl: `/projects/${projectId}/hmacKeys`,\n            methods,\n        });\n        this.storage = storage;\n        this.instanceRetryValue = storage.retryOptions.autoRetry;\n    }\n    setMetadata(metadata, optionsOrCallback, cb) {\n        // ETag preconditions are not currently supported. Retries should be disabled if the idempotency strategy is not set to RetryAlways\n        if (this.storage.retryOptions.idempotencyStrategy !==\n            _storage_js__WEBPACK_IMPORTED_MODULE_1__.IdempotencyStrategy.RetryAlways) {\n            this.storage.retryOptions.autoRetry = false;\n        }\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        cb =\n            typeof optionsOrCallback === 'function'\n                ? optionsOrCallback\n                : cb;\n        super\n            .setMetadata(metadata, options)\n            .then(resp => cb(null, ...resp))\n            .catch(cb)\n            .finally(() => {\n            this.storage.retryOptions.autoRetry = this.instanceRetryValue;\n        });\n    }\n}\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\n(0,_google_cloud_promisify__WEBPACK_IMPORTED_MODULE_2__.promisifyAll)(HmacKey);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/build/esm/src/hmacKey.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/build/esm/src/iam.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/build/esm/src/iam.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IAMExceptionMessages: () => (/* binding */ IAMExceptionMessages),\n/* harmony export */   Iam: () => (/* binding */ Iam)\n/* harmony export */ });\n/* harmony import */ var _google_cloud_promisify__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @google-cloud/promisify */ \"(rsc)/./node_modules/@google-cloud/promisify/build/src/index.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/util.js\");\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\nvar IAMExceptionMessages;\n(function (IAMExceptionMessages) {\n    IAMExceptionMessages[\"POLICY_OBJECT_REQUIRED\"] = \"A policy object is required.\";\n    IAMExceptionMessages[\"PERMISSIONS_REQUIRED\"] = \"Permissions are required.\";\n})(IAMExceptionMessages || (IAMExceptionMessages = {}));\n/**\n * Get and set IAM policies for your Cloud Storage bucket.\n *\n * See {@link https://cloud.google.com/storage/docs/access-control/iam#short_title_iam_management| Cloud Storage IAM Management}\n * See {@link https://cloud.google.com/iam/docs/granting-changing-revoking-access| Granting, Changing, and Revoking Access}\n * See {@link https://cloud.google.com/iam/docs/understanding-roles| IAM Roles}\n *\n * @constructor Iam\n *\n * @param {Bucket} bucket The parent instance.\n * @example\n * ```\n * const {Storage} = require('@google-cloud/storage');\n * const storage = new Storage();\n * const bucket = storage.bucket('my-bucket');\n * // bucket.iam\n * ```\n */\nclass Iam {\n    constructor(bucket) {\n        this.request_ = bucket.request.bind(bucket);\n        this.resourceId_ = 'buckets/' + bucket.getId();\n    }\n    /**\n     * @typedef {object} GetPolicyOptions Requested options for IAM#getPolicy().\n     * @property {number} [requestedPolicyVersion] The version of IAM policies to\n     *     request. If a policy with a condition is requested without setting\n     *     this, the server will return an error. This must be set to a value\n     *     of 3 to retrieve IAM policies containing conditions. This is to\n     *     prevent client code that isn't aware of IAM conditions from\n     *     interpreting and modifying policies incorrectly. The service might\n     *     return a policy with version lower than the one that was requested,\n     *     based on the feature syntax in the policy fetched.\n     *     See {@link https://cloud.google.com/iam/docs/policies#versions| IAM Policy versions}\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * @typedef {array} GetPolicyResponse\n     * @property {Policy} 0 The policy.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * @typedef {object} Policy\n     * @property {PolicyBinding[]} policy.bindings Bindings associate members with roles.\n     * @property {string} [policy.etag] Etags are used to perform a read-modify-write.\n     * @property {number} [policy.version] The syntax schema version of the Policy.\n     *      To set an IAM policy with conditional binding, this field must be set to\n     *      3 or greater.\n     *     See {@link https://cloud.google.com/iam/docs/policies#versions| IAM Policy versions}\n     */\n    /**\n     * @typedef {object} PolicyBinding\n     * @property {string} role Role that is assigned to members.\n     * @property {string[]} members Specifies the identities requesting access for the bucket.\n     * @property {Expr} [condition] The condition that is associated with this binding.\n     */\n    /**\n     * @typedef {object} Expr\n     * @property {string} [title] An optional title for the expression, i.e. a\n     *     short string describing its purpose. This can be used e.g. in UIs\n     *     which allow to enter the expression.\n     * @property {string} [description] An optional description of the\n     *     expression. This is a longer text which describes the expression,\n     *     e.g. when hovered over it in a UI.\n     * @property {string} expression Textual representation of an expression in\n     *     Common Expression Language syntax. The application context of the\n     *     containing message determines which well-known feature set of CEL\n     *     is supported.The condition that is associated with this binding.\n     *\n     * @see [Condition] https://cloud.google.com/storage/docs/access-control/iam#conditions\n     */\n    /**\n     * Get the IAM policy.\n     *\n     * @param {GetPolicyOptions} [options] Request options.\n     * @param {GetPolicyCallback} [callback] Callback function.\n     * @returns {Promise<GetPolicyResponse>}\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/getIamPolicy| Buckets: setIamPolicy API Documentation}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('my-bucket');\n     *\n     * bucket.iam.getPolicy(\n     *     {requestedPolicyVersion: 3},\n     *     function(err, policy, apiResponse) {\n     *\n     *     },\n     * );\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.iam.getPolicy({requestedPolicyVersion: 3})\n     *   .then(function(data) {\n     *     const policy = data[0];\n     *     const apiResponse = data[1];\n     *   });\n     *\n     * ```\n     * @example <caption>include:samples/iam.js</caption>\n     * region_tag:storage_view_bucket_iam_members\n     * Example of retrieving a bucket's IAM policy:\n     */\n    getPolicy(optionsOrCallback, callback) {\n        const { options, callback: cb } = (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.normalize)(optionsOrCallback, callback);\n        const qs = {};\n        if (options.userProject) {\n            qs.userProject = options.userProject;\n        }\n        if (options.requestedPolicyVersion !== null &&\n            options.requestedPolicyVersion !== undefined) {\n            qs.optionsRequestedPolicyVersion = options.requestedPolicyVersion;\n        }\n        this.request_({\n            uri: '/iam',\n            qs,\n        }, cb);\n    }\n    /**\n     * Set the IAM policy.\n     *\n     * @throws {Error} If no policy is provided.\n     *\n     * @param {Policy} policy The policy.\n     * @param {SetPolicyOptions} [options] Configuration options.\n     * @param {SetPolicyCallback} callback Callback function.\n     * @returns {Promise<SetPolicyResponse>}\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/setIamPolicy| Buckets: setIamPolicy API Documentation}\n     * See {@link https://cloud.google.com/iam/docs/understanding-roles| IAM Roles}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('my-bucket');\n     *\n     * const myPolicy = {\n     *   bindings: [\n     *     {\n     *       role: 'roles/storage.admin',\n     *       members:\n     * ['serviceAccount:myotherproject@appspot.gserviceaccount.com']\n     *     }\n     *   ]\n     * };\n     *\n     * bucket.iam.setPolicy(myPolicy, function(err, policy, apiResponse) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.iam.setPolicy(myPolicy).then(function(data) {\n     *   const policy = data[0];\n     *   const apiResponse = data[1];\n     * });\n     *\n     * ```\n     * @example <caption>include:samples/iam.js</caption>\n     * region_tag:storage_add_bucket_iam_member\n     * Example of adding to a bucket's IAM policy:\n     *\n     * @example <caption>include:samples/iam.js</caption>\n     * region_tag:storage_remove_bucket_iam_member\n     * Example of removing from a bucket's IAM policy:\n     */\n    setPolicy(policy, optionsOrCallback, callback) {\n        if (policy === null || typeof policy !== 'object') {\n            throw new Error(IAMExceptionMessages.POLICY_OBJECT_REQUIRED);\n        }\n        const { options, callback: cb } = (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.normalize)(optionsOrCallback, callback);\n        let maxRetries;\n        if (policy.etag === undefined) {\n            maxRetries = 0;\n        }\n        this.request_({\n            method: 'PUT',\n            uri: '/iam',\n            maxRetries,\n            json: Object.assign({\n                resourceId: this.resourceId_,\n            }, policy),\n            qs: options,\n        }, cb);\n    }\n    /**\n     * Test a set of permissions for a resource.\n     *\n     * @throws {Error} If permissions are not provided.\n     *\n     * @param {string|string[]} permissions The permission(s) to test for.\n     * @param {TestIamPermissionsOptions} [options] Configuration object.\n     * @param {TestIamPermissionsCallback} [callback] Callback function.\n     * @returns {Promise<TestIamPermissionsResponse>}\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/testIamPermissions| Buckets: testIamPermissions API Documentation}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('my-bucket');\n     *\n     * //-\n     * // Test a single permission.\n     * //-\n     * const test = 'storage.buckets.delete';\n     *\n     * bucket.iam.testPermissions(test, function(err, permissions, apiResponse) {\n     *   console.log(permissions);\n     *   // {\n     *   //   \"storage.buckets.delete\": true\n     *   // }\n     * });\n     *\n     * //-\n     * // Test several permissions at once.\n     * //-\n     * const tests = [\n     *   'storage.buckets.delete',\n     *   'storage.buckets.get'\n     * ];\n     *\n     * bucket.iam.testPermissions(tests, function(err, permissions) {\n     *   console.log(permissions);\n     *   // {\n     *   //   \"storage.buckets.delete\": false,\n     *   //   \"storage.buckets.get\": true\n     *   // }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.iam.testPermissions(test).then(function(data) {\n     *   const permissions = data[0];\n     *   const apiResponse = data[1];\n     * });\n     * ```\n     */\n    testPermissions(permissions, optionsOrCallback, callback) {\n        if (!Array.isArray(permissions) && typeof permissions !== 'string') {\n            throw new Error(IAMExceptionMessages.PERMISSIONS_REQUIRED);\n        }\n        const { options, callback: cb } = (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.normalize)(optionsOrCallback, callback);\n        const permissionsArray = Array.isArray(permissions)\n            ? permissions\n            : [permissions];\n        const req = Object.assign({\n            permissions: permissionsArray,\n        }, options);\n        this.request_({\n            uri: '/iam/testPermissions',\n            qs: req,\n            useQuerystring: true,\n        }, (err, resp) => {\n            if (err) {\n                cb(err, null, resp);\n                return;\n            }\n            const availablePermissions = Array.isArray(resp.permissions)\n                ? resp.permissions\n                : [];\n            const permissionsHash = permissionsArray.reduce((acc, permission) => {\n                acc[permission] = availablePermissions.indexOf(permission) > -1;\n                return acc;\n            }, {});\n            cb(null, permissionsHash, resp);\n        });\n    }\n}\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\n(0,_google_cloud_promisify__WEBPACK_IMPORTED_MODULE_0__.promisifyAll)(Iam);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/build/esm/src/iam.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/build/esm/src/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/build/esm/src/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApiError: () => (/* reexport safe */ _nodejs_common_index_js__WEBPACK_IMPORTED_MODULE_0__.ApiError),\n/* harmony export */   Bucket: () => (/* reexport safe */ _bucket_js__WEBPACK_IMPORTED_MODULE_2__.Bucket),\n/* harmony export */   CRC32C: () => (/* reexport safe */ _crc32c_js__WEBPACK_IMPORTED_MODULE_3__.CRC32C),\n/* harmony export */   CRC32C_DEFAULT_VALIDATOR_GENERATOR: () => (/* reexport safe */ _crc32c_js__WEBPACK_IMPORTED_MODULE_3__.CRC32C_DEFAULT_VALIDATOR_GENERATOR),\n/* harmony export */   CRC32C_EXCEPTION_MESSAGES: () => (/* reexport safe */ _crc32c_js__WEBPACK_IMPORTED_MODULE_3__.CRC32C_EXCEPTION_MESSAGES),\n/* harmony export */   CRC32C_EXTENSIONS: () => (/* reexport safe */ _crc32c_js__WEBPACK_IMPORTED_MODULE_3__.CRC32C_EXTENSIONS),\n/* harmony export */   CRC32C_EXTENSION_TABLE: () => (/* reexport safe */ _crc32c_js__WEBPACK_IMPORTED_MODULE_3__.CRC32C_EXTENSION_TABLE),\n/* harmony export */   Channel: () => (/* reexport safe */ _channel_js__WEBPACK_IMPORTED_MODULE_4__.Channel),\n/* harmony export */   File: () => (/* reexport safe */ _file_js__WEBPACK_IMPORTED_MODULE_5__.File),\n/* harmony export */   HashStreamValidator: () => (/* reexport safe */ _hash_stream_validator_js__WEBPACK_IMPORTED_MODULE_6__.HashStreamValidator),\n/* harmony export */   HmacKey: () => (/* reexport safe */ _hmacKey_js__WEBPACK_IMPORTED_MODULE_7__.HmacKey),\n/* harmony export */   Iam: () => (/* reexport safe */ _iam_js__WEBPACK_IMPORTED_MODULE_8__.Iam),\n/* harmony export */   IdempotencyStrategy: () => (/* reexport safe */ _storage_js__WEBPACK_IMPORTED_MODULE_1__.IdempotencyStrategy),\n/* harmony export */   MultiPartUploadError: () => (/* reexport safe */ _transfer_manager_js__WEBPACK_IMPORTED_MODULE_10__.MultiPartUploadError),\n/* harmony export */   Notification: () => (/* reexport safe */ _notification_js__WEBPACK_IMPORTED_MODULE_9__.Notification),\n/* harmony export */   RETRYABLE_ERR_FN_DEFAULT: () => (/* reexport safe */ _storage_js__WEBPACK_IMPORTED_MODULE_1__.RETRYABLE_ERR_FN_DEFAULT),\n/* harmony export */   Storage: () => (/* reexport safe */ _storage_js__WEBPACK_IMPORTED_MODULE_1__.Storage),\n/* harmony export */   TransferManager: () => (/* reexport safe */ _transfer_manager_js__WEBPACK_IMPORTED_MODULE_10__.TransferManager)\n/* harmony export */ });\n/* harmony import */ var _nodejs_common_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./nodejs-common/index.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/nodejs-common/index.js\");\n/* harmony import */ var _storage_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./storage.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/storage.js\");\n/* harmony import */ var _bucket_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bucket.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/bucket.js\");\n/* harmony import */ var _crc32c_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./crc32c.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/crc32c.js\");\n/* harmony import */ var _channel_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./channel.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/channel.js\");\n/* harmony import */ var _file_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./file.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/file.js\");\n/* harmony import */ var _hash_stream_validator_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./hash-stream-validator.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/hash-stream-validator.js\");\n/* harmony import */ var _hmacKey_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./hmacKey.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/hmacKey.js\");\n/* harmony import */ var _iam_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./iam.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/iam.js\");\n/* harmony import */ var _notification_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./notification.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/notification.js\");\n/* harmony import */ var _transfer_manager_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./transfer-manager.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/transfer-manager.js\");\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * The `@google-cloud/storage` package has a single named export which is the\n * {@link Storage} (ES6) class, which should be instantiated with `new`.\n *\n * See {@link Storage} and {@link ClientConfig} for client methods and\n * configuration options.\n *\n * @module {Storage} @google-cloud/storage\n * @alias nodejs-storage\n *\n * @example\n * Install the client library with <a href=\"https://www.npmjs.com/\">npm</a>:\n * ```\n * npm install --save @google-cloud/storage\n * ```\n *\n * @example\n * Import the client library\n * ```\n * const {Storage} = require('@google-cloud/storage');\n * ```\n *\n * @example\n * Create a client that uses <a\n * href=\"https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\">Application\n * Default Credentials (ADC)</a>:\n * ```\n * const storage = new Storage();\n * ```\n *\n * @example\n * Create a client with <a\n * href=\"https://cloud.google.com/docs/authentication/production#obtaining_and_providing_service_account_credentials_manually\">explicit\n * credentials</a>:\n * ```\n * const storage = new Storage({ projectId:\n * 'your-project-id', keyFilename: '/path/to/keyfile.json'\n * });\n * ```\n *\n * @example <caption>include:samples/quickstart.js</caption>\n * region_tag:storage_quickstart\n * Full quickstart example:\n */\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL2J1aWxkL2VzbS9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLGVBQWU7QUFDbkI7QUFDQSxRQUFRLGVBQWUsS0FBSyxvQkFBb0I7QUFDaEQ7QUFDQTtBQUNBLFlBQVksU0FBUztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxTQUFTO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDb0Q7QUFDbUM7QUFDakQ7QUFDVjtBQUNXO0FBQ0w7QUFDUztBQUNIO0FBQ1I7QUFDa0I7QUFDWiIsInNvdXJjZXMiOlsiL1VzZXJzL2x1Y2Fzc2FudG9zL0Rvd25sb2Fkcy92aXRyaW55LXdlYi1sbC9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL2J1aWxkL2VzbS9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIFRoZSBgQGdvb2dsZS1jbG91ZC9zdG9yYWdlYCBwYWNrYWdlIGhhcyBhIHNpbmdsZSBuYW1lZCBleHBvcnQgd2hpY2ggaXMgdGhlXG4gKiB7QGxpbmsgU3RvcmFnZX0gKEVTNikgY2xhc3MsIHdoaWNoIHNob3VsZCBiZSBpbnN0YW50aWF0ZWQgd2l0aCBgbmV3YC5cbiAqXG4gKiBTZWUge0BsaW5rIFN0b3JhZ2V9IGFuZCB7QGxpbmsgQ2xpZW50Q29uZmlnfSBmb3IgY2xpZW50IG1ldGhvZHMgYW5kXG4gKiBjb25maWd1cmF0aW9uIG9wdGlvbnMuXG4gKlxuICogQG1vZHVsZSB7U3RvcmFnZX0gQGdvb2dsZS1jbG91ZC9zdG9yYWdlXG4gKiBAYWxpYXMgbm9kZWpzLXN0b3JhZ2VcbiAqXG4gKiBAZXhhbXBsZVxuICogSW5zdGFsbCB0aGUgY2xpZW50IGxpYnJhcnkgd2l0aCA8YSBocmVmPVwiaHR0cHM6Ly93d3cubnBtanMuY29tL1wiPm5wbTwvYT46XG4gKiBgYGBcbiAqIG5wbSBpbnN0YWxsIC0tc2F2ZSBAZ29vZ2xlLWNsb3VkL3N0b3JhZ2VcbiAqIGBgYFxuICpcbiAqIEBleGFtcGxlXG4gKiBJbXBvcnQgdGhlIGNsaWVudCBsaWJyYXJ5XG4gKiBgYGBcbiAqIGNvbnN0IHtTdG9yYWdlfSA9IHJlcXVpcmUoJ0Bnb29nbGUtY2xvdWQvc3RvcmFnZScpO1xuICogYGBgXG4gKlxuICogQGV4YW1wbGVcbiAqIENyZWF0ZSBhIGNsaWVudCB0aGF0IHVzZXMgPGFcbiAqIGhyZWY9XCJodHRwczovL2Nsb3VkLmdvb2dsZS5jb20vZG9jcy9hdXRoZW50aWNhdGlvbi9wcm9kdWN0aW9uI3Byb3ZpZGluZ19jcmVkZW50aWFsc190b195b3VyX2FwcGxpY2F0aW9uXCI+QXBwbGljYXRpb25cbiAqIERlZmF1bHQgQ3JlZGVudGlhbHMgKEFEQyk8L2E+OlxuICogYGBgXG4gKiBjb25zdCBzdG9yYWdlID0gbmV3IFN0b3JhZ2UoKTtcbiAqIGBgYFxuICpcbiAqIEBleGFtcGxlXG4gKiBDcmVhdGUgYSBjbGllbnQgd2l0aCA8YVxuICogaHJlZj1cImh0dHBzOi8vY2xvdWQuZ29vZ2xlLmNvbS9kb2NzL2F1dGhlbnRpY2F0aW9uL3Byb2R1Y3Rpb24jb2J0YWluaW5nX2FuZF9wcm92aWRpbmdfc2VydmljZV9hY2NvdW50X2NyZWRlbnRpYWxzX21hbnVhbGx5XCI+ZXhwbGljaXRcbiAqIGNyZWRlbnRpYWxzPC9hPjpcbiAqIGBgYFxuICogY29uc3Qgc3RvcmFnZSA9IG5ldyBTdG9yYWdlKHsgcHJvamVjdElkOlxuICogJ3lvdXItcHJvamVjdC1pZCcsIGtleUZpbGVuYW1lOiAnL3BhdGgvdG8va2V5ZmlsZS5qc29uJ1xuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5pbmNsdWRlOnNhbXBsZXMvcXVpY2tzdGFydC5qczwvY2FwdGlvbj5cbiAqIHJlZ2lvbl90YWc6c3RvcmFnZV9xdWlja3N0YXJ0XG4gKiBGdWxsIHF1aWNrc3RhcnQgZXhhbXBsZTpcbiAqL1xuZXhwb3J0IHsgQXBpRXJyb3IgfSBmcm9tICcuL25vZGVqcy1jb21tb24vaW5kZXguanMnO1xuZXhwb3J0IHsgSWRlbXBvdGVuY3lTdHJhdGVneSwgUkVUUllBQkxFX0VSUl9GTl9ERUZBVUxULCBTdG9yYWdlLCB9IGZyb20gJy4vc3RvcmFnZS5qcyc7XG5leHBvcnQgeyBCdWNrZXQsIH0gZnJvbSAnLi9idWNrZXQuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9jcmMzMmMuanMnO1xuZXhwb3J0IHsgQ2hhbm5lbCB9IGZyb20gJy4vY2hhbm5lbC5qcyc7XG5leHBvcnQgeyBGaWxlLCB9IGZyb20gJy4vZmlsZS5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2hhc2gtc3RyZWFtLXZhbGlkYXRvci5qcyc7XG5leHBvcnQgeyBIbWFjS2V5LCB9IGZyb20gJy4vaG1hY0tleS5qcyc7XG5leHBvcnQgeyBJYW0sIH0gZnJvbSAnLi9pYW0uanMnO1xuZXhwb3J0IHsgTm90aWZpY2F0aW9uLCB9IGZyb20gJy4vbm90aWZpY2F0aW9uLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vdHJhbnNmZXItbWFuYWdlci5qcyc7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/build/esm/src/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/build/esm/src/nodejs-common/index.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/build/esm/src/nodejs-common/index.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApiError: () => (/* reexport safe */ _util_js__WEBPACK_IMPORTED_MODULE_2__.ApiError),\n/* harmony export */   Service: () => (/* reexport safe */ _service_js__WEBPACK_IMPORTED_MODULE_0__.Service),\n/* harmony export */   ServiceObject: () => (/* reexport safe */ _service_object_js__WEBPACK_IMPORTED_MODULE_1__.ServiceObject),\n/* harmony export */   util: () => (/* reexport safe */ _util_js__WEBPACK_IMPORTED_MODULE_2__.util)\n/* harmony export */ });\n/* harmony import */ var _service_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./service.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/nodejs-common/service.js\");\n/* harmony import */ var _service_object_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./service-object.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/nodejs-common/service-object.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/nodejs-common/util.js\");\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL2J1aWxkL2VzbS9zcmMvbm9kZWpzLWNvbW1vbi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQXdDO0FBQ2E7QUFDVCIsInNvdXJjZXMiOlsiL1VzZXJzL2x1Y2Fzc2FudG9zL0Rvd25sb2Fkcy92aXRyaW55LXdlYi1sbC9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL2J1aWxkL2VzbS9zcmMvbm9kZWpzLWNvbW1vbi9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBTZXJ2aWNlLCB9IGZyb20gJy4vc2VydmljZS5qcyc7XG5leHBvcnQgeyBTZXJ2aWNlT2JqZWN0LCB9IGZyb20gJy4vc2VydmljZS1vYmplY3QuanMnO1xuZXhwb3J0IHsgQXBpRXJyb3IsIHV0aWwsIH0gZnJvbSAnLi91dGlsLmpzJztcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/build/esm/src/nodejs-common/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/build/esm/src/nodejs-common/service-object.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/build/esm/src/nodejs-common/service-object.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ServiceObject: () => (/* binding */ ServiceObject)\n/* harmony export */ });\n/* harmony import */ var _google_cloud_promisify__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @google-cloud/promisify */ \"(rsc)/./node_modules/@google-cloud/promisify/build/src/index.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/nodejs-common/util.js\");\n/*!\n * Copyright 2022 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n/**\n * ServiceObject is a base class, meant to be inherited from by a \"service\n * object,\" like a BigQuery dataset or Storage bucket.\n *\n * Most of the time, these objects share common functionality; they can be\n * created or deleted, and you can get or set their metadata.\n *\n * By inheriting from this class, a service object will be extended with these\n * shared behaviors. Note that any method can be overridden when the service\n * object requires specific behavior.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nclass ServiceObject extends events__WEBPACK_IMPORTED_MODULE_1__.EventEmitter {\n    /*\n     * @constructor\n     * @alias module:common/service-object\n     *\n     * @private\n     *\n     * @param {object} config - Configuration object.\n     * @param {string} config.baseUrl - The base URL to make API requests to.\n     * @param {string} config.createMethod - The method which creates this object.\n     * @param {string=} config.id - The identifier of the object. For example, the\n     *     name of a Storage bucket or Pub/Sub topic.\n     * @param {object=} config.methods - A map of each method name that should be inherited.\n     * @param {object} config.methods[].reqOpts - Default request options for this\n     *     particular method. A common use case is when `setMetadata` requires a\n     *     `PUT` method to override the default `PATCH`.\n     * @param {object} config.parent - The parent service instance. For example, an\n     *     instance of Storage if the object is Bucket.\n     */\n    constructor(config) {\n        super();\n        this.metadata = {};\n        this.baseUrl = config.baseUrl;\n        this.parent = config.parent; // Parent class.\n        this.id = config.id; // Name or ID (e.g. dataset ID, bucket name, etc).\n        this.createMethod = config.createMethod;\n        this.methods = config.methods || {};\n        this.interceptors = [];\n        this.projectId = config.projectId;\n        if (config.methods) {\n            // This filters the ServiceObject instance (e.g. a \"File\") to only have\n            // the configured methods. We make a couple of exceptions for core-\n            // functionality (\"request()\" and \"getRequestInterceptors()\")\n            Object.getOwnPropertyNames(ServiceObject.prototype)\n                .filter(methodName => {\n                return (\n                // All ServiceObjects need `request` and `getRequestInterceptors`.\n                // clang-format off\n                !/^request/.test(methodName) &&\n                    !/^getRequestInterceptors/.test(methodName) &&\n                    // clang-format on\n                    // The ServiceObject didn't redefine the method.\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    this[methodName] ===\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        ServiceObject.prototype[methodName] &&\n                    // This method isn't wanted.\n                    !config.methods[methodName]);\n            })\n                .forEach(methodName => {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                this[methodName] = undefined;\n            });\n        }\n    }\n    create(optionsOrCallback, callback) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const self = this;\n        const args = [this.id];\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        if (typeof optionsOrCallback === 'object') {\n            args.push(optionsOrCallback);\n        }\n        // Wrap the callback to return *this* instance of the object, not the\n        // newly-created one.\n        // tslint: disable-next-line no-any\n        function onCreate(...args) {\n            const [err, instance] = args;\n            if (!err) {\n                self.metadata = instance.metadata;\n                if (self.id && instance.metadata) {\n                    self.id = instance.metadata.id;\n                }\n                args[1] = self; // replace the created `instance` with this one.\n            }\n            callback(...args);\n        }\n        args.push(onCreate);\n        // eslint-disable-next-line prefer-spread\n        this.createMethod.apply(null, args);\n    }\n    delete(optionsOrCallback, cb) {\n        var _a;\n        const [options, callback] = _util_js__WEBPACK_IMPORTED_MODULE_2__.util.maybeOptionsOrCallback(optionsOrCallback, cb);\n        const ignoreNotFound = options.ignoreNotFound;\n        delete options.ignoreNotFound;\n        const methodConfig = (typeof this.methods.delete === 'object' && this.methods.delete) || {};\n        const reqOpts = {\n            method: 'DELETE',\n            uri: '',\n            ...methodConfig.reqOpts,\n            qs: {\n                ...(_a = methodConfig.reqOpts) === null || _a === void 0 ? void 0 : _a.qs,\n                ...options,\n            },\n        };\n        // The `request` method may have been overridden to hold any special\n        // behavior. Ensure we call the original `request` method.\n        ServiceObject.prototype.request.call(this, reqOpts, (err, body, res) => {\n            if (err) {\n                if (err.code === 404 && ignoreNotFound) {\n                    err = null;\n                }\n            }\n            callback(err, res);\n        });\n    }\n    exists(optionsOrCallback, cb) {\n        const [options, callback] = _util_js__WEBPACK_IMPORTED_MODULE_2__.util.maybeOptionsOrCallback(optionsOrCallback, cb);\n        this.get(options, err => {\n            if (err) {\n                if (err.code === 404) {\n                    callback(null, false);\n                }\n                else {\n                    callback(err);\n                }\n                return;\n            }\n            callback(null, true);\n        });\n    }\n    get(optionsOrCallback, cb) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const self = this;\n        const [opts, callback] = _util_js__WEBPACK_IMPORTED_MODULE_2__.util.maybeOptionsOrCallback(optionsOrCallback, cb);\n        const options = Object.assign({}, opts);\n        const autoCreate = options.autoCreate && typeof this.create === 'function';\n        delete options.autoCreate;\n        function onCreate(err, instance, apiResponse) {\n            if (err) {\n                if (err.code === 409) {\n                    self.get(options, callback);\n                    return;\n                }\n                callback(err, null, apiResponse);\n                return;\n            }\n            callback(null, instance, apiResponse);\n        }\n        this.getMetadata(options, (err, metadata) => {\n            if (err) {\n                if (err.code === 404 && autoCreate) {\n                    const args = [];\n                    if (Object.keys(options).length > 0) {\n                        args.push(options);\n                    }\n                    args.push(onCreate);\n                    self.create(...args);\n                    return;\n                }\n                callback(err, null, metadata);\n                return;\n            }\n            callback(null, self, metadata);\n        });\n    }\n    getMetadata(optionsOrCallback, cb) {\n        var _a;\n        const [options, callback] = _util_js__WEBPACK_IMPORTED_MODULE_2__.util.maybeOptionsOrCallback(optionsOrCallback, cb);\n        const methodConfig = (typeof this.methods.getMetadata === 'object' &&\n            this.methods.getMetadata) ||\n            {};\n        const reqOpts = {\n            uri: '',\n            ...methodConfig.reqOpts,\n            qs: {\n                ...(_a = methodConfig.reqOpts) === null || _a === void 0 ? void 0 : _a.qs,\n                ...options,\n            },\n        };\n        // The `request` method may have been overridden to hold any special\n        // behavior. Ensure we call the original `request` method.\n        ServiceObject.prototype.request.call(this, reqOpts, (err, body, res) => {\n            this.metadata = body;\n            callback(err, this.metadata, res);\n        });\n    }\n    /**\n     * Return the user's custom request interceptors.\n     */\n    getRequestInterceptors() {\n        // Interceptors should be returned in the order they were assigned.\n        const localInterceptors = this.interceptors\n            .filter(interceptor => typeof interceptor.request === 'function')\n            .map(interceptor => interceptor.request);\n        return this.parent.getRequestInterceptors().concat(localInterceptors);\n    }\n    setMetadata(metadata, optionsOrCallback, cb) {\n        var _a, _b;\n        const [options, callback] = _util_js__WEBPACK_IMPORTED_MODULE_2__.util.maybeOptionsOrCallback(optionsOrCallback, cb);\n        const methodConfig = (typeof this.methods.setMetadata === 'object' &&\n            this.methods.setMetadata) ||\n            {};\n        const reqOpts = {\n            method: 'PATCH',\n            uri: '',\n            ...methodConfig.reqOpts,\n            json: {\n                ...(_a = methodConfig.reqOpts) === null || _a === void 0 ? void 0 : _a.json,\n                ...metadata,\n            },\n            qs: {\n                ...(_b = methodConfig.reqOpts) === null || _b === void 0 ? void 0 : _b.qs,\n                ...options,\n            },\n        };\n        // The `request` method may have been overridden to hold any special\n        // behavior. Ensure we call the original `request` method.\n        ServiceObject.prototype.request.call(this, reqOpts, (err, body, res) => {\n            this.metadata = body;\n            callback(err, this.metadata, res);\n        });\n    }\n    request_(reqOpts, callback) {\n        reqOpts = { ...reqOpts };\n        if (this.projectId) {\n            reqOpts.projectId = this.projectId;\n        }\n        const isAbsoluteUrl = reqOpts.uri.indexOf('http') === 0;\n        const uriComponents = [this.baseUrl, this.id || '', reqOpts.uri];\n        if (isAbsoluteUrl) {\n            uriComponents.splice(0, uriComponents.indexOf(reqOpts.uri));\n        }\n        reqOpts.uri = uriComponents\n            .filter(x => x.trim()) // Limit to non-empty strings.\n            .map(uriComponent => {\n            const trimSlashesRegex = /^\\/*|\\/*$/g;\n            return uriComponent.replace(trimSlashesRegex, '');\n        })\n            .join('/');\n        const childInterceptors = Array.isArray(reqOpts.interceptors_)\n            ? reqOpts.interceptors_\n            : [];\n        const localInterceptors = [].slice.call(this.interceptors);\n        reqOpts.interceptors_ = childInterceptors.concat(localInterceptors);\n        if (reqOpts.shouldReturnStream) {\n            return this.parent.requestStream(reqOpts);\n        }\n        this.parent.request(reqOpts, callback);\n    }\n    request(reqOpts, callback) {\n        this.request_(reqOpts, callback);\n    }\n    /**\n     * Make an authenticated API request.\n     *\n     * @param {object} reqOpts - Request options that are passed to `request`.\n     * @param {string} reqOpts.uri - A URI relative to the baseUrl.\n     */\n    requestStream(reqOpts) {\n        const opts = { ...reqOpts, shouldReturnStream: true };\n        return this.request_(opts);\n    }\n}\n(0,_google_cloud_promisify__WEBPACK_IMPORTED_MODULE_0__.promisifyAll)(ServiceObject, { exclude: ['getRequestInterceptors'] });\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL2J1aWxkL2VzbS9zcmMvbm9kZWpzLWNvbW1vbi9zZXJ2aWNlLW9iamVjdC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ3VEO0FBQ2pCO0FBQ0o7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrREFBK0Q7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsZ0RBQVk7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVE7QUFDdkIsZUFBZSxTQUFTO0FBQ3hCO0FBQ0EsZUFBZSxTQUFTO0FBQ3hCLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQztBQUNyQyw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLDBDQUFJO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxvQ0FBb0MsMENBQUk7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQywwQ0FBSTtBQUNyQyx3Q0FBd0M7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLDBDQUFJO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsMENBQUk7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0EscUVBQVksa0JBQWtCLHFDQUFxQztBQUMxQyIsInNvdXJjZXMiOlsiL1VzZXJzL2x1Y2Fzc2FudG9zL0Rvd25sb2Fkcy92aXRyaW55LXdlYi1sbC9ub2RlX21vZHVsZXMvQGdvb2dsZS1jbG91ZC9zdG9yYWdlL2J1aWxkL2VzbS9zcmMvbm9kZWpzLWNvbW1vbi9zZXJ2aWNlLW9iamVjdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIENvcHlyaWdodCAyMDIyIEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgcHJvbWlzaWZ5QWxsIH0gZnJvbSAnQGdvb2dsZS1jbG91ZC9wcm9taXNpZnknO1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnZXZlbnRzJztcbmltcG9ydCB7IHV0aWwsIH0gZnJvbSAnLi91dGlsLmpzJztcbi8qKlxuICogU2VydmljZU9iamVjdCBpcyBhIGJhc2UgY2xhc3MsIG1lYW50IHRvIGJlIGluaGVyaXRlZCBmcm9tIGJ5IGEgXCJzZXJ2aWNlXG4gKiBvYmplY3QsXCIgbGlrZSBhIEJpZ1F1ZXJ5IGRhdGFzZXQgb3IgU3RvcmFnZSBidWNrZXQuXG4gKlxuICogTW9zdCBvZiB0aGUgdGltZSwgdGhlc2Ugb2JqZWN0cyBzaGFyZSBjb21tb24gZnVuY3Rpb25hbGl0eTsgdGhleSBjYW4gYmVcbiAqIGNyZWF0ZWQgb3IgZGVsZXRlZCwgYW5kIHlvdSBjYW4gZ2V0IG9yIHNldCB0aGVpciBtZXRhZGF0YS5cbiAqXG4gKiBCeSBpbmhlcml0aW5nIGZyb20gdGhpcyBjbGFzcywgYSBzZXJ2aWNlIG9iamVjdCB3aWxsIGJlIGV4dGVuZGVkIHdpdGggdGhlc2VcbiAqIHNoYXJlZCBiZWhhdmlvcnMuIE5vdGUgdGhhdCBhbnkgbWV0aG9kIGNhbiBiZSBvdmVycmlkZGVuIHdoZW4gdGhlIHNlcnZpY2VcbiAqIG9iamVjdCByZXF1aXJlcyBzcGVjaWZpYyBiZWhhdmlvci5cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmNsYXNzIFNlcnZpY2VPYmplY3QgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICAgIC8qXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQGFsaWFzIG1vZHVsZTpjb21tb24vc2VydmljZS1vYmplY3RcbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIC0gQ29uZmlndXJhdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbmZpZy5iYXNlVXJsIC0gVGhlIGJhc2UgVVJMIHRvIG1ha2UgQVBJIHJlcXVlc3RzIHRvLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb25maWcuY3JlYXRlTWV0aG9kIC0gVGhlIG1ldGhvZCB3aGljaCBjcmVhdGVzIHRoaXMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gY29uZmlnLmlkIC0gVGhlIGlkZW50aWZpZXIgb2YgdGhlIG9iamVjdC4gRm9yIGV4YW1wbGUsIHRoZVxuICAgICAqICAgICBuYW1lIG9mIGEgU3RvcmFnZSBidWNrZXQgb3IgUHViL1N1YiB0b3BpYy5cbiAgICAgKiBAcGFyYW0ge29iamVjdD19IGNvbmZpZy5tZXRob2RzIC0gQSBtYXAgb2YgZWFjaCBtZXRob2QgbmFtZSB0aGF0IHNob3VsZCBiZSBpbmhlcml0ZWQuXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZy5tZXRob2RzW10ucmVxT3B0cyAtIERlZmF1bHQgcmVxdWVzdCBvcHRpb25zIGZvciB0aGlzXG4gICAgICogICAgIHBhcnRpY3VsYXIgbWV0aG9kLiBBIGNvbW1vbiB1c2UgY2FzZSBpcyB3aGVuIGBzZXRNZXRhZGF0YWAgcmVxdWlyZXMgYVxuICAgICAqICAgICBgUFVUYCBtZXRob2QgdG8gb3ZlcnJpZGUgdGhlIGRlZmF1bHQgYFBBVENIYC5cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gY29uZmlnLnBhcmVudCAtIFRoZSBwYXJlbnQgc2VydmljZSBpbnN0YW5jZS4gRm9yIGV4YW1wbGUsIGFuXG4gICAgICogICAgIGluc3RhbmNlIG9mIFN0b3JhZ2UgaWYgdGhlIG9iamVjdCBpcyBCdWNrZXQuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMubWV0YWRhdGEgPSB7fTtcbiAgICAgICAgdGhpcy5iYXNlVXJsID0gY29uZmlnLmJhc2VVcmw7XG4gICAgICAgIHRoaXMucGFyZW50ID0gY29uZmlnLnBhcmVudDsgLy8gUGFyZW50IGNsYXNzLlxuICAgICAgICB0aGlzLmlkID0gY29uZmlnLmlkOyAvLyBOYW1lIG9yIElEIChlLmcuIGRhdGFzZXQgSUQsIGJ1Y2tldCBuYW1lLCBldGMpLlxuICAgICAgICB0aGlzLmNyZWF0ZU1ldGhvZCA9IGNvbmZpZy5jcmVhdGVNZXRob2Q7XG4gICAgICAgIHRoaXMubWV0aG9kcyA9IGNvbmZpZy5tZXRob2RzIHx8IHt9O1xuICAgICAgICB0aGlzLmludGVyY2VwdG9ycyA9IFtdO1xuICAgICAgICB0aGlzLnByb2plY3RJZCA9IGNvbmZpZy5wcm9qZWN0SWQ7XG4gICAgICAgIGlmIChjb25maWcubWV0aG9kcykge1xuICAgICAgICAgICAgLy8gVGhpcyBmaWx0ZXJzIHRoZSBTZXJ2aWNlT2JqZWN0IGluc3RhbmNlIChlLmcuIGEgXCJGaWxlXCIpIHRvIG9ubHkgaGF2ZVxuICAgICAgICAgICAgLy8gdGhlIGNvbmZpZ3VyZWQgbWV0aG9kcy4gV2UgbWFrZSBhIGNvdXBsZSBvZiBleGNlcHRpb25zIGZvciBjb3JlLVxuICAgICAgICAgICAgLy8gZnVuY3Rpb25hbGl0eSAoXCJyZXF1ZXN0KClcIiBhbmQgXCJnZXRSZXF1ZXN0SW50ZXJjZXB0b3JzKClcIilcbiAgICAgICAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKFNlcnZpY2VPYmplY3QucHJvdG90eXBlKVxuICAgICAgICAgICAgICAgIC5maWx0ZXIobWV0aG9kTmFtZSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAvLyBBbGwgU2VydmljZU9iamVjdHMgbmVlZCBgcmVxdWVzdGAgYW5kIGBnZXRSZXF1ZXN0SW50ZXJjZXB0b3JzYC5cbiAgICAgICAgICAgICAgICAvLyBjbGFuZy1mb3JtYXQgb2ZmXG4gICAgICAgICAgICAgICAgIS9ecmVxdWVzdC8udGVzdChtZXRob2ROYW1lKSAmJlxuICAgICAgICAgICAgICAgICAgICAhL15nZXRSZXF1ZXN0SW50ZXJjZXB0b3JzLy50ZXN0KG1ldGhvZE5hbWUpICYmXG4gICAgICAgICAgICAgICAgICAgIC8vIGNsYW5nLWZvcm1hdCBvblxuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgU2VydmljZU9iamVjdCBkaWRuJ3QgcmVkZWZpbmUgdGhlIG1ldGhvZC5cbiAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgICAgICAgICAgICAgdGhpc1ttZXRob2ROYW1lXSA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgICAgICAgICAgICAgICAgICBTZXJ2aWNlT2JqZWN0LnByb3RvdHlwZVttZXRob2ROYW1lXSAmJlxuICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIG1ldGhvZCBpc24ndCB3YW50ZWQuXG4gICAgICAgICAgICAgICAgICAgICFjb25maWcubWV0aG9kc1ttZXRob2ROYW1lXSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5mb3JFYWNoKG1ldGhvZE5hbWUgPT4ge1xuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgICAgICAgICAgdGhpc1ttZXRob2ROYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNyZWF0ZShvcHRpb25zT3JDYWxsYmFjaywgY2FsbGJhY2spIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby10aGlzLWFsaWFzXG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgICAgICBjb25zdCBhcmdzID0gW3RoaXMuaWRdO1xuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnNPckNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWxsYmFjayA9IG9wdGlvbnNPckNhbGxiYWNrO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9uc09yQ2FsbGJhY2sgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBhcmdzLnB1c2gob3B0aW9uc09yQ2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgICAgIC8vIFdyYXAgdGhlIGNhbGxiYWNrIHRvIHJldHVybiAqdGhpcyogaW5zdGFuY2Ugb2YgdGhlIG9iamVjdCwgbm90IHRoZVxuICAgICAgICAvLyBuZXdseS1jcmVhdGVkIG9uZS5cbiAgICAgICAgLy8gdHNsaW50OiBkaXNhYmxlLW5leHQtbGluZSBuby1hbnlcbiAgICAgICAgZnVuY3Rpb24gb25DcmVhdGUoLi4uYXJncykge1xuICAgICAgICAgICAgY29uc3QgW2VyciwgaW5zdGFuY2VdID0gYXJncztcbiAgICAgICAgICAgIGlmICghZXJyKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5tZXRhZGF0YSA9IGluc3RhbmNlLm1ldGFkYXRhO1xuICAgICAgICAgICAgICAgIGlmIChzZWxmLmlkICYmIGluc3RhbmNlLm1ldGFkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuaWQgPSBpbnN0YW5jZS5tZXRhZGF0YS5pZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYXJnc1sxXSA9IHNlbGY7IC8vIHJlcGxhY2UgdGhlIGNyZWF0ZWQgYGluc3RhbmNlYCB3aXRoIHRoaXMgb25lLlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FsbGJhY2soLi4uYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgYXJncy5wdXNoKG9uQ3JlYXRlKTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1zcHJlYWRcbiAgICAgICAgdGhpcy5jcmVhdGVNZXRob2QuYXBwbHkobnVsbCwgYXJncyk7XG4gICAgfVxuICAgIGRlbGV0ZShvcHRpb25zT3JDYWxsYmFjaywgY2IpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCBbb3B0aW9ucywgY2FsbGJhY2tdID0gdXRpbC5tYXliZU9wdGlvbnNPckNhbGxiYWNrKG9wdGlvbnNPckNhbGxiYWNrLCBjYik7XG4gICAgICAgIGNvbnN0IGlnbm9yZU5vdEZvdW5kID0gb3B0aW9ucy5pZ25vcmVOb3RGb3VuZDtcbiAgICAgICAgZGVsZXRlIG9wdGlvbnMuaWdub3JlTm90Rm91bmQ7XG4gICAgICAgIGNvbnN0IG1ldGhvZENvbmZpZyA9ICh0eXBlb2YgdGhpcy5tZXRob2RzLmRlbGV0ZSA9PT0gJ29iamVjdCcgJiYgdGhpcy5tZXRob2RzLmRlbGV0ZSkgfHwge307XG4gICAgICAgIGNvbnN0IHJlcU9wdHMgPSB7XG4gICAgICAgICAgICBtZXRob2Q6ICdERUxFVEUnLFxuICAgICAgICAgICAgdXJpOiAnJyxcbiAgICAgICAgICAgIC4uLm1ldGhvZENvbmZpZy5yZXFPcHRzLFxuICAgICAgICAgICAgcXM6IHtcbiAgICAgICAgICAgICAgICAuLi4oX2EgPSBtZXRob2RDb25maWcucmVxT3B0cykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnFzLFxuICAgICAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgICAvLyBUaGUgYHJlcXVlc3RgIG1ldGhvZCBtYXkgaGF2ZSBiZWVuIG92ZXJyaWRkZW4gdG8gaG9sZCBhbnkgc3BlY2lhbFxuICAgICAgICAvLyBiZWhhdmlvci4gRW5zdXJlIHdlIGNhbGwgdGhlIG9yaWdpbmFsIGByZXF1ZXN0YCBtZXRob2QuXG4gICAgICAgIFNlcnZpY2VPYmplY3QucHJvdG90eXBlLnJlcXVlc3QuY2FsbCh0aGlzLCByZXFPcHRzLCAoZXJyLCBib2R5LCByZXMpID0+IHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyLmNvZGUgPT09IDQwNCAmJiBpZ25vcmVOb3RGb3VuZCkge1xuICAgICAgICAgICAgICAgICAgICBlcnIgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhbGxiYWNrKGVyciwgcmVzKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGV4aXN0cyhvcHRpb25zT3JDYWxsYmFjaywgY2IpIHtcbiAgICAgICAgY29uc3QgW29wdGlvbnMsIGNhbGxiYWNrXSA9IHV0aWwubWF5YmVPcHRpb25zT3JDYWxsYmFjayhvcHRpb25zT3JDYWxsYmFjaywgY2IpO1xuICAgICAgICB0aGlzLmdldChvcHRpb25zLCBlcnIgPT4ge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIGlmIChlcnIuY29kZSA9PT0gNDA0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHRydWUpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0KG9wdGlvbnNPckNhbGxiYWNrLCBjYikge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXRoaXMtYWxpYXNcbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgICAgIGNvbnN0IFtvcHRzLCBjYWxsYmFja10gPSB1dGlsLm1heWJlT3B0aW9uc09yQ2FsbGJhY2sob3B0aW9uc09yQ2FsbGJhY2ssIGNiKTtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIG9wdHMpO1xuICAgICAgICBjb25zdCBhdXRvQ3JlYXRlID0gb3B0aW9ucy5hdXRvQ3JlYXRlICYmIHR5cGVvZiB0aGlzLmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJztcbiAgICAgICAgZGVsZXRlIG9wdGlvbnMuYXV0b0NyZWF0ZTtcbiAgICAgICAgZnVuY3Rpb24gb25DcmVhdGUoZXJyLCBpbnN0YW5jZSwgYXBpUmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyLmNvZGUgPT09IDQwOSkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmdldChvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyLCBudWxsLCBhcGlSZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgaW5zdGFuY2UsIGFwaVJlc3BvbnNlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmdldE1ldGFkYXRhKG9wdGlvbnMsIChlcnIsIG1ldGFkYXRhKSA9PiB7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVyci5jb2RlID09PSA0MDQgJiYgYXV0b0NyZWF0ZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhcmdzID0gW107XG4gICAgICAgICAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhvcHRpb25zKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzLnB1c2gob3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYXJncy5wdXNoKG9uQ3JlYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5jcmVhdGUoLi4uYXJncyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyLCBudWxsLCBtZXRhZGF0YSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgc2VsZiwgbWV0YWRhdGEpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0TWV0YWRhdGEob3B0aW9uc09yQ2FsbGJhY2ssIGNiKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3QgW29wdGlvbnMsIGNhbGxiYWNrXSA9IHV0aWwubWF5YmVPcHRpb25zT3JDYWxsYmFjayhvcHRpb25zT3JDYWxsYmFjaywgY2IpO1xuICAgICAgICBjb25zdCBtZXRob2RDb25maWcgPSAodHlwZW9mIHRoaXMubWV0aG9kcy5nZXRNZXRhZGF0YSA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgIHRoaXMubWV0aG9kcy5nZXRNZXRhZGF0YSkgfHxcbiAgICAgICAgICAgIHt9O1xuICAgICAgICBjb25zdCByZXFPcHRzID0ge1xuICAgICAgICAgICAgdXJpOiAnJyxcbiAgICAgICAgICAgIC4uLm1ldGhvZENvbmZpZy5yZXFPcHRzLFxuICAgICAgICAgICAgcXM6IHtcbiAgICAgICAgICAgICAgICAuLi4oX2EgPSBtZXRob2RDb25maWcucmVxT3B0cykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnFzLFxuICAgICAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgICAvLyBUaGUgYHJlcXVlc3RgIG1ldGhvZCBtYXkgaGF2ZSBiZWVuIG92ZXJyaWRkZW4gdG8gaG9sZCBhbnkgc3BlY2lhbFxuICAgICAgICAvLyBiZWhhdmlvci4gRW5zdXJlIHdlIGNhbGwgdGhlIG9yaWdpbmFsIGByZXF1ZXN0YCBtZXRob2QuXG4gICAgICAgIFNlcnZpY2VPYmplY3QucHJvdG90eXBlLnJlcXVlc3QuY2FsbCh0aGlzLCByZXFPcHRzLCAoZXJyLCBib2R5LCByZXMpID0+IHtcbiAgICAgICAgICAgIHRoaXMubWV0YWRhdGEgPSBib2R5O1xuICAgICAgICAgICAgY2FsbGJhY2soZXJyLCB0aGlzLm1ldGFkYXRhLCByZXMpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJuIHRoZSB1c2VyJ3MgY3VzdG9tIHJlcXVlc3QgaW50ZXJjZXB0b3JzLlxuICAgICAqL1xuICAgIGdldFJlcXVlc3RJbnRlcmNlcHRvcnMoKSB7XG4gICAgICAgIC8vIEludGVyY2VwdG9ycyBzaG91bGQgYmUgcmV0dXJuZWQgaW4gdGhlIG9yZGVyIHRoZXkgd2VyZSBhc3NpZ25lZC5cbiAgICAgICAgY29uc3QgbG9jYWxJbnRlcmNlcHRvcnMgPSB0aGlzLmludGVyY2VwdG9yc1xuICAgICAgICAgICAgLmZpbHRlcihpbnRlcmNlcHRvciA9PiB0eXBlb2YgaW50ZXJjZXB0b3IucmVxdWVzdCA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgIC5tYXAoaW50ZXJjZXB0b3IgPT4gaW50ZXJjZXB0b3IucmVxdWVzdCk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcmVudC5nZXRSZXF1ZXN0SW50ZXJjZXB0b3JzKCkuY29uY2F0KGxvY2FsSW50ZXJjZXB0b3JzKTtcbiAgICB9XG4gICAgc2V0TWV0YWRhdGEobWV0YWRhdGEsIG9wdGlvbnNPckNhbGxiYWNrLCBjYikge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBjb25zdCBbb3B0aW9ucywgY2FsbGJhY2tdID0gdXRpbC5tYXliZU9wdGlvbnNPckNhbGxiYWNrKG9wdGlvbnNPckNhbGxiYWNrLCBjYik7XG4gICAgICAgIGNvbnN0IG1ldGhvZENvbmZpZyA9ICh0eXBlb2YgdGhpcy5tZXRob2RzLnNldE1ldGFkYXRhID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAgICAgdGhpcy5tZXRob2RzLnNldE1ldGFkYXRhKSB8fFxuICAgICAgICAgICAge307XG4gICAgICAgIGNvbnN0IHJlcU9wdHMgPSB7XG4gICAgICAgICAgICBtZXRob2Q6ICdQQVRDSCcsXG4gICAgICAgICAgICB1cmk6ICcnLFxuICAgICAgICAgICAgLi4ubWV0aG9kQ29uZmlnLnJlcU9wdHMsXG4gICAgICAgICAgICBqc29uOiB7XG4gICAgICAgICAgICAgICAgLi4uKF9hID0gbWV0aG9kQ29uZmlnLnJlcU9wdHMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5qc29uLFxuICAgICAgICAgICAgICAgIC4uLm1ldGFkYXRhLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHFzOiB7XG4gICAgICAgICAgICAgICAgLi4uKF9iID0gbWV0aG9kQ29uZmlnLnJlcU9wdHMpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5xcyxcbiAgICAgICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgLy8gVGhlIGByZXF1ZXN0YCBtZXRob2QgbWF5IGhhdmUgYmVlbiBvdmVycmlkZGVuIHRvIGhvbGQgYW55IHNwZWNpYWxcbiAgICAgICAgLy8gYmVoYXZpb3IuIEVuc3VyZSB3ZSBjYWxsIHRoZSBvcmlnaW5hbCBgcmVxdWVzdGAgbWV0aG9kLlxuICAgICAgICBTZXJ2aWNlT2JqZWN0LnByb3RvdHlwZS5yZXF1ZXN0LmNhbGwodGhpcywgcmVxT3B0cywgKGVyciwgYm9keSwgcmVzKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm1ldGFkYXRhID0gYm9keTtcbiAgICAgICAgICAgIGNhbGxiYWNrKGVyciwgdGhpcy5tZXRhZGF0YSwgcmVzKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJlcXVlc3RfKHJlcU9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHJlcU9wdHMgPSB7IC4uLnJlcU9wdHMgfTtcbiAgICAgICAgaWYgKHRoaXMucHJvamVjdElkKSB7XG4gICAgICAgICAgICByZXFPcHRzLnByb2plY3RJZCA9IHRoaXMucHJvamVjdElkO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGlzQWJzb2x1dGVVcmwgPSByZXFPcHRzLnVyaS5pbmRleE9mKCdodHRwJykgPT09IDA7XG4gICAgICAgIGNvbnN0IHVyaUNvbXBvbmVudHMgPSBbdGhpcy5iYXNlVXJsLCB0aGlzLmlkIHx8ICcnLCByZXFPcHRzLnVyaV07XG4gICAgICAgIGlmIChpc0Fic29sdXRlVXJsKSB7XG4gICAgICAgICAgICB1cmlDb21wb25lbnRzLnNwbGljZSgwLCB1cmlDb21wb25lbnRzLmluZGV4T2YocmVxT3B0cy51cmkpKTtcbiAgICAgICAgfVxuICAgICAgICByZXFPcHRzLnVyaSA9IHVyaUNvbXBvbmVudHNcbiAgICAgICAgICAgIC5maWx0ZXIoeCA9PiB4LnRyaW0oKSkgLy8gTGltaXQgdG8gbm9uLWVtcHR5IHN0cmluZ3MuXG4gICAgICAgICAgICAubWFwKHVyaUNvbXBvbmVudCA9PiB7XG4gICAgICAgICAgICBjb25zdCB0cmltU2xhc2hlc1JlZ2V4ID0gL15cXC8qfFxcLyokL2c7XG4gICAgICAgICAgICByZXR1cm4gdXJpQ29tcG9uZW50LnJlcGxhY2UodHJpbVNsYXNoZXNSZWdleCwgJycpO1xuICAgICAgICB9KVxuICAgICAgICAgICAgLmpvaW4oJy8nKTtcbiAgICAgICAgY29uc3QgY2hpbGRJbnRlcmNlcHRvcnMgPSBBcnJheS5pc0FycmF5KHJlcU9wdHMuaW50ZXJjZXB0b3JzXylcbiAgICAgICAgICAgID8gcmVxT3B0cy5pbnRlcmNlcHRvcnNfXG4gICAgICAgICAgICA6IFtdO1xuICAgICAgICBjb25zdCBsb2NhbEludGVyY2VwdG9ycyA9IFtdLnNsaWNlLmNhbGwodGhpcy5pbnRlcmNlcHRvcnMpO1xuICAgICAgICByZXFPcHRzLmludGVyY2VwdG9yc18gPSBjaGlsZEludGVyY2VwdG9ycy5jb25jYXQobG9jYWxJbnRlcmNlcHRvcnMpO1xuICAgICAgICBpZiAocmVxT3B0cy5zaG91bGRSZXR1cm5TdHJlYW0pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcmVudC5yZXF1ZXN0U3RyZWFtKHJlcU9wdHMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucGFyZW50LnJlcXVlc3QocmVxT3B0cywgY2FsbGJhY2spO1xuICAgIH1cbiAgICByZXF1ZXN0KHJlcU9wdHMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMucmVxdWVzdF8ocmVxT3B0cywgY2FsbGJhY2spO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNYWtlIGFuIGF1dGhlbnRpY2F0ZWQgQVBJIHJlcXVlc3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcmVxT3B0cyAtIFJlcXVlc3Qgb3B0aW9ucyB0aGF0IGFyZSBwYXNzZWQgdG8gYHJlcXVlc3RgLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSByZXFPcHRzLnVyaSAtIEEgVVJJIHJlbGF0aXZlIHRvIHRoZSBiYXNlVXJsLlxuICAgICAqL1xuICAgIHJlcXVlc3RTdHJlYW0ocmVxT3B0cykge1xuICAgICAgICBjb25zdCBvcHRzID0geyAuLi5yZXFPcHRzLCBzaG91bGRSZXR1cm5TdHJlYW06IHRydWUgfTtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdF8ob3B0cyk7XG4gICAgfVxufVxucHJvbWlzaWZ5QWxsKFNlcnZpY2VPYmplY3QsIHsgZXhjbHVkZTogWydnZXRSZXF1ZXN0SW50ZXJjZXB0b3JzJ10gfSk7XG5leHBvcnQgeyBTZXJ2aWNlT2JqZWN0IH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/build/esm/src/nodejs-common/service-object.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/build/esm/src/nodejs-common/service.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/build/esm/src/nodejs-common/service.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_PROJECT_ID_TOKEN: () => (/* binding */ DEFAULT_PROJECT_ID_TOKEN),\n/* harmony export */   Service: () => (/* binding */ Service)\n/* harmony export */ });\n/* harmony import */ var google_auth_library__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! google-auth-library */ \"(rsc)/./node_modules/google-auth-library/build/src/index.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/nodejs-common/util.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/util.js\");\n/*!\n * Copyright 2022 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\nconst DEFAULT_PROJECT_ID_TOKEN = '{{projectId}}';\nclass Service {\n    /**\n     * Service is a base class, meant to be inherited from by a \"service,\" like\n     * BigQuery or Storage.\n     *\n     * This handles making authenticated requests by exposing a `makeReq_`\n     * function.\n     *\n     * @constructor\n     * @alias module:common/service\n     *\n     * @param {object} config - Configuration object.\n     * @param {string} config.baseUrl - The base URL to make API requests to.\n     * @param {string[]} config.scopes - The scopes required for the request.\n     * @param {object=} options - [Configuration object](#/docs).\n     */\n    constructor(config, options = {}) {\n        this.baseUrl = config.baseUrl;\n        this.apiEndpoint = config.apiEndpoint;\n        this.timeout = options.timeout;\n        this.globalInterceptors = Array.isArray(options.interceptors_)\n            ? options.interceptors_\n            : [];\n        this.interceptors = [];\n        this.packageJson = config.packageJson;\n        this.projectId = options.projectId || DEFAULT_PROJECT_ID_TOKEN;\n        this.projectIdRequired = config.projectIdRequired !== false;\n        this.providedUserAgent = options.userAgent;\n        this.universeDomain = options.universeDomain || google_auth_library__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_UNIVERSE;\n        this.customEndpoint = config.customEndpoint || false;\n        this.makeAuthenticatedRequest = _util_js__WEBPACK_IMPORTED_MODULE_1__.util.makeAuthenticatedRequestFactory({\n            ...config,\n            projectIdRequired: this.projectIdRequired,\n            projectId: this.projectId,\n            authClient: options.authClient || config.authClient,\n            credentials: options.credentials,\n            keyFile: options.keyFilename,\n            email: options.email,\n            clientOptions: {\n                universeDomain: options.universeDomain,\n                ...options.clientOptions,\n            },\n        });\n        this.authClient = this.makeAuthenticatedRequest.authClient;\n        const isCloudFunctionEnv = !!process.env.FUNCTION_NAME;\n        if (isCloudFunctionEnv) {\n            this.interceptors.push({\n                request(reqOpts) {\n                    reqOpts.forever = false;\n                    return reqOpts;\n                },\n            });\n        }\n    }\n    /**\n     * Return the user's custom request interceptors.\n     */\n    getRequestInterceptors() {\n        // Interceptors should be returned in the order they were assigned.\n        return [].slice\n            .call(this.globalInterceptors)\n            .concat(this.interceptors)\n            .filter(interceptor => typeof interceptor.request === 'function')\n            .map(interceptor => interceptor.request);\n    }\n    getProjectId(callback) {\n        if (!callback) {\n            return this.getProjectIdAsync();\n        }\n        this.getProjectIdAsync().then(p => callback(null, p), callback);\n    }\n    async getProjectIdAsync() {\n        const projectId = await this.authClient.getProjectId();\n        if (this.projectId === DEFAULT_PROJECT_ID_TOKEN && projectId) {\n            this.projectId = projectId;\n        }\n        return this.projectId;\n    }\n    request_(reqOpts, callback) {\n        reqOpts = { ...reqOpts, timeout: this.timeout };\n        const isAbsoluteUrl = reqOpts.uri.indexOf('http') === 0;\n        const uriComponents = [this.baseUrl];\n        if (this.projectIdRequired) {\n            if (reqOpts.projectId) {\n                uriComponents.push('projects');\n                uriComponents.push(reqOpts.projectId);\n            }\n            else {\n                uriComponents.push('projects');\n                uriComponents.push(this.projectId);\n            }\n        }\n        uriComponents.push(reqOpts.uri);\n        if (isAbsoluteUrl) {\n            uriComponents.splice(0, uriComponents.indexOf(reqOpts.uri));\n        }\n        reqOpts.uri = uriComponents\n            .map(uriComponent => {\n            const trimSlashesRegex = /^\\/*|\\/*$/g;\n            return uriComponent.replace(trimSlashesRegex, '');\n        })\n            .join('/')\n            // Some URIs have colon separators.\n            // Bad: https://.../projects/:list\n            // Good: https://.../projects:list\n            .replace(/\\/:/g, ':');\n        const requestInterceptors = this.getRequestInterceptors();\n        const interceptorArray = Array.isArray(reqOpts.interceptors_)\n            ? reqOpts.interceptors_\n            : [];\n        interceptorArray.forEach(interceptor => {\n            if (typeof interceptor.request === 'function') {\n                requestInterceptors.push(interceptor.request);\n            }\n        });\n        requestInterceptors.forEach(requestInterceptor => {\n            reqOpts = requestInterceptor(reqOpts);\n        });\n        delete reqOpts.interceptors_;\n        const pkg = this.packageJson;\n        let userAgent = (0,_util_js__WEBPACK_IMPORTED_MODULE_2__.getUserAgentString)();\n        if (this.providedUserAgent) {\n            userAgent = `${this.providedUserAgent} ${userAgent}`;\n        }\n        reqOpts.headers = {\n            ...reqOpts.headers,\n            'User-Agent': userAgent,\n            'x-goog-api-client': `${(0,_util_js__WEBPACK_IMPORTED_MODULE_2__.getRuntimeTrackingString)()} gccl/${pkg.version}-${(0,_util_js__WEBPACK_IMPORTED_MODULE_2__.getModuleFormat)()} gccl-invocation-id/${uuid__WEBPACK_IMPORTED_MODULE_3__[\"default\"]()}`,\n        };\n        if (reqOpts[_util_js__WEBPACK_IMPORTED_MODULE_1__.GCCL_GCS_CMD_KEY]) {\n            reqOpts.headers['x-goog-api-client'] +=\n                ` gccl-gcs-cmd/${reqOpts[_util_js__WEBPACK_IMPORTED_MODULE_1__.GCCL_GCS_CMD_KEY]}`;\n        }\n        if (reqOpts.shouldReturnStream) {\n            return this.makeAuthenticatedRequest(reqOpts);\n        }\n        else {\n            this.makeAuthenticatedRequest(reqOpts, callback);\n        }\n    }\n    /**\n     * Make an authenticated API request.\n     *\n     * @param {object} reqOpts - Request options that are passed to `request`.\n     * @param {string} reqOpts.uri - A URI relative to the baseUrl.\n     * @param {function} callback - The callback function passed to `request`.\n     */\n    request(reqOpts, callback) {\n        Service.prototype.request_.call(this, reqOpts, callback);\n    }\n    /**\n     * Make an authenticated API request.\n     *\n     * @param {object} reqOpts - Request options that are passed to `request`.\n     * @param {string} reqOpts.uri - A URI relative to the baseUrl.\n     */\n    requestStream(reqOpts) {\n        const opts = { ...reqOpts, shouldReturnStream: true };\n        return Service.prototype.request_.call(this, opts);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/build/esm/src/nodejs-common/service.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/build/esm/src/nodejs-common/util.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/build/esm/src/nodejs-common/util.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApiError: () => (/* binding */ ApiError),\n/* harmony export */   GCCL_GCS_CMD_KEY: () => (/* binding */ GCCL_GCS_CMD_KEY),\n/* harmony export */   PartialFailureError: () => (/* binding */ PartialFailureError),\n/* harmony export */   Util: () => (/* binding */ Util),\n/* harmony export */   util: () => (/* binding */ util)\n/* harmony export */ });\n/* harmony import */ var _google_cloud_projectify__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @google-cloud/projectify */ \"(rsc)/./node_modules/@google-cloud/projectify/build/src/index.js\");\n/* harmony import */ var html_entities__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! html-entities */ \"(rsc)/./node_modules/html-entities/dist/esm/index.js\");\n/* harmony import */ var google_auth_library__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! google-auth-library */ \"(rsc)/./node_modules/google-auth-library/build/src/index.js\");\n/* harmony import */ var retry_request__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! retry-request */ \"(rsc)/./node_modules/retry-request/index.js\");\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! stream */ \"stream\");\n/* harmony import */ var teeny_request__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! teeny-request */ \"(rsc)/./node_modules/teeny-request/build/src/index.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var _service_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./service.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/nodejs-common/service.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../util.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/util.js\");\n/* harmony import */ var duplexify__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! duplexify */ \"(rsc)/./node_modules/duplexify/index.js\");\n/* harmony import */ var _package_json_helper_cjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../package-json-helper.cjs */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/package-json-helper.cjs\");\n/*!\n * Copyright 2022 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*!\n * @module common/util\n */\n\n\n\n\n\n\n\n\n\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\n\nconst packageJson = (0,_package_json_helper_cjs__WEBPACK_IMPORTED_MODULE_9__.getPackageJSON)();\n/**\n * A unique symbol for providing a `gccl-gcs-cmd` value\n * for the `X-Goog-API-Client` header.\n *\n * E.g. the `V` in `X-Goog-API-Client: gccl-gcs-cmd/V`\n **/\nconst GCCL_GCS_CMD_KEY = Symbol.for('GCCL_GCS_CMD');\nconst requestDefaults = {\n    timeout: 60000,\n    gzip: true,\n    forever: true,\n    pool: {\n        maxSockets: Infinity,\n    },\n};\n/**\n * Default behavior: Automatically retry retriable server errors.\n *\n * @const {boolean}\n * @private\n */\nconst AUTO_RETRY_DEFAULT = true;\n/**\n * Default behavior: Only attempt to retry retriable errors 3 times.\n *\n * @const {number}\n * @private\n */\nconst MAX_RETRY_DEFAULT = 3;\n/**\n * Custom error type for API errors.\n *\n * @param {object} errorBody - Error object.\n */\nclass ApiError extends Error {\n    constructor(errorBodyOrMessage) {\n        super();\n        if (typeof errorBodyOrMessage !== 'object') {\n            this.message = errorBodyOrMessage || '';\n            return;\n        }\n        const errorBody = errorBodyOrMessage;\n        this.code = errorBody.code;\n        this.errors = errorBody.errors;\n        this.response = errorBody.response;\n        try {\n            this.errors = JSON.parse(this.response.body).error.errors;\n        }\n        catch (e) {\n            this.errors = errorBody.errors;\n        }\n        this.message = ApiError.createMultiErrorMessage(errorBody, this.errors);\n        Error.captureStackTrace(this);\n    }\n    /**\n     * Pieces together an error message by combining all unique error messages\n     * returned from a single GoogleError\n     *\n     * @private\n     *\n     * @param {GoogleErrorBody} err The original error.\n     * @param {GoogleInnerError[]} [errors] Inner errors, if any.\n     * @returns {string}\n     */\n    static createMultiErrorMessage(err, errors) {\n        const messages = new Set();\n        if (err.message) {\n            messages.add(err.message);\n        }\n        if (errors && errors.length) {\n            errors.forEach(({ message }) => messages.add(message));\n        }\n        else if (err.response && err.response.body) {\n            messages.add(html_entities__WEBPACK_IMPORTED_MODULE_1__.decode(err.response.body.toString()));\n        }\n        else if (!err.message) {\n            messages.add('A failure occurred during this request.');\n        }\n        let messageArr = Array.from(messages);\n        if (messageArr.length > 1) {\n            messageArr = messageArr.map((message, i) => `    ${i + 1}. ${message}`);\n            messageArr.unshift('Multiple errors occurred during the request. Please see the `errors` array for complete details.\\n');\n            messageArr.push('\\n');\n        }\n        return messageArr.join('\\n');\n    }\n}\n/**\n * Custom error type for partial errors returned from the API.\n *\n * @param {object} b - Error object.\n */\nclass PartialFailureError extends Error {\n    constructor(b) {\n        super();\n        const errorObject = b;\n        this.errors = errorObject.errors;\n        this.name = 'PartialFailureError';\n        this.response = errorObject.response;\n        this.message = ApiError.createMultiErrorMessage(errorObject, this.errors);\n    }\n}\nclass Util {\n    constructor() {\n        this.ApiError = ApiError;\n        this.PartialFailureError = PartialFailureError;\n    }\n    /**\n     * No op.\n     *\n     * @example\n     * function doSomething(callback) {\n     *   callback = callback || noop;\n     * }\n     */\n    noop() { }\n    /**\n     * Uniformly process an API response.\n     *\n     * @param {*} err - Error value.\n     * @param {*} resp - Response value.\n     * @param {*} body - Body value.\n     * @param {function} callback - The callback function.\n     */\n    handleResp(err, resp, body, callback) {\n        callback = callback || util.noop;\n        const parsedResp = {\n            err: err || null,\n            ...(resp && util.parseHttpRespMessage(resp)),\n            ...(body && util.parseHttpRespBody(body)),\n        };\n        // Assign the parsed body to resp.body, even if { json: false } was passed\n        // as a request option.\n        // We assume that nobody uses the previously unparsed value of resp.body.\n        if (!parsedResp.err && resp && typeof parsedResp.body === 'object') {\n            parsedResp.resp.body = parsedResp.body;\n        }\n        if (parsedResp.err && resp) {\n            parsedResp.err.response = resp;\n        }\n        callback(parsedResp.err, parsedResp.body, parsedResp.resp);\n    }\n    /**\n     * Sniff an incoming HTTP response message for errors.\n     *\n     * @param {object} httpRespMessage - An incoming HTTP response message from `request`.\n     * @return {object} parsedHttpRespMessage - The parsed response.\n     * @param {?error} parsedHttpRespMessage.err - An error detected.\n     * @param {object} parsedHttpRespMessage.resp - The original response object.\n     */\n    parseHttpRespMessage(httpRespMessage) {\n        const parsedHttpRespMessage = {\n            resp: httpRespMessage,\n        };\n        if (httpRespMessage.statusCode < 200 || httpRespMessage.statusCode > 299) {\n            // Unknown error. Format according to ApiError standard.\n            parsedHttpRespMessage.err = new ApiError({\n                errors: new Array(),\n                code: httpRespMessage.statusCode,\n                message: httpRespMessage.statusMessage,\n                response: httpRespMessage,\n            });\n        }\n        return parsedHttpRespMessage;\n    }\n    /**\n     * Parse the response body from an HTTP request.\n     *\n     * @param {object} body - The response body.\n     * @return {object} parsedHttpRespMessage - The parsed response.\n     * @param {?error} parsedHttpRespMessage.err - An error detected.\n     * @param {object} parsedHttpRespMessage.body - The original body value provided\n     *     will try to be JSON.parse'd. If it's successful, the parsed value will\n     * be returned here, otherwise the original value and an error will be returned.\n     */\n    parseHttpRespBody(body) {\n        const parsedHttpRespBody = {\n            body,\n        };\n        if (typeof body === 'string') {\n            try {\n                parsedHttpRespBody.body = JSON.parse(body);\n            }\n            catch (err) {\n                parsedHttpRespBody.body = body;\n            }\n        }\n        if (parsedHttpRespBody.body && parsedHttpRespBody.body.error) {\n            // Error from JSON API.\n            parsedHttpRespBody.err = new ApiError(parsedHttpRespBody.body.error);\n        }\n        return parsedHttpRespBody;\n    }\n    /**\n     * Take a Duplexify stream, fetch an authenticated connection header, and\n     * create an outgoing writable stream.\n     *\n     * @param {Duplexify} dup - Duplexify stream.\n     * @param {object} options - Configuration object.\n     * @param {module:common/connection} options.connection - A connection instance used to get a token with and send the request through.\n     * @param {object} options.metadata - Metadata to send at the head of the request.\n     * @param {object} options.request - Request object, in the format of a standard Node.js http.request() object.\n     * @param {string=} options.request.method - Default: \"POST\".\n     * @param {string=} options.request.qs.uploadType - Default: \"multipart\".\n     * @param {string=} options.streamContentType - Default: \"application/octet-stream\".\n     * @param {function} onComplete - Callback, executed after the writable Request stream has completed.\n     */\n    makeWritableStream(dup, options, onComplete) {\n        var _a;\n        onComplete = onComplete || util.noop;\n        const writeStream = new ProgressStream();\n        writeStream.on('progress', evt => dup.emit('progress', evt));\n        dup.setWritable(writeStream);\n        const defaultReqOpts = {\n            method: 'POST',\n            qs: {\n                uploadType: 'multipart',\n            },\n            timeout: 0,\n            maxRetries: 0,\n        };\n        const metadata = options.metadata || {};\n        const reqOpts = {\n            ...defaultReqOpts,\n            ...options.request,\n            qs: {\n                ...defaultReqOpts.qs,\n                ...(_a = options.request) === null || _a === void 0 ? void 0 : _a.qs,\n            },\n            multipart: [\n                {\n                    'Content-Type': 'application/json',\n                    body: JSON.stringify(metadata),\n                },\n                {\n                    'Content-Type': metadata.contentType || 'application/octet-stream',\n                    body: writeStream,\n                },\n            ],\n        };\n        options.makeAuthenticatedRequest(reqOpts, {\n            onAuthenticated(err, authenticatedReqOpts) {\n                if (err) {\n                    dup.destroy(err);\n                    return;\n                }\n                requestDefaults.headers = util._getDefaultHeaders(reqOpts[GCCL_GCS_CMD_KEY]);\n                const request = teeny_request__WEBPACK_IMPORTED_MODULE_5__.teenyRequest.defaults(requestDefaults);\n                request(authenticatedReqOpts, (err, resp, body) => {\n                    util.handleResp(err, resp, body, (err, data) => {\n                        if (err) {\n                            dup.destroy(err);\n                            return;\n                        }\n                        dup.emit('response', resp);\n                        onComplete(data);\n                    });\n                });\n            },\n        });\n    }\n    /**\n     * Returns true if the API request should be retried, given the error that was\n     * given the first time the request was attempted. This is used for rate limit\n     * related errors as well as intermittent server errors.\n     *\n     * @param {error} err - The API error to check if it is appropriate to retry.\n     * @return {boolean} True if the API request should be retried, false otherwise.\n     */\n    shouldRetryRequest(err) {\n        if (err) {\n            if ([408, 429, 500, 502, 503, 504].indexOf(err.code) !== -1) {\n                return true;\n            }\n            if (err.errors) {\n                for (const e of err.errors) {\n                    const reason = e.reason;\n                    if (reason === 'rateLimitExceeded') {\n                        return true;\n                    }\n                    if (reason === 'userRateLimitExceeded') {\n                        return true;\n                    }\n                    if (reason && reason.includes('EAI_AGAIN')) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n    /**\n     * Get a function for making authenticated requests.\n     *\n     * @param {object} config - Configuration object.\n     * @param {boolean=} config.autoRetry - Automatically retry requests if the\n     *     response is related to rate limits or certain intermittent server\n     * errors. We will exponentially backoff subsequent requests by default.\n     * (default: true)\n     * @param {object=} config.credentials - Credentials object.\n     * @param {boolean=} config.customEndpoint - If true, just return the provided request options. Default: false.\n     * @param {boolean=} config.useAuthWithCustomEndpoint - If true, will authenticate when using a custom endpoint. Default: false.\n     * @param {string=} config.email - Account email address, required for PEM/P12 usage.\n     * @param {number=} config.maxRetries - Maximum number of automatic retries attempted before returning the error. (default: 3)\n     * @param {string=} config.keyFile - Path to a .json, .pem, or .p12 keyfile.\n     * @param {array} config.scopes - Array of scopes required for the API.\n     */\n    makeAuthenticatedRequestFactory(config) {\n        const googleAutoAuthConfig = { ...config };\n        if (googleAutoAuthConfig.projectId === _service_js__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_PROJECT_ID_TOKEN) {\n            delete googleAutoAuthConfig.projectId;\n        }\n        let authClient;\n        if (googleAutoAuthConfig.authClient instanceof google_auth_library__WEBPACK_IMPORTED_MODULE_2__.GoogleAuth) {\n            // Use an existing `GoogleAuth`\n            authClient = googleAutoAuthConfig.authClient;\n        }\n        else {\n            // Pass an `AuthClient` & `clientOptions` to `GoogleAuth`, if available\n            authClient = new google_auth_library__WEBPACK_IMPORTED_MODULE_2__.GoogleAuth({\n                ...googleAutoAuthConfig,\n                authClient: googleAutoAuthConfig.authClient,\n                clientOptions: googleAutoAuthConfig.clientOptions,\n            });\n        }\n        function makeAuthenticatedRequest(reqOpts, optionsOrCallback) {\n            let stream;\n            let projectId;\n            const reqConfig = { ...config };\n            let activeRequest_;\n            if (!optionsOrCallback) {\n                stream = duplexify__WEBPACK_IMPORTED_MODULE_8__();\n                reqConfig.stream = stream;\n            }\n            const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : undefined;\n            const callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : undefined;\n            async function setProjectId() {\n                projectId = await authClient.getProjectId();\n            }\n            const onAuthenticated = async (err, authenticatedReqOpts) => {\n                const authLibraryError = err;\n                const autoAuthFailed = err &&\n                    typeof err.message === 'string' &&\n                    err.message.indexOf('Could not load the default credentials') > -1;\n                if (autoAuthFailed) {\n                    // Even though authentication failed, the API might not actually\n                    // care.\n                    authenticatedReqOpts = reqOpts;\n                }\n                if (!err || autoAuthFailed) {\n                    try {\n                        // Try with existing `projectId` value\n                        authenticatedReqOpts = util.decorateRequest(authenticatedReqOpts, projectId);\n                        err = null;\n                    }\n                    catch (e) {\n                        if (e instanceof _google_cloud_projectify__WEBPACK_IMPORTED_MODULE_0__.MissingProjectIdError) {\n                            // A `projectId` was required, but we don't have one.\n                            try {\n                                // Attempt to get the `projectId`\n                                await setProjectId();\n                                authenticatedReqOpts = util.decorateRequest(authenticatedReqOpts, projectId);\n                                err = null;\n                            }\n                            catch (e) {\n                                // Re-use the \"Could not load the default credentials error\" if\n                                // auto auth failed.\n                                err = err || e;\n                            }\n                        }\n                        else {\n                            // Some other error unrelated to missing `projectId`\n                            err = err || e;\n                        }\n                    }\n                }\n                if (err) {\n                    if (stream) {\n                        stream.destroy(err);\n                    }\n                    else {\n                        const fn = options && options.onAuthenticated\n                            ? options.onAuthenticated\n                            : callback;\n                        fn(err);\n                    }\n                    return;\n                }\n                if (options && options.onAuthenticated) {\n                    options.onAuthenticated(null, authenticatedReqOpts);\n                }\n                else {\n                    activeRequest_ = util.makeRequest(authenticatedReqOpts, reqConfig, (apiResponseError, ...params) => {\n                        if (apiResponseError &&\n                            apiResponseError.code === 401 &&\n                            authLibraryError) {\n                            // Re-use the \"Could not load the default credentials error\" if\n                            // the API request failed due to missing credentials.\n                            apiResponseError = authLibraryError;\n                        }\n                        callback(apiResponseError, ...params);\n                    });\n                }\n            };\n            const prepareRequest = async () => {\n                try {\n                    const getProjectId = async () => {\n                        if (config.projectId &&\n                            config.projectId !== _service_js__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_PROJECT_ID_TOKEN) {\n                            // The user provided a project ID. We don't need to check with the\n                            // auth client, it could be incorrect.\n                            return config.projectId;\n                        }\n                        if (config.projectIdRequired === false) {\n                            // A projectId is not required. Return the default.\n                            return _service_js__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_PROJECT_ID_TOKEN;\n                        }\n                        return setProjectId();\n                    };\n                    const authorizeRequest = async () => {\n                        if (reqConfig.customEndpoint &&\n                            !reqConfig.useAuthWithCustomEndpoint) {\n                            // Using a custom API override. Do not use `google-auth-library` for\n                            // authentication. (ex: connecting to a local Datastore server)\n                            return reqOpts;\n                        }\n                        else {\n                            return authClient.authorizeRequest(reqOpts);\n                        }\n                    };\n                    const [_projectId, authorizedReqOpts] = await Promise.all([\n                        getProjectId(),\n                        authorizeRequest(),\n                    ]);\n                    if (_projectId) {\n                        projectId = _projectId;\n                    }\n                    return onAuthenticated(null, authorizedReqOpts);\n                }\n                catch (e) {\n                    return onAuthenticated(e);\n                }\n            };\n            prepareRequest();\n            if (stream) {\n                return stream;\n            }\n            return {\n                abort() {\n                    setImmediate(() => {\n                        if (activeRequest_) {\n                            activeRequest_.abort();\n                            activeRequest_ = null;\n                        }\n                    });\n                },\n            };\n        }\n        const mar = makeAuthenticatedRequest;\n        mar.getCredentials = authClient.getCredentials.bind(authClient);\n        mar.authClient = authClient;\n        return mar;\n    }\n    /**\n     * Make a request through the `retryRequest` module with built-in error\n     * handling and exponential back off.\n     *\n     * @param {object} reqOpts - Request options in the format `request` expects.\n     * @param {object=} config - Configuration object.\n     * @param {boolean=} config.autoRetry - Automatically retry requests if the\n     *     response is related to rate limits or certain intermittent server\n     * errors. We will exponentially backoff subsequent requests by default.\n     * (default: true)\n     * @param {number=} config.maxRetries - Maximum number of automatic retries\n     *     attempted before returning the error. (default: 3)\n     * @param {object=} config.request - HTTP module for request calls.\n     * @param {function} callback - The callback function.\n     */\n    makeRequest(reqOpts, config, callback) {\n        var _a, _b, _c, _d, _e;\n        let autoRetryValue = AUTO_RETRY_DEFAULT;\n        if (config.autoRetry !== undefined) {\n            autoRetryValue = config.autoRetry;\n        }\n        else if (((_a = config.retryOptions) === null || _a === void 0 ? void 0 : _a.autoRetry) !== undefined) {\n            autoRetryValue = config.retryOptions.autoRetry;\n        }\n        let maxRetryValue = MAX_RETRY_DEFAULT;\n        if (config.maxRetries !== undefined) {\n            maxRetryValue = config.maxRetries;\n        }\n        else if (((_b = config.retryOptions) === null || _b === void 0 ? void 0 : _b.maxRetries) !== undefined) {\n            maxRetryValue = config.retryOptions.maxRetries;\n        }\n        requestDefaults.headers = this._getDefaultHeaders(reqOpts[GCCL_GCS_CMD_KEY]);\n        const options = {\n            request: teeny_request__WEBPACK_IMPORTED_MODULE_5__.teenyRequest.defaults(requestDefaults),\n            retries: autoRetryValue !== false ? maxRetryValue : 0,\n            noResponseRetries: autoRetryValue !== false ? maxRetryValue : 0,\n            shouldRetryFn(httpRespMessage) {\n                var _a, _b;\n                const err = util.parseHttpRespMessage(httpRespMessage).err;\n                if ((_a = config.retryOptions) === null || _a === void 0 ? void 0 : _a.retryableErrorFn) {\n                    return err && ((_b = config.retryOptions) === null || _b === void 0 ? void 0 : _b.retryableErrorFn(err));\n                }\n                return err && util.shouldRetryRequest(err);\n            },\n            maxRetryDelay: (_c = config.retryOptions) === null || _c === void 0 ? void 0 : _c.maxRetryDelay,\n            retryDelayMultiplier: (_d = config.retryOptions) === null || _d === void 0 ? void 0 : _d.retryDelayMultiplier,\n            totalTimeout: (_e = config.retryOptions) === null || _e === void 0 ? void 0 : _e.totalTimeout,\n        };\n        if (typeof reqOpts.maxRetries === 'number') {\n            options.retries = reqOpts.maxRetries;\n            options.noResponseRetries = reqOpts.maxRetries;\n        }\n        if (!config.stream) {\n            return retry_request__WEBPACK_IMPORTED_MODULE_3__(reqOpts, options, \n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            (err, response, body) => {\n                util.handleResp(err, response, body, callback);\n            });\n        }\n        const dup = config.stream;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let requestStream;\n        const isGetRequest = (reqOpts.method || 'GET').toUpperCase() === 'GET';\n        if (isGetRequest) {\n            requestStream = retry_request__WEBPACK_IMPORTED_MODULE_3__(reqOpts, options);\n            dup.setReadable(requestStream);\n        }\n        else {\n            // Streaming writable HTTP requests cannot be retried.\n            requestStream = options.request(reqOpts);\n            dup.setWritable(requestStream);\n        }\n        // Replay the Request events back to the stream.\n        requestStream\n            .on('error', dup.destroy.bind(dup))\n            .on('response', dup.emit.bind(dup, 'response'))\n            .on('complete', dup.emit.bind(dup, 'complete'));\n        dup.abort = requestStream.abort;\n        return dup;\n    }\n    /**\n     * Decorate the options about to be made in a request.\n     *\n     * @param {object} reqOpts - The options to be passed to `request`.\n     * @param {string} projectId - The project ID.\n     * @return {object} reqOpts - The decorated reqOpts.\n     */\n    decorateRequest(reqOpts, projectId) {\n        delete reqOpts.autoPaginate;\n        delete reqOpts.autoPaginateVal;\n        delete reqOpts.objectMode;\n        if (reqOpts.qs !== null && typeof reqOpts.qs === 'object') {\n            delete reqOpts.qs.autoPaginate;\n            delete reqOpts.qs.autoPaginateVal;\n            reqOpts.qs = (0,_google_cloud_projectify__WEBPACK_IMPORTED_MODULE_0__.replaceProjectIdToken)(reqOpts.qs, projectId);\n        }\n        if (Array.isArray(reqOpts.multipart)) {\n            reqOpts.multipart = reqOpts.multipart.map(part => {\n                return (0,_google_cloud_projectify__WEBPACK_IMPORTED_MODULE_0__.replaceProjectIdToken)(part, projectId);\n            });\n        }\n        if (reqOpts.json !== null && typeof reqOpts.json === 'object') {\n            delete reqOpts.json.autoPaginate;\n            delete reqOpts.json.autoPaginateVal;\n            reqOpts.json = (0,_google_cloud_projectify__WEBPACK_IMPORTED_MODULE_0__.replaceProjectIdToken)(reqOpts.json, projectId);\n        }\n        reqOpts.uri = (0,_google_cloud_projectify__WEBPACK_IMPORTED_MODULE_0__.replaceProjectIdToken)(reqOpts.uri, projectId);\n        return reqOpts;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    isCustomType(unknown, module) {\n        function getConstructorName(obj) {\n            return obj.constructor && obj.constructor.name.toLowerCase();\n        }\n        const moduleNameParts = module.split('/');\n        const parentModuleName = moduleNameParts[0] && moduleNameParts[0].toLowerCase();\n        const subModuleName = moduleNameParts[1] && moduleNameParts[1].toLowerCase();\n        if (subModuleName && getConstructorName(unknown) !== subModuleName) {\n            return false;\n        }\n        let walkingModule = unknown;\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            if (getConstructorName(walkingModule) === parentModuleName) {\n                return true;\n            }\n            walkingModule = walkingModule.parent;\n            if (!walkingModule) {\n                return false;\n            }\n        }\n    }\n    /**\n     * Given two parameters, figure out if this is either:\n     *  - Just a callback function\n     *  - An options object, and then a callback function\n     * @param optionsOrCallback An options object or callback.\n     * @param cb A potentially undefined callback.\n     */\n    maybeOptionsOrCallback(optionsOrCallback, cb) {\n        return typeof optionsOrCallback === 'function'\n            ? [{}, optionsOrCallback]\n            : [optionsOrCallback, cb];\n    }\n    _getDefaultHeaders(gcclGcsCmd) {\n        const headers = {\n            'User-Agent': (0,_util_js__WEBPACK_IMPORTED_MODULE_7__.getUserAgentString)(),\n            'x-goog-api-client': `${(0,_util_js__WEBPACK_IMPORTED_MODULE_7__.getRuntimeTrackingString)()} gccl/${packageJson.version}-${(0,_util_js__WEBPACK_IMPORTED_MODULE_7__.getModuleFormat)()} gccl-invocation-id/${uuid__WEBPACK_IMPORTED_MODULE_10__[\"default\"]()}`,\n        };\n        if (gcclGcsCmd) {\n            headers['x-goog-api-client'] += ` gccl-gcs-cmd/${gcclGcsCmd}`;\n        }\n        return headers;\n    }\n}\n/**\n * Basic Passthrough Stream that records the number of bytes read\n * every time the cursor is moved.\n */\nclass ProgressStream extends stream__WEBPACK_IMPORTED_MODULE_4__.Transform {\n    constructor() {\n        super(...arguments);\n        this.bytesRead = 0;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _transform(chunk, encoding, callback) {\n        this.bytesRead += chunk.length;\n        this.emit('progress', { bytesWritten: this.bytesRead, contentLength: '*' });\n        this.push(chunk);\n        callback();\n    }\n}\nconst util = new Util();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/build/esm/src/nodejs-common/util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/build/esm/src/notification.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/build/esm/src/notification.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Notification: () => (/* binding */ Notification)\n/* harmony export */ });\n/* harmony import */ var _nodejs_common_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./nodejs-common/index.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/nodejs-common/index.js\");\n/* harmony import */ var _google_cloud_promisify__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @google-cloud/promisify */ \"(rsc)/./node_modules/@google-cloud/promisify/build/src/index.js\");\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\n/**\n * The API-formatted resource description of the notification.\n *\n * Note: This is not guaranteed to be up-to-date when accessed. To get the\n * latest record, call the `getMetadata()` method.\n *\n * @name Notification#metadata\n * @type {object}\n */\n/**\n * A Notification object is created from your {@link Bucket} object using\n * {@link Bucket#notification}. Use it to interact with Cloud Pub/Sub\n * notifications.\n *\n * See {@link https://cloud.google.com/storage/docs/pubsub-notifications| Cloud Pub/Sub Notifications for Google Cloud Storage}\n *\n * @class\n * @hideconstructor\n *\n * @param {Bucket} bucket The bucket instance this notification is attached to.\n * @param {string} id The ID of the notification.\n *\n * @example\n * ```\n * const {Storage} = require('@google-cloud/storage');\n * const storage = new Storage();\n * const myBucket = storage.bucket('my-bucket');\n *\n * const notification = myBucket.notification('1');\n * ```\n */\nclass Notification extends _nodejs_common_index_js__WEBPACK_IMPORTED_MODULE_0__.ServiceObject {\n    constructor(bucket, id) {\n        const requestQueryObject = {};\n        const methods = {\n            /**\n             * Creates a notification subscription for the bucket.\n             *\n             * See {@link https://cloud.google.com/storage/docs/json_api/v1/notifications/insert| Notifications: insert}\n             * @method Notification#create\n             *\n             * @param {Topic|string} topic The Cloud PubSub topic to which this\n             * subscription publishes. If the project ID is omitted, the current\n             * project ID will be used.\n             *\n             * Acceptable formats are:\n             * - `projects/grape-spaceship-123/topics/my-topic`\n             *\n             * - `my-topic`\n             * @param {CreateNotificationRequest} [options] Metadata to set for\n             *     the notification.\n             * @param {CreateNotificationCallback} [callback] Callback function.\n             * @returns {Promise<CreateNotificationResponse>}\n             * @throws {Error} If a valid topic is not provided.\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const myBucket = storage.bucket('my-bucket');\n             * const notification = myBucket.notification('1');\n             *\n             * notification.create(function(err, notification, apiResponse) {\n             *   if (!err) {\n             *     // The notification was created successfully.\n             *   }\n             * });\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * notification.create().then(function(data) {\n             *   const notification = data[0];\n             *   const apiResponse = data[1];\n             * });\n             * ```\n             */\n            create: true,\n            /**\n             * @typedef {array} DeleteNotificationResponse\n             * @property {object} 0 The full API response.\n             */\n            /**\n             * Permanently deletes a notification subscription.\n             *\n             * See {@link https://cloud.google.com/storage/docs/json_api/v1/notifications/delete| Notifications: delete API Documentation}\n             *\n             * @param {object} [options] Configuration options.\n             * @param {string} [options.userProject] The ID of the project which will be\n             *     billed for the request.\n             * @param {DeleteNotificationCallback} [callback] Callback function.\n             * @returns {Promise<DeleteNotificationResponse>}\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const myBucket = storage.bucket('my-bucket');\n             * const notification = myBucket.notification('1');\n             *\n             * notification.delete(function(err, apiResponse) {});\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * notification.delete().then(function(data) {\n             *   const apiResponse = data[0];\n             * });\n             *\n             * ```\n             * @example <caption>include:samples/deleteNotification.js</caption>\n             * region_tag:storage_delete_bucket_notification\n             * Another example:\n             */\n            delete: {\n                reqOpts: {\n                    qs: requestQueryObject,\n                },\n            },\n            /**\n             * Get a notification and its metadata if it exists.\n             *\n             * See {@link https://cloud.google.com/storage/docs/json_api/v1/notifications/get| Notifications: get API Documentation}\n             *\n             * @param {object} [options] Configuration options.\n             *     See {@link Bucket#createNotification} for create options.\n             * @param {boolean} [options.autoCreate] Automatically create the object if\n             *     it does not exist. Default: `false`.\n             * @param {string} [options.userProject] The ID of the project which will be\n             *     billed for the request.\n             * @param {GetNotificationCallback} [callback] Callback function.\n             * @return {Promise<GetNotificationCallback>}\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const myBucket = storage.bucket('my-bucket');\n             * const notification = myBucket.notification('1');\n             *\n             * notification.get(function(err, notification, apiResponse) {\n             *   // `notification.metadata` has been populated.\n             * });\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * notification.get().then(function(data) {\n             *   const notification = data[0];\n             *   const apiResponse = data[1];\n             * });\n             * ```\n             */\n            get: {\n                reqOpts: {\n                    qs: requestQueryObject,\n                },\n            },\n            /**\n             * Get the notification's metadata.\n             *\n             * See {@link https://cloud.google.com/storage/docs/json_api/v1/notifications/get| Notifications: get API Documentation}\n             *\n             * @param {object} [options] Configuration options.\n             * @param {string} [options.userProject] The ID of the project which will be\n             *     billed for the request.\n             * @param {GetNotificationMetadataCallback} [callback] Callback function.\n             * @returns {Promise<GetNotificationMetadataResponse>}\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const myBucket = storage.bucket('my-bucket');\n             * const notification = myBucket.notification('1');\n             *\n             * notification.getMetadata(function(err, metadata, apiResponse) {});\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * notification.getMetadata().then(function(data) {\n             *   const metadata = data[0];\n             *   const apiResponse = data[1];\n             * });\n             *\n             * ```\n             * @example <caption>include:samples/getMetadataNotifications.js</caption>\n             * region_tag:storage_print_pubsub_bucket_notification\n             * Another example:\n             */\n            getMetadata: {\n                reqOpts: {\n                    qs: requestQueryObject,\n                },\n            },\n            /**\n             * @typedef {array} NotificationExistsResponse\n             * @property {boolean} 0 Whether the notification exists or not.\n             */\n            /**\n             * @callback NotificationExistsCallback\n             * @param {?Error} err Request error, if any.\n             * @param {boolean} exists Whether the notification exists or not.\n             */\n            /**\n             * Check if the notification exists.\n             *\n             * @method Notification#exists\n             * @param {NotificationExistsCallback} [callback] Callback function.\n             * @returns {Promise<NotificationExistsResponse>}\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const myBucket = storage.bucket('my-bucket');\n             * const notification = myBucket.notification('1');\n             *\n             * notification.exists(function(err, exists) {});\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * notification.exists().then(function(data) {\n             *   const exists = data[0];\n             * });\n             * ```\n             */\n            exists: true,\n        };\n        super({\n            parent: bucket,\n            baseUrl: '/notificationConfigs',\n            id: id.toString(),\n            createMethod: bucket.createNotification.bind(bucket),\n            methods,\n        });\n    }\n}\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\n(0,_google_cloud_promisify__WEBPACK_IMPORTED_MODULE_1__.promisifyAll)(Notification);\n/**\n * Reference to the {@link Notification} class.\n * @name module:@google-cloud/storage.Notification\n * @see Notification\n */\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/build/esm/src/notification.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/build/esm/src/resumable-upload.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/build/esm/src/resumable-upload.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("var gaxios__WEBPACK_IMPORTED_MODULE_2___namespace_cache;\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PROTOCOL_REGEX: () => (/* binding */ PROTOCOL_REGEX),\n/* harmony export */   Upload: () => (/* binding */ Upload),\n/* harmony export */   checkUploadStatus: () => (/* binding */ checkUploadStatus),\n/* harmony export */   createURI: () => (/* binding */ createURI),\n/* harmony export */   upload: () => (/* binding */ upload)\n/* harmony export */ });\n/* harmony import */ var abort_controller__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! abort-controller */ \"(rsc)/./node_modules/abort-controller/dist/abort-controller.js\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var gaxios__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! gaxios */ \"(rsc)/./node_modules/gaxios/build/src/index.js\");\n/* harmony import */ var google_auth_library__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! google-auth-library */ \"(rsc)/./node_modules/google-auth-library/build/src/index.js\");\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! stream */ \"stream\");\n/* harmony import */ var async_retry__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! async-retry */ \"(rsc)/./node_modules/async-retry/lib/index.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./util.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/util.js\");\n/* harmony import */ var _nodejs_common_util_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./nodejs-common/util.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/nodejs-common/util.js\");\n/* harmony import */ var _package_json_helper_cjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./package-json-helper.cjs */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/package-json-helper.cjs\");\n// Copyright 2022 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Upload_instances, _Upload_gcclGcsCmd, _Upload_resetLocalBuffersCache, _Upload_addLocalBufferCache;\n\n\n\n\n\n\n\n\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\n\nconst NOT_FOUND_STATUS_CODE = 404;\nconst RESUMABLE_INCOMPLETE_STATUS_CODE = 308;\nconst packageJson = (0,_package_json_helper_cjs__WEBPACK_IMPORTED_MODULE_8__.getPackageJSON)();\nconst PROTOCOL_REGEX = /^(\\w*):\\/\\//;\nclass Upload extends stream__WEBPACK_IMPORTED_MODULE_4__.Writable {\n    constructor(cfg) {\n        var _a;\n        super(cfg);\n        _Upload_instances.add(this);\n        this.numBytesWritten = 0;\n        this.numRetries = 0;\n        this.currentInvocationId = {\n            checkUploadStatus: uuid__WEBPACK_IMPORTED_MODULE_9__[\"default\"](),\n            chunk: uuid__WEBPACK_IMPORTED_MODULE_9__[\"default\"](),\n            uri: uuid__WEBPACK_IMPORTED_MODULE_9__[\"default\"](),\n        };\n        /**\n         * A cache of buffers written to this instance, ready for consuming\n         */\n        this.writeBuffers = [];\n        this.numChunksReadInRequest = 0;\n        /**\n         * An array of buffers used for caching the most recent upload chunk.\n         * We should not assume that the server received all bytes sent in the request.\n         *  - https://cloud.google.com/storage/docs/performing-resumable-uploads#chunked-upload\n         */\n        this.localWriteCache = [];\n        this.localWriteCacheByteLength = 0;\n        this.upstreamEnded = false;\n        _Upload_gcclGcsCmd.set(this, void 0);\n        cfg = cfg || {};\n        if (!cfg.bucket || !cfg.file) {\n            throw new Error('A bucket and file name are required');\n        }\n        if (cfg.offset && !cfg.uri) {\n            throw new RangeError('Cannot provide an `offset` without providing a `uri`');\n        }\n        if (cfg.isPartialUpload && !cfg.chunkSize) {\n            throw new RangeError('Cannot set `isPartialUpload` without providing a `chunkSize`');\n        }\n        cfg.authConfig = cfg.authConfig || {};\n        cfg.authConfig.scopes = [\n            'https://www.googleapis.com/auth/devstorage.full_control',\n        ];\n        this.authClient = cfg.authClient || new google_auth_library__WEBPACK_IMPORTED_MODULE_3__.GoogleAuth(cfg.authConfig);\n        const universe = cfg.universeDomain || google_auth_library__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_UNIVERSE;\n        this.apiEndpoint = `https://storage.${universe}`;\n        if (cfg.apiEndpoint && cfg.apiEndpoint !== this.apiEndpoint) {\n            this.apiEndpoint = this.sanitizeEndpoint(cfg.apiEndpoint);\n            const hostname = new URL(this.apiEndpoint).hostname;\n            // check if it is a domain of a known universe\n            const isDomain = hostname === universe;\n            const isDefaultUniverseDomain = hostname === google_auth_library__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_UNIVERSE;\n            // check if it is a subdomain of a known universe\n            // by checking a last (universe's length + 1) of a hostname\n            const isSubDomainOfUniverse = hostname.slice(-(universe.length + 1)) === `.${universe}`;\n            const isSubDomainOfDefaultUniverse = hostname.slice(-(google_auth_library__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_UNIVERSE.length + 1)) ===\n                `.${google_auth_library__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_UNIVERSE}`;\n            if (!isDomain &&\n                !isDefaultUniverseDomain &&\n                !isSubDomainOfUniverse &&\n                !isSubDomainOfDefaultUniverse) {\n                // a custom, non-universe domain,\n                // use gaxios\n                this.authClient = /*#__PURE__*/ (gaxios__WEBPACK_IMPORTED_MODULE_2___namespace_cache || (gaxios__WEBPACK_IMPORTED_MODULE_2___namespace_cache = __webpack_require__.t(gaxios__WEBPACK_IMPORTED_MODULE_2__, 2)));\n            }\n        }\n        this.baseURI = `${this.apiEndpoint}/upload/storage/v1/b`;\n        this.bucket = cfg.bucket;\n        const cacheKeyElements = [cfg.bucket, cfg.file];\n        if (typeof cfg.generation === 'number') {\n            cacheKeyElements.push(`${cfg.generation}`);\n        }\n        this.cacheKey = cacheKeyElements.join('/');\n        this.customRequestOptions = cfg.customRequestOptions || {};\n        this.file = cfg.file;\n        this.generation = cfg.generation;\n        this.kmsKeyName = cfg.kmsKeyName;\n        this.metadata = cfg.metadata || {};\n        this.offset = cfg.offset;\n        this.origin = cfg.origin;\n        this.params = cfg.params || {};\n        this.userProject = cfg.userProject;\n        this.chunkSize = cfg.chunkSize;\n        this.retryOptions = cfg.retryOptions;\n        this.isPartialUpload = (_a = cfg.isPartialUpload) !== null && _a !== void 0 ? _a : false;\n        if (cfg.key) {\n            if (typeof cfg.key === 'string') {\n                const base64Key = Buffer.from(cfg.key).toString('base64');\n                this.encryption = {\n                    key: base64Key,\n                    hash: (0,crypto__WEBPACK_IMPORTED_MODULE_1__.createHash)('sha256').update(cfg.key).digest('base64'),\n                };\n            }\n            else {\n                const base64Key = cfg.key.toString('base64');\n                this.encryption = {\n                    key: base64Key,\n                    hash: (0,crypto__WEBPACK_IMPORTED_MODULE_1__.createHash)('sha256').update(cfg.key).digest('base64'),\n                };\n            }\n        }\n        this.predefinedAcl = cfg.predefinedAcl;\n        if (cfg.private)\n            this.predefinedAcl = 'private';\n        if (cfg.public)\n            this.predefinedAcl = 'publicRead';\n        const autoRetry = cfg.retryOptions.autoRetry;\n        this.uriProvidedManually = !!cfg.uri;\n        this.uri = cfg.uri;\n        if (this.offset) {\n            // we're resuming an incomplete upload\n            this.numBytesWritten = this.offset;\n        }\n        this.numRetries = 0; // counter for number of retries currently executed\n        if (!autoRetry) {\n            cfg.retryOptions.maxRetries = 0;\n        }\n        this.timeOfFirstRequest = Date.now();\n        const contentLength = cfg.metadata\n            ? Number(cfg.metadata.contentLength)\n            : NaN;\n        this.contentLength = isNaN(contentLength) ? '*' : contentLength;\n        __classPrivateFieldSet(this, _Upload_gcclGcsCmd, cfg[_nodejs_common_util_js__WEBPACK_IMPORTED_MODULE_7__.GCCL_GCS_CMD_KEY], \"f\");\n        this.once('writing', () => {\n            if (this.uri) {\n                this.continueUploading();\n            }\n            else {\n                this.createURI(err => {\n                    if (err) {\n                        return this.destroy(err);\n                    }\n                    this.startUploading();\n                    return;\n                });\n            }\n        });\n    }\n    /**\n     * Prevent 'finish' event until the upload has succeeded.\n     *\n     * @param fireFinishEvent The finish callback\n     */\n    _final(fireFinishEvent = () => { }) {\n        this.upstreamEnded = true;\n        this.once('uploadFinished', fireFinishEvent);\n        process.nextTick(() => {\n            this.emit('upstreamFinished');\n            // it's possible `_write` may not be called - namely for empty object uploads\n            this.emit('writing');\n        });\n    }\n    /**\n     * Handles incoming data from upstream\n     *\n     * @param chunk The chunk to append to the buffer\n     * @param encoding The encoding of the chunk\n     * @param readCallback A callback for when the buffer has been read downstream\n     */\n    _write(chunk, encoding, readCallback = () => { }) {\n        // Backwards-compatible event\n        this.emit('writing');\n        this.writeBuffers.push(typeof chunk === 'string' ? Buffer.from(chunk, encoding) : chunk);\n        this.once('readFromChunkBuffer', readCallback);\n        process.nextTick(() => this.emit('wroteToChunkBuffer'));\n    }\n    /**\n     * Prepends the local buffer to write buffer and resets it.\n     *\n     * @param keepLastBytes number of bytes to keep from the end of the local buffer.\n     */\n    prependLocalBufferToUpstream(keepLastBytes) {\n        // Typically, the upstream write buffers should be smaller than the local\n        // cache, so we can save time by setting the local cache as the new\n        // upstream write buffer array and appending the old array to it\n        let initialBuffers = [];\n        if (keepLastBytes) {\n            // we only want the last X bytes\n            let bytesKept = 0;\n            while (keepLastBytes > bytesKept) {\n                // load backwards because we want the last X bytes\n                // note: `localWriteCacheByteLength` is reset below\n                let buf = this.localWriteCache.pop();\n                if (!buf)\n                    break;\n                bytesKept += buf.byteLength;\n                if (bytesKept > keepLastBytes) {\n                    // we have gone over the amount desired, let's keep the last X bytes\n                    // of this buffer\n                    const diff = bytesKept - keepLastBytes;\n                    buf = buf.subarray(diff);\n                    bytesKept -= diff;\n                }\n                initialBuffers.unshift(buf);\n            }\n        }\n        else {\n            // we're keeping all of the local cache, simply use it as the initial buffer\n            initialBuffers = this.localWriteCache;\n        }\n        // Append the old upstream to the new\n        const append = this.writeBuffers;\n        this.writeBuffers = initialBuffers;\n        for (const buf of append) {\n            this.writeBuffers.push(buf);\n        }\n        // reset last buffers sent\n        __classPrivateFieldGet(this, _Upload_instances, \"m\", _Upload_resetLocalBuffersCache).call(this);\n    }\n    /**\n     * Retrieves data from upstream's buffer.\n     *\n     * @param limit The maximum amount to return from the buffer.\n     */\n    *pullFromChunkBuffer(limit) {\n        while (limit) {\n            const buf = this.writeBuffers.shift();\n            if (!buf)\n                break;\n            let bufToYield = buf;\n            if (buf.byteLength > limit) {\n                bufToYield = buf.subarray(0, limit);\n                this.writeBuffers.unshift(buf.subarray(limit));\n                limit = 0;\n            }\n            else {\n                limit -= buf.byteLength;\n            }\n            yield bufToYield;\n            // Notify upstream we've read from the buffer and we're able to consume\n            // more. It can also potentially send more data down as we're currently\n            // iterating.\n            this.emit('readFromChunkBuffer');\n        }\n    }\n    /**\n     * A handler for determining if data is ready to be read from upstream.\n     *\n     * @returns If there will be more chunks to read in the future\n     */\n    async waitForNextChunk() {\n        const willBeMoreChunks = await new Promise(resolve => {\n            // There's data available - it should be digested\n            if (this.writeBuffers.length) {\n                return resolve(true);\n            }\n            // The upstream writable ended, we shouldn't expect any more data.\n            if (this.upstreamEnded) {\n                return resolve(false);\n            }\n            // Nothing immediate seems to be determined. We need to prepare some\n            // listeners to determine next steps...\n            const wroteToChunkBufferCallback = () => {\n                removeListeners();\n                return resolve(true);\n            };\n            const upstreamFinishedCallback = () => {\n                removeListeners();\n                // this should be the last chunk, if there's anything there\n                if (this.writeBuffers.length)\n                    return resolve(true);\n                return resolve(false);\n            };\n            // Remove listeners when we're ready to callback.\n            const removeListeners = () => {\n                this.removeListener('wroteToChunkBuffer', wroteToChunkBufferCallback);\n                this.removeListener('upstreamFinished', upstreamFinishedCallback);\n            };\n            // If there's data recently written it should be digested\n            this.once('wroteToChunkBuffer', wroteToChunkBufferCallback);\n            // If the upstream finishes let's see if there's anything to grab\n            this.once('upstreamFinished', upstreamFinishedCallback);\n        });\n        return willBeMoreChunks;\n    }\n    /**\n     * Reads data from upstream up to the provided `limit`.\n     * Ends when the limit has reached or no data is expected to be pushed from upstream.\n     *\n     * @param limit The most amount of data this iterator should return. `Infinity` by default.\n     */\n    async *upstreamIterator(limit = Infinity) {\n        // read from upstream chunk buffer\n        while (limit && (await this.waitForNextChunk())) {\n            // read until end or limit has been reached\n            for (const chunk of this.pullFromChunkBuffer(limit)) {\n                limit -= chunk.byteLength;\n                yield chunk;\n            }\n        }\n    }\n    createURI(callback) {\n        if (!callback) {\n            return this.createURIAsync();\n        }\n        this.createURIAsync().then(r => callback(null, r), callback);\n    }\n    async createURIAsync() {\n        const metadata = { ...this.metadata };\n        const headers = {};\n        // Delete content length and content type from metadata if they exist.\n        // These are headers and should not be sent as part of the metadata.\n        if (metadata.contentLength) {\n            headers['X-Upload-Content-Length'] = metadata.contentLength.toString();\n            delete metadata.contentLength;\n        }\n        if (metadata.contentType) {\n            headers['X-Upload-Content-Type'] = metadata.contentType;\n            delete metadata.contentType;\n        }\n        let googAPIClient = `${(0,_util_js__WEBPACK_IMPORTED_MODULE_6__.getRuntimeTrackingString)()} gccl/${packageJson.version}-${(0,_util_js__WEBPACK_IMPORTED_MODULE_6__.getModuleFormat)()} gccl-invocation-id/${this.currentInvocationId.uri}`;\n        if (__classPrivateFieldGet(this, _Upload_gcclGcsCmd, \"f\")) {\n            googAPIClient += ` gccl-gcs-cmd/${__classPrivateFieldGet(this, _Upload_gcclGcsCmd, \"f\")}`;\n        }\n        // Check if headers already exist before creating new ones\n        const reqOpts = {\n            method: 'POST',\n            url: [this.baseURI, this.bucket, 'o'].join('/'),\n            params: Object.assign({\n                name: this.file,\n                uploadType: 'resumable',\n            }, this.params),\n            data: metadata,\n            headers: {\n                'User-Agent': (0,_util_js__WEBPACK_IMPORTED_MODULE_6__.getUserAgentString)(),\n                'x-goog-api-client': googAPIClient,\n                ...headers,\n            },\n        };\n        if (metadata.contentLength) {\n            reqOpts.headers['X-Upload-Content-Length'] =\n                metadata.contentLength.toString();\n        }\n        if (metadata.contentType) {\n            reqOpts.headers['X-Upload-Content-Type'] = metadata.contentType;\n        }\n        if (typeof this.generation !== 'undefined') {\n            reqOpts.params.ifGenerationMatch = this.generation;\n        }\n        if (this.kmsKeyName) {\n            reqOpts.params.kmsKeyName = this.kmsKeyName;\n        }\n        if (this.predefinedAcl) {\n            reqOpts.params.predefinedAcl = this.predefinedAcl;\n        }\n        if (this.origin) {\n            reqOpts.headers.Origin = this.origin;\n        }\n        const uri = await async_retry__WEBPACK_IMPORTED_MODULE_5__(async (bail) => {\n            var _a, _b, _c;\n            try {\n                const res = await this.makeRequest(reqOpts);\n                // We have successfully got a URI we can now create a new invocation id\n                this.currentInvocationId.uri = uuid__WEBPACK_IMPORTED_MODULE_9__[\"default\"]();\n                return res.headers.location;\n            }\n            catch (err) {\n                const e = err;\n                const apiError = {\n                    code: (_a = e.response) === null || _a === void 0 ? void 0 : _a.status,\n                    name: (_b = e.response) === null || _b === void 0 ? void 0 : _b.statusText,\n                    message: (_c = e.response) === null || _c === void 0 ? void 0 : _c.statusText,\n                    errors: [\n                        {\n                            reason: e.code,\n                        },\n                    ],\n                };\n                if (this.retryOptions.maxRetries > 0 &&\n                    this.retryOptions.retryableErrorFn(apiError)) {\n                    throw e;\n                }\n                else {\n                    return bail(e);\n                }\n            }\n        }, {\n            retries: this.retryOptions.maxRetries,\n            factor: this.retryOptions.retryDelayMultiplier,\n            maxTimeout: this.retryOptions.maxRetryDelay * 1000, //convert to milliseconds\n            maxRetryTime: this.retryOptions.totalTimeout * 1000, //convert to milliseconds\n        });\n        this.uri = uri;\n        this.offset = 0;\n        // emit the newly generated URI for future reuse, if necessary.\n        this.emit('uri', uri);\n        return uri;\n    }\n    async continueUploading() {\n        var _a;\n        (_a = this.offset) !== null && _a !== void 0 ? _a : (await this.getAndSetOffset());\n        return this.startUploading();\n    }\n    async startUploading() {\n        const multiChunkMode = !!this.chunkSize;\n        let responseReceived = false;\n        this.numChunksReadInRequest = 0;\n        if (!this.offset) {\n            this.offset = 0;\n        }\n        // Check if the offset (server) is too far behind the current stream\n        if (this.offset < this.numBytesWritten) {\n            const delta = this.numBytesWritten - this.offset;\n            const message = `The offset is lower than the number of bytes written. The server has ${this.offset} bytes and while ${this.numBytesWritten} bytes has been uploaded - thus ${delta} bytes are missing. Stopping as this could result in data loss. Initiate a new upload to continue.`;\n            this.emit('error', new RangeError(message));\n            return;\n        }\n        // Check if we should 'fast-forward' to the relevant data to upload\n        if (this.numBytesWritten < this.offset) {\n            // 'fast-forward' to the byte where we need to upload.\n            // only push data from the byte after the one we left off on\n            const fastForwardBytes = this.offset - this.numBytesWritten;\n            for await (const _chunk of this.upstreamIterator(fastForwardBytes)) {\n                _chunk; // discard the data up until the point we want\n            }\n            this.numBytesWritten = this.offset;\n        }\n        let expectedUploadSize = undefined;\n        // Set `expectedUploadSize` to `contentLength - this.numBytesWritten`, if available\n        if (typeof this.contentLength === 'number') {\n            expectedUploadSize = this.contentLength - this.numBytesWritten;\n        }\n        // `expectedUploadSize` should be no more than the `chunkSize`.\n        // It's possible this is the last chunk request for a multiple\n        // chunk upload, thus smaller than the chunk size.\n        if (this.chunkSize) {\n            expectedUploadSize = expectedUploadSize\n                ? Math.min(this.chunkSize, expectedUploadSize)\n                : this.chunkSize;\n        }\n        // A queue for the upstream data\n        const upstreamQueue = this.upstreamIterator(expectedUploadSize);\n        // The primary read stream for this request. This stream retrieves no more\n        // than the exact requested amount from upstream.\n        const requestStream = new stream__WEBPACK_IMPORTED_MODULE_4__.Readable({\n            read: async () => {\n                // Don't attempt to retrieve data upstream if we already have a response\n                if (responseReceived)\n                    requestStream.push(null);\n                const result = await upstreamQueue.next();\n                if (result.value) {\n                    this.numChunksReadInRequest++;\n                    if (multiChunkMode) {\n                        // save ever buffer used in the request in multi-chunk mode\n                        __classPrivateFieldGet(this, _Upload_instances, \"m\", _Upload_addLocalBufferCache).call(this, result.value);\n                    }\n                    else {\n                        __classPrivateFieldGet(this, _Upload_instances, \"m\", _Upload_resetLocalBuffersCache).call(this);\n                        __classPrivateFieldGet(this, _Upload_instances, \"m\", _Upload_addLocalBufferCache).call(this, result.value);\n                    }\n                    this.numBytesWritten += result.value.byteLength;\n                    this.emit('progress', {\n                        bytesWritten: this.numBytesWritten,\n                        contentLength: this.contentLength,\n                    });\n                    requestStream.push(result.value);\n                }\n                if (result.done) {\n                    requestStream.push(null);\n                }\n            },\n        });\n        let googAPIClient = `${(0,_util_js__WEBPACK_IMPORTED_MODULE_6__.getRuntimeTrackingString)()} gccl/${packageJson.version}-${(0,_util_js__WEBPACK_IMPORTED_MODULE_6__.getModuleFormat)()} gccl-invocation-id/${this.currentInvocationId.chunk}`;\n        if (__classPrivateFieldGet(this, _Upload_gcclGcsCmd, \"f\")) {\n            googAPIClient += ` gccl-gcs-cmd/${__classPrivateFieldGet(this, _Upload_gcclGcsCmd, \"f\")}`;\n        }\n        const headers = {\n            'User-Agent': (0,_util_js__WEBPACK_IMPORTED_MODULE_6__.getUserAgentString)(),\n            'x-goog-api-client': googAPIClient,\n        };\n        // If using multiple chunk upload, set appropriate header\n        if (multiChunkMode) {\n            // We need to know how much data is available upstream to set the `Content-Range` header.\n            // https://cloud.google.com/storage/docs/performing-resumable-uploads#chunked-upload\n            for await (const chunk of this.upstreamIterator(expectedUploadSize)) {\n                // This will conveniently track and keep the size of the buffers.\n                // We will reach either the expected upload size or the remainder of the stream.\n                __classPrivateFieldGet(this, _Upload_instances, \"m\", _Upload_addLocalBufferCache).call(this, chunk);\n            }\n            // This is the sum from the `#addLocalBufferCache` calls\n            const bytesToUpload = this.localWriteCacheByteLength;\n            // Important: we want to know if the upstream has ended and the queue is empty before\n            // unshifting data back into the queue. This way we will know if this is the last request or not.\n            const isLastChunkOfUpload = !(await this.waitForNextChunk());\n            // Important: put the data back in the queue for the actual upload\n            this.prependLocalBufferToUpstream();\n            let totalObjectSize = this.contentLength;\n            if (typeof this.contentLength !== 'number' &&\n                isLastChunkOfUpload &&\n                !this.isPartialUpload) {\n                // Let's let the server know this is the last chunk of the object since we didn't set it before.\n                totalObjectSize = bytesToUpload + this.numBytesWritten;\n            }\n            // `- 1` as the ending byte is inclusive in the request.\n            const endingByte = bytesToUpload + this.numBytesWritten - 1;\n            // `Content-Length` for multiple chunk uploads is the size of the chunk,\n            // not the overall object\n            headers['Content-Length'] = bytesToUpload;\n            headers['Content-Range'] =\n                `bytes ${this.offset}-${endingByte}/${totalObjectSize}`;\n        }\n        else {\n            headers['Content-Range'] = `bytes ${this.offset}-*/${this.contentLength}`;\n        }\n        const reqOpts = {\n            method: 'PUT',\n            url: this.uri,\n            headers,\n            body: requestStream,\n        };\n        try {\n            const resp = await this.makeRequestStream(reqOpts);\n            if (resp) {\n                responseReceived = true;\n                await this.responseHandler(resp);\n            }\n        }\n        catch (e) {\n            const err = e;\n            if (this.retryOptions.retryableErrorFn(err)) {\n                this.attemptDelayedRetry({\n                    status: NaN,\n                    data: err,\n                });\n                return;\n            }\n            this.destroy(err);\n        }\n    }\n    // Process the API response to look for errors that came in\n    // the response body.\n    async responseHandler(resp) {\n        if (resp.data.error) {\n            this.destroy(resp.data.error);\n            return;\n        }\n        // At this point we can safely create a new id for the chunk\n        this.currentInvocationId.chunk = uuid__WEBPACK_IMPORTED_MODULE_9__[\"default\"]();\n        const moreDataToUpload = await this.waitForNextChunk();\n        const shouldContinueWithNextMultiChunkRequest = this.chunkSize &&\n            resp.status === RESUMABLE_INCOMPLETE_STATUS_CODE &&\n            resp.headers.range &&\n            moreDataToUpload;\n        /**\n         * This is true when we're expecting to upload more data in a future request,\n         * yet the upstream for the upload session has been exhausted.\n         */\n        const shouldContinueUploadInAnotherRequest = this.isPartialUpload &&\n            resp.status === RESUMABLE_INCOMPLETE_STATUS_CODE &&\n            !moreDataToUpload;\n        if (shouldContinueWithNextMultiChunkRequest) {\n            // Use the upper value in this header to determine where to start the next chunk.\n            // We should not assume that the server received all bytes sent in the request.\n            // https://cloud.google.com/storage/docs/performing-resumable-uploads#chunked-upload\n            const range = resp.headers.range;\n            this.offset = Number(range.split('-')[1]) + 1;\n            // We should not assume that the server received all bytes sent in the request.\n            // - https://cloud.google.com/storage/docs/performing-resumable-uploads#chunked-upload\n            const missingBytes = this.numBytesWritten - this.offset;\n            if (missingBytes) {\n                // As multi-chunk uploads send one chunk per request and pulls one\n                // chunk into the pipeline, prepending the missing bytes back should\n                // be fine for the next request.\n                this.prependLocalBufferToUpstream(missingBytes);\n                this.numBytesWritten -= missingBytes;\n            }\n            else {\n                // No bytes missing - no need to keep the local cache\n                __classPrivateFieldGet(this, _Upload_instances, \"m\", _Upload_resetLocalBuffersCache).call(this);\n            }\n            // continue uploading next chunk\n            this.continueUploading();\n        }\n        else if (!this.isSuccessfulResponse(resp.status) &&\n            !shouldContinueUploadInAnotherRequest) {\n            const err = new Error('Upload failed');\n            err.code = resp.status;\n            err.name = 'Upload failed';\n            if (resp === null || resp === void 0 ? void 0 : resp.data) {\n                err.errors = [resp === null || resp === void 0 ? void 0 : resp.data];\n            }\n            this.destroy(err);\n        }\n        else {\n            // no need to keep the cache\n            __classPrivateFieldGet(this, _Upload_instances, \"m\", _Upload_resetLocalBuffersCache).call(this);\n            if (resp && resp.data) {\n                resp.data.size = Number(resp.data.size);\n            }\n            this.emit('metadata', resp.data);\n            // Allow the object (Upload) to continue naturally so the user's\n            // \"finish\" event fires.\n            this.emit('uploadFinished');\n        }\n    }\n    /**\n     * Check the status of an existing resumable upload.\n     *\n     * @param cfg A configuration to use. `uri` is required.\n     * @returns the current upload status\n     */\n    async checkUploadStatus(config = {}) {\n        let googAPIClient = `${(0,_util_js__WEBPACK_IMPORTED_MODULE_6__.getRuntimeTrackingString)()} gccl/${packageJson.version}-${(0,_util_js__WEBPACK_IMPORTED_MODULE_6__.getModuleFormat)()} gccl-invocation-id/${this.currentInvocationId.checkUploadStatus}`;\n        if (__classPrivateFieldGet(this, _Upload_gcclGcsCmd, \"f\")) {\n            googAPIClient += ` gccl-gcs-cmd/${__classPrivateFieldGet(this, _Upload_gcclGcsCmd, \"f\")}`;\n        }\n        const opts = {\n            method: 'PUT',\n            url: this.uri,\n            headers: {\n                'Content-Length': 0,\n                'Content-Range': 'bytes */*',\n                'User-Agent': (0,_util_js__WEBPACK_IMPORTED_MODULE_6__.getUserAgentString)(),\n                'x-goog-api-client': googAPIClient,\n            },\n        };\n        try {\n            const resp = await this.makeRequest(opts);\n            // Successfully got the offset we can now create a new offset invocation id\n            this.currentInvocationId.checkUploadStatus = uuid__WEBPACK_IMPORTED_MODULE_9__[\"default\"]();\n            return resp;\n        }\n        catch (e) {\n            if (config.retry === false ||\n                !(e instanceof Error) ||\n                !this.retryOptions.retryableErrorFn(e)) {\n                throw e;\n            }\n            const retryDelay = this.getRetryDelay();\n            if (retryDelay <= 0) {\n                throw e;\n            }\n            await new Promise(res => setTimeout(res, retryDelay));\n            return this.checkUploadStatus(config);\n        }\n    }\n    async getAndSetOffset() {\n        try {\n            // we want to handle retries in this method.\n            const resp = await this.checkUploadStatus({ retry: false });\n            if (resp.status === RESUMABLE_INCOMPLETE_STATUS_CODE) {\n                if (typeof resp.headers.range === 'string') {\n                    this.offset = Number(resp.headers.range.split('-')[1]) + 1;\n                    return;\n                }\n            }\n            this.offset = 0;\n        }\n        catch (e) {\n            const err = e;\n            if (this.retryOptions.retryableErrorFn(err)) {\n                this.attemptDelayedRetry({\n                    status: NaN,\n                    data: err,\n                });\n                return;\n            }\n            this.destroy(err);\n        }\n    }\n    async makeRequest(reqOpts) {\n        if (this.encryption) {\n            reqOpts.headers = reqOpts.headers || {};\n            reqOpts.headers['x-goog-encryption-algorithm'] = 'AES256';\n            reqOpts.headers['x-goog-encryption-key'] = this.encryption.key.toString();\n            reqOpts.headers['x-goog-encryption-key-sha256'] =\n                this.encryption.hash.toString();\n        }\n        if (this.userProject) {\n            reqOpts.params = reqOpts.params || {};\n            reqOpts.params.userProject = this.userProject;\n        }\n        // Let gaxios know we will handle a 308 error code ourselves.\n        reqOpts.validateStatus = (status) => {\n            return (this.isSuccessfulResponse(status) ||\n                status === RESUMABLE_INCOMPLETE_STATUS_CODE);\n        };\n        const combinedReqOpts = {\n            ...this.customRequestOptions,\n            ...reqOpts,\n            headers: {\n                ...this.customRequestOptions.headers,\n                ...reqOpts.headers,\n            },\n        };\n        const res = await this.authClient.request(combinedReqOpts);\n        if (res.data && res.data.error) {\n            throw res.data.error;\n        }\n        return res;\n    }\n    async makeRequestStream(reqOpts) {\n        const controller = new abort_controller__WEBPACK_IMPORTED_MODULE_0__();\n        const errorCallback = () => controller.abort();\n        this.once('error', errorCallback);\n        if (this.userProject) {\n            reqOpts.params = reqOpts.params || {};\n            reqOpts.params.userProject = this.userProject;\n        }\n        reqOpts.signal = controller.signal;\n        reqOpts.validateStatus = () => true;\n        const combinedReqOpts = {\n            ...this.customRequestOptions,\n            ...reqOpts,\n            headers: {\n                ...this.customRequestOptions.headers,\n                ...reqOpts.headers,\n            },\n        };\n        const res = await this.authClient.request(combinedReqOpts);\n        const successfulRequest = this.onResponse(res);\n        this.removeListener('error', errorCallback);\n        return successfulRequest ? res : null;\n    }\n    /**\n     * @return {bool} is the request good?\n     */\n    onResponse(resp) {\n        if (resp.status !== 200 &&\n            this.retryOptions.retryableErrorFn({\n                code: resp.status,\n                message: resp.statusText,\n                name: resp.statusText,\n            })) {\n            this.attemptDelayedRetry(resp);\n            return false;\n        }\n        this.emit('response', resp);\n        return true;\n    }\n    /**\n     * @param resp GaxiosResponse object from previous attempt\n     */\n    attemptDelayedRetry(resp) {\n        if (this.numRetries < this.retryOptions.maxRetries) {\n            if (resp.status === NOT_FOUND_STATUS_CODE &&\n                this.numChunksReadInRequest === 0) {\n                this.startUploading();\n            }\n            else {\n                const retryDelay = this.getRetryDelay();\n                if (retryDelay <= 0) {\n                    this.destroy(new Error(`Retry total time limit exceeded - ${JSON.stringify(resp.data)}`));\n                    return;\n                }\n                // Unshift the local cache back in case it's needed for the next request.\n                this.numBytesWritten -= this.localWriteCacheByteLength;\n                this.prependLocalBufferToUpstream();\n                // We don't know how much data has been received by the server.\n                // `continueUploading` will recheck the offset via `getAndSetOffset`.\n                // If `offset` < `numberBytesReceived` then we will raise a RangeError\n                // as we've streamed too much data that has been missed - this should\n                // not be the case for multi-chunk uploads as `lastChunkSent` is the\n                // body of the entire request.\n                this.offset = undefined;\n                setTimeout(this.continueUploading.bind(this), retryDelay);\n            }\n            this.numRetries++;\n        }\n        else {\n            this.destroy(new Error(`Retry limit exceeded - ${JSON.stringify(resp.data)}`));\n        }\n    }\n    /**\n     * The amount of time to wait before retrying the request, in milliseconds.\n     * If negative, do not retry.\n     *\n     * @returns the amount of time to wait, in milliseconds.\n     */\n    getRetryDelay() {\n        const randomMs = Math.round(Math.random() * 1000);\n        const waitTime = Math.pow(this.retryOptions.retryDelayMultiplier, this.numRetries) *\n            1000 +\n            randomMs;\n        const maxAllowableDelayMs = this.retryOptions.totalTimeout * 1000 -\n            (Date.now() - this.timeOfFirstRequest);\n        const maxRetryDelayMs = this.retryOptions.maxRetryDelay * 1000;\n        return Math.min(waitTime, maxRetryDelayMs, maxAllowableDelayMs);\n    }\n    /*\n     * Prepare user-defined API endpoint for compatibility with our API.\n     */\n    sanitizeEndpoint(url) {\n        if (!PROTOCOL_REGEX.test(url)) {\n            url = `https://${url}`;\n        }\n        return url.replace(/\\/+$/, ''); // Remove trailing slashes\n    }\n    /**\n     * Check if a given status code is 2xx\n     *\n     * @param status The status code to check\n     * @returns if the status is 2xx\n     */\n    isSuccessfulResponse(status) {\n        return status >= 200 && status < 300;\n    }\n}\n_Upload_gcclGcsCmd = new WeakMap(), _Upload_instances = new WeakSet(), _Upload_resetLocalBuffersCache = function _Upload_resetLocalBuffersCache() {\n    this.localWriteCache = [];\n    this.localWriteCacheByteLength = 0;\n}, _Upload_addLocalBufferCache = function _Upload_addLocalBufferCache(buf) {\n    this.localWriteCache.push(buf);\n    this.localWriteCacheByteLength += buf.byteLength;\n};\nfunction upload(cfg) {\n    return new Upload(cfg);\n}\nfunction createURI(cfg, callback) {\n    const up = new Upload(cfg);\n    if (!callback) {\n        return up.createURI();\n    }\n    up.createURI().then(r => callback(null, r), callback);\n}\n/**\n * Check the status of an existing resumable upload.\n *\n * @param cfg A configuration to use. `uri` is required.\n * @returns the current upload status\n */\nfunction checkUploadStatus(cfg) {\n    const up = new Upload(cfg);\n    return up.checkUploadStatus();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/build/esm/src/resumable-upload.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/build/esm/src/signer.js":
/*!********************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/build/esm/src/signer.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PATH_STYLED_HOST: () => (/* binding */ PATH_STYLED_HOST),\n/* harmony export */   SignerExceptionMessages: () => (/* binding */ SignerExceptionMessages),\n/* harmony export */   SigningError: () => (/* binding */ SigningError),\n/* harmony export */   URLSigner: () => (/* binding */ URLSigner)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! url */ \"url\");\n/* harmony import */ var _storage_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./storage.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/storage.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/util.js\");\n// Copyright 2020 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\n\n\nvar SignerExceptionMessages;\n(function (SignerExceptionMessages) {\n    SignerExceptionMessages[\"ACCESSIBLE_DATE_INVALID\"] = \"The accessible at date provided was invalid.\";\n    SignerExceptionMessages[\"EXPIRATION_BEFORE_ACCESSIBLE_DATE\"] = \"An expiration date cannot be before accessible date.\";\n    SignerExceptionMessages[\"X_GOOG_CONTENT_SHA256\"] = \"The header X-Goog-Content-SHA256 must be a hexadecimal string.\";\n})(SignerExceptionMessages || (SignerExceptionMessages = {}));\n/*\n * Default signing version for getSignedUrl is 'v2'.\n */\nconst DEFAULT_SIGNING_VERSION = 'v2';\nconst SEVEN_DAYS = 7 * 24 * 60 * 60;\n/**\n * @const {string}\n * @deprecated - unused\n */\nconst PATH_STYLED_HOST = 'https://storage.googleapis.com';\nclass URLSigner {\n    constructor(auth, bucket, file, \n    /**\n     * A {@link Storage} object.\n     *\n     * @privateRemarks\n     *\n     * Technically this is a required field, however it would be a breaking change to\n     * move it before optional properties. In the next major we should refactor the\n     * constructor of this class to only accept a config object.\n     */\n    storage = new _storage_js__WEBPACK_IMPORTED_MODULE_2__.Storage()) {\n        this.auth = auth;\n        this.bucket = bucket;\n        this.file = file;\n        this.storage = storage;\n    }\n    getSignedUrl(cfg) {\n        const expiresInSeconds = this.parseExpires(cfg.expires);\n        const method = cfg.method;\n        const accessibleAtInSeconds = this.parseAccessibleAt(cfg.accessibleAt);\n        if (expiresInSeconds < accessibleAtInSeconds) {\n            throw new Error(SignerExceptionMessages.EXPIRATION_BEFORE_ACCESSIBLE_DATE);\n        }\n        let customHost;\n        // Default style is `path`.\n        const isVirtualHostedStyle = cfg.virtualHostedStyle || false;\n        if (cfg.cname) {\n            customHost = cfg.cname;\n        }\n        else if (isVirtualHostedStyle) {\n            customHost = `https://${this.bucket.name}.storage.${this.storage.universeDomain}`;\n        }\n        const secondsToMilliseconds = 1000;\n        const config = Object.assign({}, cfg, {\n            method,\n            expiration: expiresInSeconds,\n            accessibleAt: new Date(secondsToMilliseconds * accessibleAtInSeconds),\n            bucket: this.bucket.name,\n            file: this.file ? (0,_util_js__WEBPACK_IMPORTED_MODULE_3__.encodeURI)(this.file.name, false) : undefined,\n        });\n        if (customHost) {\n            config.cname = customHost;\n        }\n        const version = cfg.version || DEFAULT_SIGNING_VERSION;\n        let promise;\n        if (version === 'v2') {\n            promise = this.getSignedUrlV2(config);\n        }\n        else if (version === 'v4') {\n            promise = this.getSignedUrlV4(config);\n        }\n        else {\n            throw new Error(`Invalid signed URL version: ${version}. Supported versions are 'v2' and 'v4'.`);\n        }\n        return promise.then(query => {\n            var _a;\n            query = Object.assign(query, cfg.queryParams);\n            const signedUrl = new url__WEBPACK_IMPORTED_MODULE_1__.URL(((_a = cfg.host) === null || _a === void 0 ? void 0 : _a.toString()) || config.cname || this.storage.apiEndpoint);\n            signedUrl.pathname = this.getResourcePath(!!config.cname, this.bucket.name, config.file);\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            signedUrl.search = (0,_util_js__WEBPACK_IMPORTED_MODULE_3__.qsStringify)(query);\n            return signedUrl.href;\n        });\n    }\n    getSignedUrlV2(config) {\n        const canonicalHeadersString = this.getCanonicalHeaders(config.extensionHeaders || {});\n        const resourcePath = this.getResourcePath(false, config.bucket, config.file);\n        const blobToSign = [\n            config.method,\n            config.contentMd5 || '',\n            config.contentType || '',\n            config.expiration,\n            canonicalHeadersString + resourcePath,\n        ].join('\\n');\n        const sign = async () => {\n            var _a;\n            const auth = this.auth;\n            try {\n                const signature = await auth.sign(blobToSign, (_a = config.signingEndpoint) === null || _a === void 0 ? void 0 : _a.toString());\n                const credentials = await auth.getCredentials();\n                return {\n                    GoogleAccessId: credentials.client_email,\n                    Expires: config.expiration,\n                    Signature: signature,\n                };\n            }\n            catch (err) {\n                const error = err;\n                const signingErr = new SigningError(error.message);\n                signingErr.stack = error.stack;\n                throw signingErr;\n            }\n        };\n        return sign();\n    }\n    getSignedUrlV4(config) {\n        var _a;\n        config.accessibleAt = config.accessibleAt\n            ? config.accessibleAt\n            : new Date();\n        const millisecondsToSeconds = 1.0 / 1000.0;\n        const expiresPeriodInSeconds = config.expiration - config.accessibleAt.valueOf() * millisecondsToSeconds;\n        // v4 limit expiration to be 7 days maximum\n        if (expiresPeriodInSeconds > SEVEN_DAYS) {\n            throw new Error(`Max allowed expiration is seven days (${SEVEN_DAYS} seconds).`);\n        }\n        const extensionHeaders = Object.assign({}, config.extensionHeaders);\n        const fqdn = new url__WEBPACK_IMPORTED_MODULE_1__.URL(((_a = config.host) === null || _a === void 0 ? void 0 : _a.toString()) || config.cname || this.storage.apiEndpoint);\n        extensionHeaders.host = fqdn.hostname;\n        if (config.contentMd5) {\n            extensionHeaders['content-md5'] = config.contentMd5;\n        }\n        if (config.contentType) {\n            extensionHeaders['content-type'] = config.contentType;\n        }\n        let contentSha256;\n        const sha256Header = extensionHeaders['x-goog-content-sha256'];\n        if (sha256Header) {\n            if (typeof sha256Header !== 'string' ||\n                !/[A-Fa-f0-9]{40}/.test(sha256Header)) {\n                throw new Error(SignerExceptionMessages.X_GOOG_CONTENT_SHA256);\n            }\n            contentSha256 = sha256Header;\n        }\n        const signedHeaders = Object.keys(extensionHeaders)\n            .map(header => header.toLowerCase())\n            .sort()\n            .join(';');\n        const extensionHeadersString = this.getCanonicalHeaders(extensionHeaders);\n        const datestamp = (0,_util_js__WEBPACK_IMPORTED_MODULE_3__.formatAsUTCISO)(config.accessibleAt);\n        const credentialScope = `${datestamp}/auto/storage/goog4_request`;\n        const sign = async () => {\n            var _a;\n            const credentials = await this.auth.getCredentials();\n            const credential = `${credentials.client_email}/${credentialScope}`;\n            const dateISO = (0,_util_js__WEBPACK_IMPORTED_MODULE_3__.formatAsUTCISO)(config.accessibleAt ? config.accessibleAt : new Date(), true);\n            const queryParams = {\n                'X-Goog-Algorithm': 'GOOG4-RSA-SHA256',\n                'X-Goog-Credential': credential,\n                'X-Goog-Date': dateISO,\n                'X-Goog-Expires': expiresPeriodInSeconds.toString(10),\n                'X-Goog-SignedHeaders': signedHeaders,\n                ...(config.queryParams || {}),\n            };\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const canonicalQueryParams = this.getCanonicalQueryParams(queryParams);\n            const canonicalRequest = this.getCanonicalRequest(config.method, this.getResourcePath(!!config.cname, config.bucket, config.file), canonicalQueryParams, extensionHeadersString, signedHeaders, contentSha256);\n            const hash = crypto__WEBPACK_IMPORTED_MODULE_0__.createHash('sha256')\n                .update(canonicalRequest)\n                .digest('hex');\n            const blobToSign = [\n                'GOOG4-RSA-SHA256',\n                dateISO,\n                credentialScope,\n                hash,\n            ].join('\\n');\n            try {\n                const signature = await this.auth.sign(blobToSign, (_a = config.signingEndpoint) === null || _a === void 0 ? void 0 : _a.toString());\n                const signatureHex = Buffer.from(signature, 'base64').toString('hex');\n                const signedQuery = Object.assign({}, queryParams, {\n                    'X-Goog-Signature': signatureHex,\n                });\n                return signedQuery;\n            }\n            catch (err) {\n                const error = err;\n                const signingErr = new SigningError(error.message);\n                signingErr.stack = error.stack;\n                throw signingErr;\n            }\n        };\n        return sign();\n    }\n    /**\n     * Create canonical headers for signing v4 url.\n     *\n     * The canonical headers for v4-signing a request demands header names are\n     * first lowercased, followed by sorting the header names.\n     * Then, construct the canonical headers part of the request:\n     *  <lowercasedHeaderName> + \":\" + Trim(<value>) + \"\\n\"\n     *  ..\n     *  <lowercasedHeaderName> + \":\" + Trim(<value>) + \"\\n\"\n     *\n     * @param headers\n     * @private\n     */\n    getCanonicalHeaders(headers) {\n        // Sort headers by their lowercased names\n        const sortedHeaders = (0,_util_js__WEBPACK_IMPORTED_MODULE_3__.objectEntries)(headers)\n            // Convert header names to lowercase\n            .map(([headerName, value]) => [\n            headerName.toLowerCase(),\n            value,\n        ])\n            .sort((a, b) => a[0].localeCompare(b[0]));\n        return sortedHeaders\n            .filter(([, value]) => value !== undefined)\n            .map(([headerName, value]) => {\n            // - Convert Array (multi-valued header) into string, delimited by\n            //      ',' (no space).\n            // - Trim leading and trailing spaces.\n            // - Convert sequential (2+) spaces into a single space\n            const canonicalValue = `${value}`.trim().replace(/\\s{2,}/g, ' ');\n            return `${headerName}:${canonicalValue}\\n`;\n        })\n            .join('');\n    }\n    getCanonicalRequest(method, path, query, headers, signedHeaders, contentSha256) {\n        return [\n            method,\n            path,\n            query,\n            headers,\n            signedHeaders,\n            contentSha256 || 'UNSIGNED-PAYLOAD',\n        ].join('\\n');\n    }\n    getCanonicalQueryParams(query) {\n        return (0,_util_js__WEBPACK_IMPORTED_MODULE_3__.objectEntries)(query)\n            .map(([key, value]) => [(0,_util_js__WEBPACK_IMPORTED_MODULE_3__.encodeURI)(key, true), (0,_util_js__WEBPACK_IMPORTED_MODULE_3__.encodeURI)(value, true)])\n            .sort((a, b) => (a[0] < b[0] ? -1 : 1))\n            .map(([key, value]) => `${key}=${value}`)\n            .join('&');\n    }\n    getResourcePath(cname, bucket, file) {\n        if (cname) {\n            return '/' + (file || '');\n        }\n        else if (file) {\n            return `/${bucket}/${file}`;\n        }\n        else {\n            return `/${bucket}`;\n        }\n    }\n    parseExpires(expires, current = new Date()) {\n        const expiresInMSeconds = new Date(expires).valueOf();\n        if (isNaN(expiresInMSeconds)) {\n            throw new Error(_storage_js__WEBPACK_IMPORTED_MODULE_2__.ExceptionMessages.EXPIRATION_DATE_INVALID);\n        }\n        if (expiresInMSeconds < current.valueOf()) {\n            throw new Error(_storage_js__WEBPACK_IMPORTED_MODULE_2__.ExceptionMessages.EXPIRATION_DATE_PAST);\n        }\n        return Math.floor(expiresInMSeconds / 1000); // The API expects seconds.\n    }\n    parseAccessibleAt(accessibleAt) {\n        const accessibleAtInMSeconds = new Date(accessibleAt || new Date()).valueOf();\n        if (isNaN(accessibleAtInMSeconds)) {\n            throw new Error(SignerExceptionMessages.ACCESSIBLE_DATE_INVALID);\n        }\n        return Math.floor(accessibleAtInMSeconds / 1000); // The API expects seconds.\n    }\n}\n/**\n * Custom error type for errors related to getting signed errors and policies.\n *\n * @private\n */\nclass SigningError extends Error {\n    constructor() {\n        super(...arguments);\n        this.name = 'SigningError';\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/build/esm/src/signer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/build/esm/src/storage.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/build/esm/src/storage.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AUTO_RETRY_DEFAULT: () => (/* binding */ AUTO_RETRY_DEFAULT),\n/* harmony export */   ExceptionMessages: () => (/* binding */ ExceptionMessages),\n/* harmony export */   IdempotencyStrategy: () => (/* binding */ IdempotencyStrategy),\n/* harmony export */   MAX_RETRY_DEFAULT: () => (/* binding */ MAX_RETRY_DEFAULT),\n/* harmony export */   MAX_RETRY_DELAY_DEFAULT: () => (/* binding */ MAX_RETRY_DELAY_DEFAULT),\n/* harmony export */   PROTOCOL_REGEX: () => (/* binding */ PROTOCOL_REGEX),\n/* harmony export */   RETRYABLE_ERR_FN_DEFAULT: () => (/* binding */ RETRYABLE_ERR_FN_DEFAULT),\n/* harmony export */   RETRY_DELAY_MULTIPLIER_DEFAULT: () => (/* binding */ RETRY_DELAY_MULTIPLIER_DEFAULT),\n/* harmony export */   Storage: () => (/* binding */ Storage),\n/* harmony export */   StorageExceptionMessages: () => (/* binding */ StorageExceptionMessages),\n/* harmony export */   TOTAL_TIMEOUT_DEFAULT: () => (/* binding */ TOTAL_TIMEOUT_DEFAULT)\n/* harmony export */ });\n/* harmony import */ var _nodejs_common_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./nodejs-common/index.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/nodejs-common/index.js\");\n/* harmony import */ var _google_cloud_paginator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @google-cloud/paginator */ \"(rsc)/./node_modules/@google-cloud/paginator/build/src/index.js\");\n/* harmony import */ var _google_cloud_promisify__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @google-cloud/promisify */ \"(rsc)/./node_modules/@google-cloud/promisify/build/src/index.js\");\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! stream */ \"stream\");\n/* harmony import */ var _bucket_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./bucket.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/bucket.js\");\n/* harmony import */ var _channel_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./channel.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/channel.js\");\n/* harmony import */ var _file_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./file.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/file.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./util.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/util.js\");\n/* harmony import */ var _package_json_helper_cjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./package-json-helper.cjs */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/package-json-helper.cjs\");\n/* harmony import */ var _hmacKey_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./hmacKey.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/hmacKey.js\");\n/* harmony import */ var _crc32c_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./crc32c.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/crc32c.js\");\n/* harmony import */ var google_auth_library__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! google-auth-library */ \"(rsc)/./node_modules/google-auth-library/build/src/index.js\");\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\n\n\n\n\n\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\n\n\n\n\nvar IdempotencyStrategy;\n(function (IdempotencyStrategy) {\n    IdempotencyStrategy[IdempotencyStrategy[\"RetryAlways\"] = 0] = \"RetryAlways\";\n    IdempotencyStrategy[IdempotencyStrategy[\"RetryConditional\"] = 1] = \"RetryConditional\";\n    IdempotencyStrategy[IdempotencyStrategy[\"RetryNever\"] = 2] = \"RetryNever\";\n})(IdempotencyStrategy || (IdempotencyStrategy = {}));\nvar ExceptionMessages;\n(function (ExceptionMessages) {\n    ExceptionMessages[\"EXPIRATION_DATE_INVALID\"] = \"The expiration date provided was invalid.\";\n    ExceptionMessages[\"EXPIRATION_DATE_PAST\"] = \"An expiration date cannot be in the past.\";\n})(ExceptionMessages || (ExceptionMessages = {}));\nvar StorageExceptionMessages;\n(function (StorageExceptionMessages) {\n    StorageExceptionMessages[\"BUCKET_NAME_REQUIRED\"] = \"A bucket name is needed to use Cloud Storage.\";\n    StorageExceptionMessages[\"BUCKET_NAME_REQUIRED_CREATE\"] = \"A name is required to create a bucket.\";\n    StorageExceptionMessages[\"HMAC_SERVICE_ACCOUNT\"] = \"The first argument must be a service account email to create an HMAC key.\";\n    StorageExceptionMessages[\"HMAC_ACCESS_ID\"] = \"An access ID is needed to create an HmacKey object.\";\n})(StorageExceptionMessages || (StorageExceptionMessages = {}));\nconst PROTOCOL_REGEX = /^(\\w*):\\/\\//;\n/**\n * Default behavior: Automatically retry retriable server errors.\n *\n * @const {boolean}\n */\nconst AUTO_RETRY_DEFAULT = true;\n/**\n * Default behavior: Only attempt to retry retriable errors 3 times.\n *\n * @const {number}\n */\nconst MAX_RETRY_DEFAULT = 3;\n/**\n * Default behavior: Wait twice as long as previous retry before retrying.\n *\n * @const {number}\n */\nconst RETRY_DELAY_MULTIPLIER_DEFAULT = 2;\n/**\n * Default behavior: If the operation doesn't succeed after 600 seconds,\n *  stop retrying.\n *\n * @const {number}\n */\nconst TOTAL_TIMEOUT_DEFAULT = 600;\n/**\n * Default behavior: Wait no more than 64 seconds between retries.\n *\n * @const {number}\n */\nconst MAX_RETRY_DELAY_DEFAULT = 64;\n/**\n * Default behavior: Retry conditionally idempotent operations if correct preconditions are set.\n *\n * @const {enum}\n * @private\n */\nconst IDEMPOTENCY_STRATEGY_DEFAULT = IdempotencyStrategy.RetryConditional;\n/**\n * Returns true if the API request should be retried, given the error that was\n * given the first time the request was attempted.\n * @const\n * @param {error} err - The API error to check if it is appropriate to retry.\n * @return {boolean} True if the API request should be retried, false otherwise.\n */\nconst RETRYABLE_ERR_FN_DEFAULT = function (err) {\n    var _a;\n    const isConnectionProblem = (reason) => {\n        return (reason.includes('eai_again') || // DNS lookup error\n            reason === 'econnreset' ||\n            reason === 'unexpected connection closure' ||\n            reason === 'epipe' ||\n            reason === 'socket connection timeout');\n    };\n    if (err) {\n        if ([408, 429, 500, 502, 503, 504].indexOf(err.code) !== -1) {\n            return true;\n        }\n        if (typeof err.code === 'string') {\n            if (['408', '429', '500', '502', '503', '504'].indexOf(err.code) !== -1) {\n                return true;\n            }\n            const reason = err.code.toLowerCase();\n            if (isConnectionProblem(reason)) {\n                return true;\n            }\n        }\n        if (err.errors) {\n            for (const e of err.errors) {\n                const reason = (_a = e === null || e === void 0 ? void 0 : e.reason) === null || _a === void 0 ? void 0 : _a.toString().toLowerCase();\n                if (reason && isConnectionProblem(reason)) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n};\n/*! Developer Documentation\n *\n * Invoke this method to create a new Storage object bound with pre-determined\n * configuration options. For each object that can be created (e.g., a bucket),\n * there is an equivalent static and instance method. While they are classes,\n * they can be instantiated without use of the `new` keyword.\n */\n/**\n * Cloud Storage uses access control lists (ACLs) to manage object and\n * bucket access. ACLs are the mechanism you use to share objects with other\n * users and allow other users to access your buckets and objects.\n *\n * This object provides constants to refer to the three permission levels that\n * can be granted to an entity:\n *\n *   - `gcs.acl.OWNER_ROLE` - (\"OWNER\")\n *   - `gcs.acl.READER_ROLE` - (\"READER\")\n *   - `gcs.acl.WRITER_ROLE` - (\"WRITER\")\n *\n * See {@link https://cloud.google.com/storage/docs/access-control/lists| About Access Control Lists}\n *\n * @name Storage#acl\n * @type {object}\n * @property {string} OWNER_ROLE\n * @property {string} READER_ROLE\n * @property {string} WRITER_ROLE\n *\n * @example\n * ```\n * const {Storage} = require('@google-cloud/storage');\n * const storage = new Storage();\n * const albums = storage.bucket('albums');\n *\n * //-\n * // Make all of the files currently in a bucket publicly readable.\n * //-\n * const options = {\n *   entity: 'allUsers',\n *   role: storage.acl.READER_ROLE\n * };\n *\n * albums.acl.add(options, function(err, aclObject) {});\n *\n * //-\n * // Make any new objects added to a bucket publicly readable.\n * //-\n * albums.acl.default.add(options, function(err, aclObject) {});\n *\n * //-\n * // Grant a user ownership permissions to a bucket.\n * //-\n * albums.acl.add({\n *   entity: 'user-useremail@example.com',\n *   role: storage.acl.OWNER_ROLE\n * }, function(err, aclObject) {});\n *\n * //-\n * // If the callback is omitted, we'll return a Promise.\n * //-\n * albums.acl.add(options).then(function(data) {\n *   const aclObject = data[0];\n *   const apiResponse = data[1];\n * });\n * ```\n */\n/**\n * Get {@link Bucket} objects for all of the buckets in your project as\n * a readable object stream.\n *\n * @method Storage#getBucketsStream\n * @param {GetBucketsRequest} [query] Query object for listing buckets.\n * @returns {ReadableStream} A readable stream that emits {@link Bucket}\n *     instances.\n *\n * @example\n * ```\n * storage.getBucketsStream()\n *   .on('error', console.error)\n *   .on('data', function(bucket) {\n *     // bucket is a Bucket object.\n *   })\n *   .on('end', function() {\n *     // All buckets retrieved.\n *   });\n *\n * //-\n * // If you anticipate many results, you can end a stream early to prevent\n * // unnecessary processing and API requests.\n * //-\n * storage.getBucketsStream()\n *   .on('data', function(bucket) {\n *     this.end();\n *   });\n * ```\n */\n/**\n * Get {@link HmacKey} objects for all of the HMAC keys in the project in a\n * readable object stream.\n *\n * @method Storage#getHmacKeysStream\n * @param {GetHmacKeysOptions} [options] Configuration options.\n * @returns {ReadableStream} A readable stream that emits {@link HmacKey}\n *     instances.\n *\n * @example\n * ```\n * storage.getHmacKeysStream()\n *   .on('error', console.error)\n *   .on('data', function(hmacKey) {\n *     // hmacKey is an HmacKey object.\n *   })\n *   .on('end', function() {\n *     // All HmacKey retrieved.\n *   });\n *\n * //-\n * // If you anticipate many results, you can end a stream early to prevent\n * // unnecessary processing and API requests.\n * //-\n * storage.getHmacKeysStream()\n *   .on('data', function(bucket) {\n *     this.end();\n *   });\n * ```\n */\n/**\n * <h4>ACLs</h4>\n * Cloud Storage uses access control lists (ACLs) to manage object and\n * bucket access. ACLs are the mechanism you use to share files with other users\n * and allow other users to access your buckets and files.\n *\n * To learn more about ACLs, read this overview on\n * {@link https://cloud.google.com/storage/docs/access-control| Access Control}.\n *\n * See {@link https://cloud.google.com/storage/docs/overview| Cloud Storage overview}\n * See {@link https://cloud.google.com/storage/docs/access-control| Access Control}\n *\n * @class\n */\nclass Storage extends _nodejs_common_index_js__WEBPACK_IMPORTED_MODULE_0__.Service {\n    getBucketsStream() {\n        // placeholder body, overwritten in constructor\n        return new stream__WEBPACK_IMPORTED_MODULE_3__.Readable();\n    }\n    getHmacKeysStream() {\n        // placeholder body, overwritten in constructor\n        return new stream__WEBPACK_IMPORTED_MODULE_3__.Readable();\n    }\n    /**\n     * @callback Crc32cGeneratorToStringCallback\n     * A method returning the CRC32C as a base64-encoded string.\n     *\n     * @returns {string}\n     *\n     * @example\n     * Hashing the string 'data' should return 'rth90Q=='\n     *\n     * ```js\n     * const buffer = Buffer.from('data');\n     * crc32c.update(buffer);\n     * crc32c.toString(); // 'rth90Q=='\n     * ```\n     **/\n    /**\n     * @callback Crc32cGeneratorValidateCallback\n     * A method validating a base64-encoded CRC32C string.\n     *\n     * @param {string} [value] base64-encoded CRC32C string to validate\n     * @returns {boolean}\n     *\n     * @example\n     * Should return `true` if the value matches, `false` otherwise\n     *\n     * ```js\n     * const buffer = Buffer.from('data');\n     * crc32c.update(buffer);\n     * crc32c.validate('DkjKuA=='); // false\n     * crc32c.validate('rth90Q=='); // true\n     * ```\n     **/\n    /**\n     * @callback Crc32cGeneratorUpdateCallback\n     * A method for passing `Buffer`s for CRC32C generation.\n     *\n     * @param {Buffer} [data] data to update CRC32C value with\n     * @returns {undefined}\n     *\n     * @example\n     * Hashing buffers from 'some ' and 'text\\n'\n     *\n     * ```js\n     * const buffer1 = Buffer.from('some ');\n     * crc32c.update(buffer1);\n     *\n     * const buffer2 = Buffer.from('text\\n');\n     * crc32c.update(buffer2);\n     *\n     * crc32c.toString(); // 'DkjKuA=='\n     * ```\n     **/\n    /**\n     * @typedef {object} CRC32CValidator\n     * @property {Crc32cGeneratorToStringCallback}\n     * @property {Crc32cGeneratorValidateCallback}\n     * @property {Crc32cGeneratorUpdateCallback}\n     */\n    /**\n     * @callback Crc32cGeneratorCallback\n     * @returns {CRC32CValidator}\n     */\n    /**\n     * @typedef {object} StorageOptions\n     * @property {string} [projectId] The project ID from the Google Developer's\n     *     Console, e.g. 'grape-spaceship-123'. We will also check the environment\n     *     variable `GCLOUD_PROJECT` for your project ID. If your app is running\n     * in an environment which supports {@link\n     * https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\n     * Application Default Credentials}, your project ID will be detected\n     * automatically.\n     * @property {string} [keyFilename] Full path to the a .json, .pem, or .p12 key\n     *     downloaded from the Google Developers Console. If you provide a path to\n     * a JSON file, the `projectId` option above is not necessary. NOTE: .pem and\n     *     .p12 require you to specify the `email` option as well.\n     * @property {string} [email] Account email address. Required when using a .pem\n     *     or .p12 keyFilename.\n     * @property {object} [credentials] Credentials object.\n     * @property {string} [credentials.client_email]\n     * @property {string} [credentials.private_key]\n     * @property {object} [retryOptions] Options for customizing retries. Retriable server errors\n     *     will be retried with exponential delay between them dictated by the formula\n     *     max(maxRetryDelay, retryDelayMultiplier*retryNumber) until maxRetries or totalTimeout\n     *     has been reached. Retries will only happen if autoRetry is set to true.\n     * @property {boolean} [retryOptions.autoRetry=true] Automatically retry requests if the\n     *     response is related to rate limits or certain intermittent server\n     * errors. We will exponentially backoff subsequent requests by default.\n     * @property {number} [retryOptions.retryDelayMultiplier = 2] the multiplier by which to\n     *   increase the delay time between the completion of failed requests, and the\n     *   initiation of the subsequent retrying request.\n     * @property {number} [retryOptions.totalTimeout = 600] The total time, starting from\n     *  when the initial request is sent, after which an error will\n     *   be returned, regardless of the retrying attempts made meanwhile.\n     * @property {number} [retryOptions.maxRetryDelay = 64] The maximum delay time between requests.\n     *   When this value is reached, ``retryDelayMultiplier`` will no longer be used to\n     *   increase delay time.\n     * @property {number} [retryOptions.maxRetries=3] Maximum number of automatic retries\n     *     attempted before returning the error.\n     * @property {function} [retryOptions.retryableErrorFn] Function that returns true if a given\n     *     error should be retried and false otherwise.\n     * @property {enum} [retryOptions.idempotencyStrategy=IdempotencyStrategy.RetryConditional] Enumeration\n     *     controls how conditionally idempotent operations are retried. Possible values are: RetryAlways -\n     *     will respect other retry settings and attempt to retry conditionally idempotent operations. RetryConditional -\n     *     will retry conditionally idempotent operations if the correct preconditions are set. RetryNever - never\n     *     retry a conditionally idempotent operation.\n     * @property {string} [userAgent] The value to be prepended to the User-Agent\n     *     header in API requests.\n     * @property {object} [authClient] `AuthClient` or `GoogleAuth` client to reuse instead of creating a new one.\n     * @property {number} [timeout] The amount of time in milliseconds to wait per http request before timing out.\n     * @property {object[]} [interceptors_] Array of custom request interceptors to be returned in the order they were assigned.\n     * @property {string} [apiEndpoint = storage.google.com] The API endpoint of the service used to make requests.\n     * @property {boolean} [useAuthWithCustomEndpoint = false] Controls whether or not to use authentication when using a custom endpoint.\n     * @property {Crc32cGeneratorCallback} [callback] A function that generates a CRC32C Validator. Defaults to {@link CRC32C}\n     */\n    /**\n     * Constructs the Storage client.\n     *\n     * @example\n     * Create a client that uses Application Default Credentials\n     * (ADC)\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * ```\n     *\n     * @example\n     * Create a client with explicit credentials\n     * ```\n     * const storage = new Storage({\n     *   projectId: 'your-project-id',\n     *   keyFilename: '/path/to/keyfile.json'\n     * });\n     * ```\n     *\n     * @example\n     * Create a client with credentials passed\n     * by value as a JavaScript object\n     * ```\n     * const storage = new Storage({\n     *   projectId: 'your-project-id',\n     *   credentials: {\n     *     type: 'service_account',\n     *     project_id: 'xxxxxxx',\n     *     private_key_id: 'xxxx',\n     *     private_key:'-----BEGIN PRIVATE KEY-----xxxxxxx\\n-----END PRIVATE KEY-----\\n',\n     *     client_email: 'xxxx',\n     *     client_id: 'xxx',\n     *     auth_uri: 'https://accounts.google.com/o/oauth2/auth',\n     *     token_uri: 'https://oauth2.googleapis.com/token',\n     *     auth_provider_x509_cert_url: 'https://www.googleapis.com/oauth2/v1/certs',\n     *     client_x509_cert_url: 'xxx',\n     *     }\n     * });\n     * ```\n     *\n     * @example\n     * Create a client with credentials passed\n     * by loading a JSON file directly from disk\n     * ```\n     * const storage = new Storage({\n     *   projectId: 'your-project-id',\n     *   credentials: require('/path/to-keyfile.json')\n     * });\n     * ```\n     *\n     * @example\n     * Create a client with an `AuthClient` (e.g. `DownscopedClient`)\n     * ```\n     * const {DownscopedClient} = require('google-auth-library');\n     * const authClient = new DownscopedClient({...});\n     *\n     * const storage = new Storage({authClient});\n     * ```\n     *\n     * Additional samples:\n     * - https://github.com/googleapis/google-auth-library-nodejs#sample-usage-1\n     * - https://github.com/googleapis/google-auth-library-nodejs/blob/main/samples/downscopedclient.js\n     *\n     * @param {StorageOptions} [options] Configuration options.\n     */\n    constructor(options = {}) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;\n        const universe = options.universeDomain || google_auth_library__WEBPACK_IMPORTED_MODULE_11__.DEFAULT_UNIVERSE;\n        let apiEndpoint = `https://storage.${universe}`;\n        let customEndpoint = false;\n        // Note: EMULATOR_HOST is an experimental configuration variable. Use apiEndpoint instead.\n        const EMULATOR_HOST = process.env.STORAGE_EMULATOR_HOST;\n        if (typeof EMULATOR_HOST === 'string') {\n            apiEndpoint = Storage.sanitizeEndpoint(EMULATOR_HOST);\n            customEndpoint = true;\n        }\n        if (options.apiEndpoint && options.apiEndpoint !== apiEndpoint) {\n            apiEndpoint = Storage.sanitizeEndpoint(options.apiEndpoint);\n            customEndpoint = true;\n        }\n        options = Object.assign({}, options, { apiEndpoint });\n        // Note: EMULATOR_HOST is an experimental configuration variable. Use apiEndpoint instead.\n        const baseUrl = EMULATOR_HOST || `${options.apiEndpoint}/storage/v1`;\n        const config = {\n            apiEndpoint: options.apiEndpoint,\n            retryOptions: {\n                autoRetry: ((_a = options.retryOptions) === null || _a === void 0 ? void 0 : _a.autoRetry) !== undefined\n                    ? (_b = options.retryOptions) === null || _b === void 0 ? void 0 : _b.autoRetry\n                    : AUTO_RETRY_DEFAULT,\n                maxRetries: ((_c = options.retryOptions) === null || _c === void 0 ? void 0 : _c.maxRetries)\n                    ? (_d = options.retryOptions) === null || _d === void 0 ? void 0 : _d.maxRetries\n                    : MAX_RETRY_DEFAULT,\n                retryDelayMultiplier: ((_e = options.retryOptions) === null || _e === void 0 ? void 0 : _e.retryDelayMultiplier)\n                    ? (_f = options.retryOptions) === null || _f === void 0 ? void 0 : _f.retryDelayMultiplier\n                    : RETRY_DELAY_MULTIPLIER_DEFAULT,\n                totalTimeout: ((_g = options.retryOptions) === null || _g === void 0 ? void 0 : _g.totalTimeout)\n                    ? (_h = options.retryOptions) === null || _h === void 0 ? void 0 : _h.totalTimeout\n                    : TOTAL_TIMEOUT_DEFAULT,\n                maxRetryDelay: ((_j = options.retryOptions) === null || _j === void 0 ? void 0 : _j.maxRetryDelay)\n                    ? (_k = options.retryOptions) === null || _k === void 0 ? void 0 : _k.maxRetryDelay\n                    : MAX_RETRY_DELAY_DEFAULT,\n                retryableErrorFn: ((_l = options.retryOptions) === null || _l === void 0 ? void 0 : _l.retryableErrorFn)\n                    ? (_m = options.retryOptions) === null || _m === void 0 ? void 0 : _m.retryableErrorFn\n                    : RETRYABLE_ERR_FN_DEFAULT,\n                idempotencyStrategy: ((_o = options.retryOptions) === null || _o === void 0 ? void 0 : _o.idempotencyStrategy) !== undefined\n                    ? (_p = options.retryOptions) === null || _p === void 0 ? void 0 : _p.idempotencyStrategy\n                    : IDEMPOTENCY_STRATEGY_DEFAULT,\n            },\n            baseUrl,\n            customEndpoint,\n            useAuthWithCustomEndpoint: options === null || options === void 0 ? void 0 : options.useAuthWithCustomEndpoint,\n            projectIdRequired: false,\n            scopes: [\n                'https://www.googleapis.com/auth/iam',\n                'https://www.googleapis.com/auth/cloud-platform',\n                'https://www.googleapis.com/auth/devstorage.full_control',\n            ],\n            packageJson: (0,_package_json_helper_cjs__WEBPACK_IMPORTED_MODULE_8__.getPackageJSON)(),\n        };\n        super(config, options);\n        /**\n         * Reference to {@link Storage.acl}.\n         *\n         * @name Storage#acl\n         * @see Storage.acl\n         */\n        this.acl = Storage.acl;\n        this.crc32cGenerator =\n            options.crc32cGenerator || _crc32c_js__WEBPACK_IMPORTED_MODULE_10__.CRC32C_DEFAULT_VALIDATOR_GENERATOR;\n        this.retryOptions = config.retryOptions;\n        this.getBucketsStream = _google_cloud_paginator__WEBPACK_IMPORTED_MODULE_1__.paginator.streamify('getBuckets');\n        this.getHmacKeysStream = _google_cloud_paginator__WEBPACK_IMPORTED_MODULE_1__.paginator.streamify('getHmacKeys');\n    }\n    static sanitizeEndpoint(url) {\n        if (!PROTOCOL_REGEX.test(url)) {\n            url = `https://${url}`;\n        }\n        return url.replace(/\\/+$/, ''); // Remove trailing slashes\n    }\n    /**\n     * Get a reference to a Cloud Storage bucket.\n     *\n     * @param {string} name Name of the bucket.\n     * @param {object} [options] Configuration object.\n     * @param {string} [options.kmsKeyName] A Cloud KMS key that will be used to\n     *     encrypt objects inserted into this bucket, if no encryption method is\n     *     specified.\n     * @param {string} [options.userProject] User project to be billed for all\n     *     requests made from this Bucket object.\n     * @returns {Bucket}\n     * @see Bucket\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const albums = storage.bucket('albums');\n     * const photos = storage.bucket('photos');\n     * ```\n     */\n    bucket(name, options) {\n        if (!name) {\n            throw new Error(StorageExceptionMessages.BUCKET_NAME_REQUIRED);\n        }\n        return new _bucket_js__WEBPACK_IMPORTED_MODULE_4__.Bucket(this, name, options);\n    }\n    /**\n     * Reference a channel to receive notifications about changes to your bucket.\n     *\n     * @param {string} id The ID of the channel.\n     * @param {string} resourceId The resource ID of the channel.\n     * @returns {Channel}\n     * @see Channel\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const channel = storage.channel('id', 'resource-id');\n     * ```\n     */\n    channel(id, resourceId) {\n        return new _channel_js__WEBPACK_IMPORTED_MODULE_5__.Channel(this, id, resourceId);\n    }\n    /**\n     * @typedef {array} CreateBucketResponse\n     * @property {Bucket} 0 The new {@link Bucket}.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * @callback CreateBucketCallback\n     * @param {?Error} err Request error, if any.\n     * @param {Bucket} bucket The new {@link Bucket}.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Metadata to set for the bucket.\n     *\n     * @typedef {object} CreateBucketRequest\n     * @property {boolean} [archive=false] Specify the storage class as Archive.\n     * @property {object} [autoclass.enabled=false] Specify whether Autoclass is\n     *     enabled for the bucket.\n     * @property {object} [autoclass.terminalStorageClass='NEARLINE'] The storage class that objects in an Autoclass bucket eventually transition to if\n     *     they are not read for a certain length of time. Valid values are NEARLINE and ARCHIVE.\n     * @property {boolean} [coldline=false] Specify the storage class as Coldline.\n     * @property {Cors[]} [cors=[]] Specify the CORS configuration to use.\n     * @property {CustomPlacementConfig} [customPlacementConfig={}] Specify the bucket's regions for dual-region buckets.\n     *     For more information, see {@link https://cloud.google.com/storage/docs/locations| Bucket Locations}.\n     * @property {boolean} [dra=false] Specify the storage class as Durable Reduced\n     *     Availability.\n     * @property {boolean} [enableObjectRetention=false] Specifiy whether or not object retention should be enabled on this bucket.\n     * @property {object} [hierarchicalNamespace.enabled=false] Specify whether or not to enable hierarchical namespace on this bucket.\n     * @property {string} [location] Specify the bucket's location. If specifying\n     *     a dual-region, the `customPlacementConfig` property should be set in conjunction.\n     *     For more information, see {@link https://cloud.google.com/storage/docs/locations| Bucket Locations}.\n     * @property {boolean} [multiRegional=false] Specify the storage class as\n     *     Multi-Regional.\n     * @property {boolean} [nearline=false] Specify the storage class as Nearline.\n     * @property {boolean} [regional=false] Specify the storage class as Regional.\n     * @property {boolean} [requesterPays=false] Force the use of the User Project metadata field to assign operational\n     *     costs when an operation is made on a Bucket and its objects.\n     * @property {string} [rpo] For dual-region buckets, controls whether turbo\n     *      replication is enabled (`ASYNC_TURBO`) or disabled (`DEFAULT`).\n     * @property {boolean} [standard=true] Specify the storage class as Standard.\n     * @property {string} [storageClass] The new storage class. (`standard`,\n     *     `nearline`, `coldline`, or `archive`).\n     *     **Note:** The storage classes `multi_regional`, `regional`, and\n     *     `durable_reduced_availability` are now legacy and will be deprecated in\n     *     the future.\n     * @property {Versioning} [versioning=undefined] Specify the versioning status.\n     * @property {string} [userProject] The ID of the project which will be billed\n     *     for the request.\n     */\n    /**\n     * Create a bucket.\n     *\n     * Cloud Storage uses a flat namespace, so you can't create a bucket with\n     * a name that is already in use. For more information, see\n     * {@link https://cloud.google.com/storage/docs/bucketnaming.html#requirements| Bucket Naming Guidelines}.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/insert| Buckets: insert API Documentation}\n     * See {@link https://cloud.google.com/storage/docs/storage-classes| Storage Classes}\n     *\n     * @param {string} name Name of the bucket to create.\n     * @param {CreateBucketRequest} [metadata] Metadata to set for the bucket.\n     * @param {CreateBucketCallback} [callback] Callback function.\n     * @returns {Promise<CreateBucketResponse>}\n     * @throws {Error} If a name is not provided.\n     * @see Bucket#create\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const callback = function(err, bucket, apiResponse) {\n     *   // `bucket` is a Bucket object.\n     * };\n     *\n     * storage.createBucket('new-bucket', callback);\n     *\n     * //-\n     * // Create a bucket in a specific location and region. <em>See the <a\n     * // href=\"https://cloud.google.com/storage/docs/json_api/v1/buckets/insert\">\n     * // Official JSON API docs</a> for complete details on the `location`\n     * option.\n     * // </em>\n     * //-\n     * const metadata = {\n     *   location: 'US-CENTRAL1',\n     *   regional: true\n     * };\n     *\n     * storage.createBucket('new-bucket', metadata, callback);\n     *\n     * //-\n     * // Create a bucket with a retention policy of 6 months.\n     * //-\n     * const metadata = {\n     *   retentionPolicy: {\n     *     retentionPeriod: 15780000 // 6 months in seconds.\n     *   }\n     * };\n     *\n     * storage.createBucket('new-bucket', metadata, callback);\n     *\n     * //-\n     * // Enable versioning on a new bucket.\n     * //-\n     * const metadata = {\n     *   versioning: {\n     *     enabled: true\n     *   }\n     * };\n     *\n     * storage.createBucket('new-bucket', metadata, callback);\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * storage.createBucket('new-bucket').then(function(data) {\n     *   const bucket = data[0];\n     *   const apiResponse = data[1];\n     * });\n     *\n     * ```\n     * @example <caption>include:samples/buckets.js</caption>\n     * region_tag:storage_create_bucket\n     * Another example:\n     */\n    createBucket(name, metadataOrCallback, callback) {\n        if (!name) {\n            throw new Error(StorageExceptionMessages.BUCKET_NAME_REQUIRED_CREATE);\n        }\n        let metadata;\n        if (!callback) {\n            callback = metadataOrCallback;\n            metadata = {};\n        }\n        else {\n            metadata = metadataOrCallback;\n        }\n        const body = {\n            ...metadata,\n            name,\n        };\n        const storageClasses = {\n            archive: 'ARCHIVE',\n            coldline: 'COLDLINE',\n            dra: 'DURABLE_REDUCED_AVAILABILITY',\n            multiRegional: 'MULTI_REGIONAL',\n            nearline: 'NEARLINE',\n            regional: 'REGIONAL',\n            standard: 'STANDARD',\n        };\n        const storageClassKeys = Object.keys(storageClasses);\n        for (const storageClass of storageClassKeys) {\n            if (body[storageClass]) {\n                if (metadata.storageClass && metadata.storageClass !== storageClass) {\n                    throw new Error(`Both \\`${storageClass}\\` and \\`storageClass\\` were provided.`);\n                }\n                body.storageClass = storageClasses[storageClass];\n                delete body[storageClass];\n            }\n        }\n        if (body.requesterPays) {\n            body.billing = {\n                requesterPays: body.requesterPays,\n            };\n            delete body.requesterPays;\n        }\n        const query = {\n            project: this.projectId,\n        };\n        if (body.userProject) {\n            query.userProject = body.userProject;\n            delete body.userProject;\n        }\n        if (body.enableObjectRetention) {\n            query.enableObjectRetention = body.enableObjectRetention;\n            delete body.enableObjectRetention;\n        }\n        if (body.predefinedAcl) {\n            query.predefinedAcl = body.predefinedAcl;\n            delete body.predefinedAcl;\n        }\n        if (body.predefinedDefaultObjectAcl) {\n            query.predefinedDefaultObjectAcl = body.predefinedDefaultObjectAcl;\n            delete body.predefinedDefaultObjectAcl;\n        }\n        if (body.projection) {\n            query.projection = body.projection;\n            delete body.projection;\n        }\n        this.request({\n            method: 'POST',\n            uri: '/b',\n            qs: query,\n            json: body,\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null, resp);\n                return;\n            }\n            const bucket = this.bucket(name);\n            bucket.metadata = resp;\n            callback(null, bucket, resp);\n        });\n    }\n    /**\n     * @typedef {object} CreateHmacKeyOptions\n     * @property {string} [projectId] The project ID of the project that owns\n     *     the service account of the requested HMAC key. If not provided,\n     *     the project ID used to instantiate the Storage client will be used.\n     * @property {string} [userProject] This parameter is currently ignored.\n     */\n    /**\n     * @typedef {object} HmacKeyMetadata\n     * @property {string} accessId The access id identifies which HMAC key was\n     *     used to sign a request when authenticating with HMAC.\n     * @property {string} etag Used to perform a read-modify-write of the key.\n     * @property {string} id The resource name of the HMAC key.\n     * @property {string} projectId The project ID.\n     * @property {string} serviceAccountEmail The service account's email this\n     *     HMAC key is created for.\n     * @property {string} state The state of this HMAC key. One of \"ACTIVE\",\n     *     \"INACTIVE\" or \"DELETED\".\n     * @property {string} timeCreated The creation time of the HMAC key in\n     *     RFC 3339 format.\n     * @property {string} [updated] The time this HMAC key was last updated in\n     *     RFC 3339 format.\n     */\n    /**\n     * @typedef {array} CreateHmacKeyResponse\n     * @property {HmacKey} 0 The HmacKey instance created from API response.\n     * @property {string} 1 The HMAC key's secret used to access the XML API.\n     * @property {object} 3 The raw API response.\n     */\n    /**\n     * @callback CreateHmacKeyCallback Callback function.\n     * @param {?Error} err Request error, if any.\n     * @param {HmacKey} hmacKey The HmacKey instance created from API response.\n     * @param {string} secret The HMAC key's secret used to access the XML API.\n     * @param {object} apiResponse The raw API response.\n     */\n    /**\n     * Create an HMAC key associated with an service account to authenticate\n     * requests to the Cloud Storage XML API.\n     *\n     * See {@link https://cloud.google.com/storage/docs/authentication/hmackeys| HMAC keys documentation}\n     *\n     * @param {string} serviceAccountEmail The service account's email address\n     *     with which the HMAC key is created for.\n     * @param {CreateHmacKeyCallback} [callback] Callback function.\n     * @return {Promise<CreateHmacKeyResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('google-cloud/storage');\n     * const storage = new Storage();\n     *\n     * // Replace with your service account's email address\n     * const serviceAccountEmail =\n     *   'my-service-account@appspot.gserviceaccount.com';\n     *\n     * storage.createHmacKey(serviceAccountEmail, function(err, hmacKey, secret) {\n     *   if (!err) {\n     *     // Securely store the secret for use with the XML API.\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * storage.createHmacKey(serviceAccountEmail)\n     *   .then((response) => {\n     *     const hmacKey = response[0];\n     *     const secret = response[1];\n     *     // Securely store the secret for use with the XML API.\n     *   });\n     * ```\n     */\n    createHmacKey(serviceAccountEmail, optionsOrCb, cb) {\n        if (typeof serviceAccountEmail !== 'string') {\n            throw new Error(StorageExceptionMessages.HMAC_SERVICE_ACCOUNT);\n        }\n        const { options, callback } = (0,_util_js__WEBPACK_IMPORTED_MODULE_7__.normalize)(optionsOrCb, cb);\n        const query = Object.assign({}, options, { serviceAccountEmail });\n        const projectId = query.projectId || this.projectId;\n        delete query.projectId;\n        this.request({\n            method: 'POST',\n            uri: `/projects/${projectId}/hmacKeys`,\n            qs: query,\n            maxRetries: 0, //explicitly set this value since this is a non-idempotent function\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null, null, resp);\n                return;\n            }\n            const metadata = resp.metadata;\n            const hmacKey = this.hmacKey(metadata.accessId, {\n                projectId: metadata.projectId,\n            });\n            hmacKey.metadata = resp.metadata;\n            callback(null, hmacKey, resp.secret, resp);\n        });\n    }\n    /**\n     * Query object for listing buckets.\n     *\n     * @typedef {object} GetBucketsRequest\n     * @property {boolean} [autoPaginate=true] Have pagination handled\n     *     automatically.\n     * @property {number} [maxApiCalls] Maximum number of API calls to make.\n     * @property {number} [maxResults] Maximum number of items plus prefixes to\n     *     return per call.\n     *     Note: By default will handle pagination automatically\n     *     if more than 1 page worth of results are requested per call.\n     *     When `autoPaginate` is set to `false` the smaller of `maxResults`\n     *     or 1 page of results will be returned per call.\n     * @property {string} [pageToken] A previously-returned page token\n     *     representing part of the larger set of results to view.\n     * @property {string} [userProject] The ID of the project which will be billed\n     *     for the request.\n     *  @param {boolean} [softDeleted] If true, returns the soft-deleted object.\n     *     Object `generation` is required if `softDeleted` is set to True.\n     */\n    /**\n     * @typedef {array} GetBucketsResponse\n     * @property {Bucket[]} 0 Array of {@link Bucket} instances.\n     * @property {object} 1 nextQuery A query object to receive more results.\n     * @property {object} 2 The full API response.\n     */\n    /**\n     * @callback GetBucketsCallback\n     * @param {?Error} err Request error, if any.\n     * @param {Bucket[]} buckets Array of {@link Bucket} instances.\n     * @param {object} nextQuery A query object to receive more results.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Get Bucket objects for all of the buckets in your project.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/list| Buckets: list API Documentation}\n     *\n     * @param {GetBucketsRequest} [query] Query object for listing buckets.\n     * @param {GetBucketsCallback} [callback] Callback function.\n     * @returns {Promise<GetBucketsResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * storage.getBuckets(function(err, buckets) {\n     *   if (!err) {\n     *     // buckets is an array of Bucket objects.\n     *   }\n     * });\n     *\n     * //-\n     * // To control how many API requests are made and page through the results\n     * // manually, set `autoPaginate` to `false`.\n     * //-\n     * const callback = function(err, buckets, nextQuery, apiResponse) {\n     *   if (nextQuery) {\n     *     // More results exist.\n     *     storage.getBuckets(nextQuery, callback);\n     *   }\n     *\n     *   // The `metadata` property is populated for you with the metadata at the\n     *   // time of fetching.\n     *   buckets[0].metadata;\n     *\n     *   // However, in cases where you are concerned the metadata could have\n     *   // changed, use the `getMetadata` method.\n     *   buckets[0].getMetadata(function(err, metadata, apiResponse) {});\n     * };\n     *\n     * storage.getBuckets({\n     *   autoPaginate: false\n     * }, callback);\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * storage.getBuckets().then(function(data) {\n     *   const buckets = data[0];\n     * });\n     *\n     * ```\n     * @example <caption>include:samples/buckets.js</caption>\n     * region_tag:storage_list_buckets\n     * Another example:\n     */\n    getBuckets(optionsOrCallback, cb) {\n        const { options, callback } = (0,_util_js__WEBPACK_IMPORTED_MODULE_7__.normalize)(optionsOrCallback, cb);\n        options.project = options.project || this.projectId;\n        this.request({\n            uri: '/b',\n            qs: options,\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null, null, resp);\n                return;\n            }\n            const itemsArray = resp.items ? resp.items : [];\n            const buckets = itemsArray.map((bucket) => {\n                const bucketInstance = this.bucket(bucket.id);\n                bucketInstance.metadata = bucket;\n                return bucketInstance;\n            });\n            const nextQuery = resp.nextPageToken\n                ? Object.assign({}, options, { pageToken: resp.nextPageToken })\n                : null;\n            callback(null, buckets, nextQuery, resp);\n        });\n    }\n    getHmacKeys(optionsOrCb, cb) {\n        const { options, callback } = (0,_util_js__WEBPACK_IMPORTED_MODULE_7__.normalize)(optionsOrCb, cb);\n        const query = Object.assign({}, options);\n        const projectId = query.projectId || this.projectId;\n        delete query.projectId;\n        this.request({\n            uri: `/projects/${projectId}/hmacKeys`,\n            qs: query,\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null, null, resp);\n                return;\n            }\n            const itemsArray = resp.items ? resp.items : [];\n            const hmacKeys = itemsArray.map((hmacKey) => {\n                const hmacKeyInstance = this.hmacKey(hmacKey.accessId, {\n                    projectId: hmacKey.projectId,\n                });\n                hmacKeyInstance.metadata = hmacKey;\n                return hmacKeyInstance;\n            });\n            const nextQuery = resp.nextPageToken\n                ? Object.assign({}, options, { pageToken: resp.nextPageToken })\n                : null;\n            callback(null, hmacKeys, nextQuery, resp);\n        });\n    }\n    /**\n     * @typedef {array} GetServiceAccountResponse\n     * @property {object} 0 The service account resource.\n     * @property {object} 1 The full\n     * {@link https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount#resource| API response}.\n     */\n    /**\n     * @callback GetServiceAccountCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} serviceAccount The serviceAccount resource.\n     * @param {string} serviceAccount.emailAddress The service account email\n     *     address.\n     * @param {object} apiResponse The full\n     * {@link https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount#resource| API response}.\n     */\n    /**\n     * Get the email address of this project's Google Cloud Storage service\n     * account.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount/get| Projects.serviceAccount: get API Documentation}\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/projects/serviceAccount#resource| Projects.serviceAccount Resource}\n     *\n     * @param {object} [options] Configuration object.\n     * @param {string} [options.userProject] User project to be billed for this\n     *     request.\n     * @param {GetServiceAccountCallback} [callback] Callback function.\n     * @returns {Promise<GetServiceAccountResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     *\n     * storage.getServiceAccount(function(err, serviceAccount, apiResponse) {\n     *   if (!err) {\n     *     const serviceAccountEmail = serviceAccount.emailAddress;\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * storage.getServiceAccount().then(function(data) {\n     *   const serviceAccountEmail = data[0].emailAddress;\n     *   const apiResponse = data[1];\n     * });\n     * ```\n     */\n    getServiceAccount(optionsOrCallback, cb) {\n        const { options, callback } = (0,_util_js__WEBPACK_IMPORTED_MODULE_7__.normalize)(optionsOrCallback, cb);\n        this.request({\n            uri: `/projects/${this.projectId}/serviceAccount`,\n            qs: options,\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null, resp);\n                return;\n            }\n            const camelCaseResponse = {};\n            for (const prop in resp) {\n                // eslint-disable-next-line no-prototype-builtins\n                if (resp.hasOwnProperty(prop)) {\n                    const camelCaseProp = prop.replace(/_(\\w)/g, (_, match) => match.toUpperCase());\n                    camelCaseResponse[camelCaseProp] = resp[prop];\n                }\n            }\n            callback(null, camelCaseResponse, resp);\n        });\n    }\n    /**\n     * Get a reference to an HmacKey object.\n     * Note: this does not fetch the HMAC key's metadata. Use HmacKey#get() to\n     * retrieve and populate the metadata.\n     *\n     * To get a reference to an HMAC key that's not created for a service\n     * account in the same project used to instantiate the Storage client,\n     * supply the project's ID as `projectId` in the `options` argument.\n     *\n     * @param {string} accessId The HMAC key's access ID.\n     * @param {HmacKeyOptions} options HmacKey constructor options.\n     * @returns {HmacKey}\n     * @see HmacKey\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const hmacKey = storage.hmacKey('ACCESS_ID');\n     * ```\n     */\n    hmacKey(accessId, options) {\n        if (!accessId) {\n            throw new Error(StorageExceptionMessages.HMAC_ACCESS_ID);\n        }\n        return new _hmacKey_js__WEBPACK_IMPORTED_MODULE_9__.HmacKey(this, accessId, options);\n    }\n}\n/**\n * {@link Bucket} class.\n *\n * @name Storage.Bucket\n * @see Bucket\n * @type {Constructor}\n */\nStorage.Bucket = _bucket_js__WEBPACK_IMPORTED_MODULE_4__.Bucket;\n/**\n * {@link Channel} class.\n *\n * @name Storage.Channel\n * @see Channel\n * @type {Constructor}\n */\nStorage.Channel = _channel_js__WEBPACK_IMPORTED_MODULE_5__.Channel;\n/**\n * {@link File} class.\n *\n * @name Storage.File\n * @see File\n * @type {Constructor}\n */\nStorage.File = _file_js__WEBPACK_IMPORTED_MODULE_6__.File;\n/**\n * {@link HmacKey} class.\n *\n * @name Storage.HmacKey\n * @see HmacKey\n * @type {Constructor}\n */\nStorage.HmacKey = _hmacKey_js__WEBPACK_IMPORTED_MODULE_9__.HmacKey;\nStorage.acl = {\n    OWNER_ROLE: 'OWNER',\n    READER_ROLE: 'READER',\n    WRITER_ROLE: 'WRITER',\n};\n/*! Developer Documentation\n *\n * These methods can be auto-paginated.\n */\n_google_cloud_paginator__WEBPACK_IMPORTED_MODULE_1__.paginator.extend(Storage, ['getBuckets', 'getHmacKeys']);\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\n(0,_google_cloud_promisify__WEBPACK_IMPORTED_MODULE_2__.promisifyAll)(Storage, {\n    exclude: ['bucket', 'channel', 'hmacKey'],\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/build/esm/src/storage.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/build/esm/src/transfer-manager.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/build/esm/src/transfer-manager.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MultiPartUploadError: () => (/* binding */ MultiPartUploadError),\n/* harmony export */   TransferManager: () => (/* binding */ TransferManager)\n/* harmony export */ });\n/* harmony import */ var _file_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./file.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/file.js\");\n/* harmony import */ var p_limit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! p-limit */ \"(rsc)/./node_modules/p-limit/index.js\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var _crc32c_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./crc32c.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/crc32c.js\");\n/* harmony import */ var google_auth_library__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! google-auth-library */ \"(rsc)/./node_modules/google-auth-library/build/src/index.js\");\n/* harmony import */ var fast_xml_parser__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! fast-xml-parser */ \"(rsc)/./node_modules/@google-cloud/storage/node_modules/fast-xml-parser/src/fxp.js\");\n/* harmony import */ var async_retry__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! async-retry */ \"(rsc)/./node_modules/async-retry/lib/index.js\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var _nodejs_common_util_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./nodejs-common/util.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/nodejs-common/util.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./util.js */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/util.js\");\n/* harmony import */ var _package_json_helper_cjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./package-json-helper.cjs */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/package-json-helper.cjs\");\n/*!\n * Copyright 2022 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _XMLMultiPartUploadHelper_instances, _XMLMultiPartUploadHelper_setGoogApiClientHeaders, _XMLMultiPartUploadHelper_handleErrorResponse;\n\n\n\n\n\n\n\n\n\n\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\n\nconst packageJson = (0,_package_json_helper_cjs__WEBPACK_IMPORTED_MODULE_11__.getPackageJSON)();\n/**\n * Default number of concurrently executing promises to use when calling uploadManyFiles.\n *\n */\nconst DEFAULT_PARALLEL_UPLOAD_LIMIT = 5;\n/**\n * Default number of concurrently executing promises to use when calling downloadManyFiles.\n *\n */\nconst DEFAULT_PARALLEL_DOWNLOAD_LIMIT = 5;\n/**\n * Default number of concurrently executing promises to use when calling downloadFileInChunks.\n *\n */\nconst DEFAULT_PARALLEL_CHUNKED_DOWNLOAD_LIMIT = 5;\n/**\n * The minimum size threshold in bytes at which to apply a chunked download strategy when calling downloadFileInChunks.\n *\n */\nconst DOWNLOAD_IN_CHUNKS_FILE_SIZE_THRESHOLD = 32 * 1024 * 1024;\n/**\n * The chunk size in bytes to use when calling downloadFileInChunks.\n *\n */\nconst DOWNLOAD_IN_CHUNKS_DEFAULT_CHUNK_SIZE = 32 * 1024 * 1024;\n/**\n * The chunk size in bytes to use when calling uploadFileInChunks.\n *\n */\nconst UPLOAD_IN_CHUNKS_DEFAULT_CHUNK_SIZE = 32 * 1024 * 1024;\n/**\n * Default number of concurrently executing promises to use when calling uploadFileInChunks.\n *\n */\nconst DEFAULT_PARALLEL_CHUNKED_UPLOAD_LIMIT = 5;\nconst EMPTY_REGEX = '(?:)';\n/**\n * The `gccl-gcs-cmd` value for the `X-Goog-API-Client` header.\n * Example: `gccl-gcs-cmd/tm.upload_many`\n *\n * @see {@link GCCL_GCS_CMD}.\n * @see {@link GCCL_GCS_CMD_KEY}.\n */\nconst GCCL_GCS_CMD_FEATURE = {\n    UPLOAD_MANY: 'tm.upload_many',\n    DOWNLOAD_MANY: 'tm.download_many',\n    UPLOAD_SHARDED: 'tm.upload_sharded',\n    DOWNLOAD_SHARDED: 'tm.download_sharded',\n};\nconst defaultMultiPartGenerator = (bucket, fileName, uploadId, partsMap) => {\n    return new XMLMultiPartUploadHelper(bucket, fileName, uploadId, partsMap);\n};\nclass MultiPartUploadError extends Error {\n    constructor(message, uploadId, partsMap) {\n        super(message);\n        this.uploadId = uploadId;\n        this.partsMap = partsMap;\n    }\n}\n/**\n * Class representing an implementation of MPU in the XML API. This class is not meant for public usage.\n *\n * @private\n *\n */\nclass XMLMultiPartUploadHelper {\n    constructor(bucket, fileName, uploadId, partsMap) {\n        _XMLMultiPartUploadHelper_instances.add(this);\n        this.authClient = bucket.storage.authClient || new google_auth_library__WEBPACK_IMPORTED_MODULE_5__.GoogleAuth();\n        this.uploadId = uploadId || '';\n        this.bucket = bucket;\n        this.fileName = fileName;\n        this.baseUrl = `https://${bucket.name}.${new URL(this.bucket.storage.apiEndpoint).hostname}/${fileName}`;\n        this.xmlBuilder = new fast_xml_parser__WEBPACK_IMPORTED_MODULE_6__.XMLBuilder({ arrayNodeName: 'Part' });\n        this.xmlParser = new fast_xml_parser__WEBPACK_IMPORTED_MODULE_6__.XMLParser();\n        this.partsMap = partsMap || new Map();\n        this.retryOptions = {\n            retries: this.bucket.storage.retryOptions.maxRetries,\n            factor: this.bucket.storage.retryOptions.retryDelayMultiplier,\n            maxTimeout: this.bucket.storage.retryOptions.maxRetryDelay * 1000,\n            maxRetryTime: this.bucket.storage.retryOptions.totalTimeout * 1000,\n        };\n    }\n    /**\n     * Initiates a multipart upload (MPU) to the XML API and stores the resultant upload id.\n     *\n     * @returns {Promise<void>}\n     */\n    async initiateUpload(headers = {}) {\n        const url = `${this.baseUrl}?uploads`;\n        return async_retry__WEBPACK_IMPORTED_MODULE_7__(async (bail) => {\n            try {\n                const res = await this.authClient.request({\n                    headers: __classPrivateFieldGet(this, _XMLMultiPartUploadHelper_instances, \"m\", _XMLMultiPartUploadHelper_setGoogApiClientHeaders).call(this, headers),\n                    method: 'POST',\n                    url,\n                });\n                if (res.data && res.data.error) {\n                    throw res.data.error;\n                }\n                const parsedXML = this.xmlParser.parse(res.data);\n                this.uploadId = parsedXML.InitiateMultipartUploadResult.UploadId;\n            }\n            catch (e) {\n                __classPrivateFieldGet(this, _XMLMultiPartUploadHelper_instances, \"m\", _XMLMultiPartUploadHelper_handleErrorResponse).call(this, e, bail);\n            }\n        }, this.retryOptions);\n    }\n    /**\n     * Uploads the provided chunk of data to the XML API using the previously created upload id.\n     *\n     * @param {number} partNumber the sequence number of this chunk.\n     * @param {Buffer} chunk the chunk of data to be uploaded.\n     * @param {string | false} validation whether or not to include the md5 hash in the headers to cause the server\n     * to validate the chunk was not corrupted.\n     * @returns {Promise<void>}\n     */\n    async uploadPart(partNumber, chunk, validation) {\n        const url = `${this.baseUrl}?partNumber=${partNumber}&uploadId=${this.uploadId}`;\n        let headers = __classPrivateFieldGet(this, _XMLMultiPartUploadHelper_instances, \"m\", _XMLMultiPartUploadHelper_setGoogApiClientHeaders).call(this);\n        if (validation === 'md5') {\n            const hash = (0,crypto__WEBPACK_IMPORTED_MODULE_8__.createHash)('md5').update(chunk).digest('base64');\n            headers = {\n                'Content-MD5': hash,\n            };\n        }\n        return async_retry__WEBPACK_IMPORTED_MODULE_7__(async (bail) => {\n            try {\n                const res = await this.authClient.request({\n                    url,\n                    method: 'PUT',\n                    body: chunk,\n                    headers,\n                });\n                if (res.data && res.data.error) {\n                    throw res.data.error;\n                }\n                this.partsMap.set(partNumber, res.headers['etag']);\n            }\n            catch (e) {\n                __classPrivateFieldGet(this, _XMLMultiPartUploadHelper_instances, \"m\", _XMLMultiPartUploadHelper_handleErrorResponse).call(this, e, bail);\n            }\n        }, this.retryOptions);\n    }\n    /**\n     * Sends the final request of the MPU to tell GCS the upload is now complete.\n     *\n     * @returns {Promise<void>}\n     */\n    async completeUpload() {\n        const url = `${this.baseUrl}?uploadId=${this.uploadId}`;\n        const sortedMap = new Map([...this.partsMap.entries()].sort((a, b) => a[0] - b[0]));\n        const parts = [];\n        for (const entry of sortedMap.entries()) {\n            parts.push({ PartNumber: entry[0], ETag: entry[1] });\n        }\n        const body = `<CompleteMultipartUpload>${this.xmlBuilder.build(parts)}</CompleteMultipartUpload>`;\n        return async_retry__WEBPACK_IMPORTED_MODULE_7__(async (bail) => {\n            try {\n                const res = await this.authClient.request({\n                    headers: __classPrivateFieldGet(this, _XMLMultiPartUploadHelper_instances, \"m\", _XMLMultiPartUploadHelper_setGoogApiClientHeaders).call(this),\n                    url,\n                    method: 'POST',\n                    body,\n                });\n                if (res.data && res.data.error) {\n                    throw res.data.error;\n                }\n                return res;\n            }\n            catch (e) {\n                __classPrivateFieldGet(this, _XMLMultiPartUploadHelper_instances, \"m\", _XMLMultiPartUploadHelper_handleErrorResponse).call(this, e, bail);\n                return;\n            }\n        }, this.retryOptions);\n    }\n    /**\n     * Aborts an multipart upload that is in progress. Once aborted, any parts in the process of being uploaded fail,\n     * and future requests using the upload ID fail.\n     *\n     * @returns {Promise<void>}\n     */\n    async abortUpload() {\n        const url = `${this.baseUrl}?uploadId=${this.uploadId}`;\n        return async_retry__WEBPACK_IMPORTED_MODULE_7__(async (bail) => {\n            try {\n                const res = await this.authClient.request({\n                    url,\n                    method: 'DELETE',\n                });\n                if (res.data && res.data.error) {\n                    throw res.data.error;\n                }\n            }\n            catch (e) {\n                __classPrivateFieldGet(this, _XMLMultiPartUploadHelper_instances, \"m\", _XMLMultiPartUploadHelper_handleErrorResponse).call(this, e, bail);\n                return;\n            }\n        }, this.retryOptions);\n    }\n}\n_XMLMultiPartUploadHelper_instances = new WeakSet(), _XMLMultiPartUploadHelper_setGoogApiClientHeaders = function _XMLMultiPartUploadHelper_setGoogApiClientHeaders(headers = {}) {\n    let headerFound = false;\n    let userAgentFound = false;\n    for (const [key, value] of Object.entries(headers)) {\n        if (key.toLocaleLowerCase().trim() === 'x-goog-api-client') {\n            headerFound = true;\n            // Prepend command feature to value, if not already there\n            if (!value.includes(GCCL_GCS_CMD_FEATURE.UPLOAD_SHARDED)) {\n                headers[key] =\n                    `${value} gccl-gcs-cmd/${GCCL_GCS_CMD_FEATURE.UPLOAD_SHARDED}`;\n            }\n        }\n        else if (key.toLocaleLowerCase().trim() === 'user-agent') {\n            userAgentFound = true;\n        }\n    }\n    // If the header isn't present, add it\n    if (!headerFound) {\n        headers['x-goog-api-client'] = `${(0,_util_js__WEBPACK_IMPORTED_MODULE_10__.getRuntimeTrackingString)()} gccl/${packageJson.version} gccl-gcs-cmd/${GCCL_GCS_CMD_FEATURE.UPLOAD_SHARDED}`;\n    }\n    // If the User-Agent isn't present, add it\n    if (!userAgentFound) {\n        headers['User-Agent'] = (0,_util_js__WEBPACK_IMPORTED_MODULE_10__.getUserAgentString)();\n    }\n    return headers;\n}, _XMLMultiPartUploadHelper_handleErrorResponse = function _XMLMultiPartUploadHelper_handleErrorResponse(err, bail) {\n    if (this.bucket.storage.retryOptions.autoRetry &&\n        this.bucket.storage.retryOptions.retryableErrorFn(err)) {\n        throw err;\n    }\n    else {\n        bail(err);\n    }\n};\n/**\n * Create a TransferManager object to perform parallel transfer operations on a Cloud Storage bucket.\n *\n * @class\n * @hideconstructor\n *\n * @param {Bucket} bucket A {@link Bucket} instance\n *\n */\nclass TransferManager {\n    constructor(bucket) {\n        this.bucket = bucket;\n    }\n    /**\n     * @typedef {object} UploadManyFilesOptions\n     * @property {number} [concurrencyLimit] The number of concurrently executing promises\n     * to use when uploading the files.\n     * @property {Function} [customDestinationBuilder] A fuction that will take the current path of a local file\n     * and return a string representing a custom path to be used to upload the file to GCS.\n     * @property {boolean} [skipIfExists] Do not upload the file if it already exists in\n     * the bucket. This will set the precondition ifGenerationMatch = 0.\n     * @property {string} [prefix] A prefix to append to all of the uploaded files.\n     * @property {object} [passthroughOptions] {@link UploadOptions} Options to be passed through\n     * to each individual upload operation.\n     *\n     */\n    /**\n     * Upload multiple files in parallel to the bucket. This is a convenience method\n     * that utilizes {@link Bucket#upload} to perform the upload.\n     *\n     * @param {array | string} [filePathsOrDirectory] An array of fully qualified paths to the files or a directory name.\n     * If a directory name is provided, the directory will be recursively walked and all files will be added to the upload list.\n     * to be uploaded to the bucket\n     * @param {UploadManyFilesOptions} [options] Configuration options.\n     * @returns {Promise<UploadResponse[]>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('my-bucket');\n     * const transferManager = new TransferManager(bucket);\n     *\n     * //-\n     * // Upload multiple files in parallel.\n     * //-\n     * const response = await transferManager.uploadManyFiles(['/local/path/file1.txt, 'local/path/file2.txt']);\n     * // Your bucket now contains:\n     * // - \"local/path/file1.txt\" (with the contents of '/local/path/file1.txt')\n     * // - \"local/path/file2.txt\" (with the contents of '/local/path/file2.txt')\n     * const response = await transferManager.uploadManyFiles('/local/directory');\n     * // Your bucket will now contain all files contained in '/local/directory' maintaining the subdirectory structure.\n     * ```\n     *\n     */\n    async uploadManyFiles(filePathsOrDirectory, options = {}) {\n        var _a;\n        if (options.skipIfExists && ((_a = options.passthroughOptions) === null || _a === void 0 ? void 0 : _a.preconditionOpts)) {\n            options.passthroughOptions.preconditionOpts.ifGenerationMatch = 0;\n        }\n        else if (options.skipIfExists &&\n            options.passthroughOptions === undefined) {\n            options.passthroughOptions = {\n                preconditionOpts: {\n                    ifGenerationMatch: 0,\n                },\n            };\n        }\n        const limit = p_limit__WEBPACK_IMPORTED_MODULE_1__(options.concurrencyLimit || DEFAULT_PARALLEL_UPLOAD_LIMIT);\n        const promises = [];\n        let allPaths = [];\n        if (!Array.isArray(filePathsOrDirectory)) {\n            for await (const curPath of this.getPathsFromDirectory(filePathsOrDirectory)) {\n                allPaths.push(curPath);\n            }\n        }\n        else {\n            allPaths = filePathsOrDirectory;\n        }\n        for (const filePath of allPaths) {\n            const stat = await fs__WEBPACK_IMPORTED_MODULE_3__.promises.lstat(filePath);\n            if (stat.isDirectory()) {\n                continue;\n            }\n            const passThroughOptionsCopy = {\n                ...options.passthroughOptions,\n                [_nodejs_common_util_js__WEBPACK_IMPORTED_MODULE_9__.GCCL_GCS_CMD_KEY]: GCCL_GCS_CMD_FEATURE.UPLOAD_MANY,\n            };\n            passThroughOptionsCopy.destination = options.customDestinationBuilder\n                ? options.customDestinationBuilder(filePath, options)\n                : filePath.split(path__WEBPACK_IMPORTED_MODULE_2__.sep).join(path__WEBPACK_IMPORTED_MODULE_2__.posix.sep);\n            if (options.prefix) {\n                passThroughOptionsCopy.destination = path__WEBPACK_IMPORTED_MODULE_2__.posix.join(...options.prefix.split(path__WEBPACK_IMPORTED_MODULE_2__.sep), passThroughOptionsCopy.destination);\n            }\n            promises.push(limit(() => this.bucket.upload(filePath, passThroughOptionsCopy)));\n        }\n        return Promise.all(promises);\n    }\n    /**\n     * @typedef {object} DownloadManyFilesOptions\n     * @property {number} [concurrencyLimit] The number of concurrently executing promises\n     * to use when downloading the files.\n     * @property {string} [prefix] A prefix to append to all of the downloaded files.\n     * @property {string} [stripPrefix] A prefix to remove from all of the downloaded files.\n     * @property {object} [passthroughOptions] {@link DownloadOptions} Options to be passed through\n     * to each individual download operation.\n     * @property {boolean} [skipIfExists] Do not download the file if it already exists in\n     * the destination.\n     *\n     */\n    /**\n     * Download multiple files in parallel to the local filesystem. This is a convenience method\n     * that utilizes {@link File#download} to perform the download.\n     *\n     * @param {array | string} [filesOrFolder] An array of file name strings or file objects to be downloaded. If\n     * a string is provided this will be treated as a GCS prefix and all files with that prefix will be downloaded.\n     * @param {DownloadManyFilesOptions} [options] Configuration options. Setting options.prefix or options.stripPrefix\n     * or options.passthroughOptions.destination will cause the downloaded files to be written to the file system\n     * instead of being returned as a buffer.\n     * @returns {Promise<DownloadResponse[]>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('my-bucket');\n     * const transferManager = new TransferManager(bucket);\n     *\n     * //-\n     * // Download multiple files in parallel.\n     * //-\n     * const response = await transferManager.downloadManyFiles(['file1.txt', 'file2.txt']);\n     * // The following files have been downloaded:\n     * // - \"file1.txt\" (with the contents from my-bucket.file1.txt)\n     * // - \"file2.txt\" (with the contents from my-bucket.file2.txt)\n     * const response = await transferManager.downloadManyFiles([bucket.File('file1.txt'), bucket.File('file2.txt')]);\n     * // The following files have been downloaded:\n     * // - \"file1.txt\" (with the contents from my-bucket.file1.txt)\n     * // - \"file2.txt\" (with the contents from my-bucket.file2.txt)\n     * const response = await transferManager.downloadManyFiles('test-folder');\n     * // All files with GCS prefix of 'test-folder' have been downloaded.\n     * ```\n     *\n     */\n    async downloadManyFiles(filesOrFolder, options = {}) {\n        const limit = p_limit__WEBPACK_IMPORTED_MODULE_1__(options.concurrencyLimit || DEFAULT_PARALLEL_DOWNLOAD_LIMIT);\n        const promises = [];\n        let files = [];\n        if (!Array.isArray(filesOrFolder)) {\n            const directoryFiles = await this.bucket.getFiles({\n                prefix: filesOrFolder,\n            });\n            files = directoryFiles[0];\n        }\n        else {\n            files = filesOrFolder.map(curFile => {\n                if (typeof curFile === 'string') {\n                    return this.bucket.file(curFile);\n                }\n                return curFile;\n            });\n        }\n        const stripRegexString = options.stripPrefix\n            ? `^${options.stripPrefix}`\n            : EMPTY_REGEX;\n        const regex = new RegExp(stripRegexString, 'g');\n        for (const file of files) {\n            const passThroughOptionsCopy = {\n                ...options.passthroughOptions,\n                [_nodejs_common_util_js__WEBPACK_IMPORTED_MODULE_9__.GCCL_GCS_CMD_KEY]: GCCL_GCS_CMD_FEATURE.DOWNLOAD_MANY,\n            };\n            if (options.prefix || passThroughOptionsCopy.destination) {\n                passThroughOptionsCopy.destination = path__WEBPACK_IMPORTED_MODULE_2__.join(options.prefix || '', passThroughOptionsCopy.destination || '', file.name);\n            }\n            if (options.stripPrefix) {\n                passThroughOptionsCopy.destination = file.name.replace(regex, '');\n            }\n            if (options.skipIfExists &&\n                (0,fs__WEBPACK_IMPORTED_MODULE_3__.existsSync)(passThroughOptionsCopy.destination || '')) {\n                continue;\n            }\n            promises.push(limit(async () => {\n                const destination = passThroughOptionsCopy.destination;\n                if (destination && destination.endsWith(path__WEBPACK_IMPORTED_MODULE_2__.sep)) {\n                    await fs__WEBPACK_IMPORTED_MODULE_3__.promises.mkdir(destination, { recursive: true });\n                    return Promise.resolve([\n                        Buffer.alloc(0),\n                    ]);\n                }\n                return file.download(passThroughOptionsCopy);\n            }));\n        }\n        return Promise.all(promises);\n    }\n    /**\n     * @typedef {object} DownloadFileInChunksOptions\n     * @property {number} [concurrencyLimit] The number of concurrently executing promises\n     * to use when downloading the file.\n     * @property {number} [chunkSizeBytes] The size in bytes of each chunk to be downloaded.\n     * @property {string | boolean} [validation] Whether or not to perform a CRC32C validation check when download is complete.\n     * @property {boolean} [noReturnData] Whether or not to return the downloaded data. A `true` value here would be useful for files with a size that will not fit into memory.\n     *\n     */\n    /**\n     * Download a large file in chunks utilizing parallel download operations. This is a convenience method\n     * that utilizes {@link File#download} to perform the download.\n     *\n     * @param {File | string} fileOrName {@link File} to download.\n     * @param {DownloadFileInChunksOptions} [options] Configuration options.\n     * @returns {Promise<void | DownloadResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('my-bucket');\n     * const transferManager = new TransferManager(bucket);\n     *\n     * //-\n     * // Download a large file in chunks utilizing parallel operations.\n     * //-\n     * const response = await transferManager.downloadFileInChunks(bucket.file('large-file.txt');\n     * // Your local directory now contains:\n     * // - \"large-file.txt\" (with the contents from my-bucket.large-file.txt)\n     * ```\n     *\n     */\n    async downloadFileInChunks(fileOrName, options = {}) {\n        let chunkSize = options.chunkSizeBytes || DOWNLOAD_IN_CHUNKS_DEFAULT_CHUNK_SIZE;\n        let limit = p_limit__WEBPACK_IMPORTED_MODULE_1__(options.concurrencyLimit || DEFAULT_PARALLEL_CHUNKED_DOWNLOAD_LIMIT);\n        const noReturnData = Boolean(options.noReturnData);\n        const promises = [];\n        const file = typeof fileOrName === 'string'\n            ? this.bucket.file(fileOrName)\n            : fileOrName;\n        const fileInfo = await file.get();\n        const size = parseInt(fileInfo[0].metadata.size.toString());\n        // If the file size does not meet the threshold download it as a single chunk.\n        if (size < DOWNLOAD_IN_CHUNKS_FILE_SIZE_THRESHOLD) {\n            limit = p_limit__WEBPACK_IMPORTED_MODULE_1__(1);\n            chunkSize = size;\n        }\n        let start = 0;\n        const filePath = options.destination || path__WEBPACK_IMPORTED_MODULE_2__.basename(file.name);\n        const fileToWrite = await fs__WEBPACK_IMPORTED_MODULE_3__.promises.open(filePath, 'w');\n        while (start < size) {\n            const chunkStart = start;\n            let chunkEnd = start + chunkSize - 1;\n            chunkEnd = chunkEnd > size ? size : chunkEnd;\n            promises.push(limit(async () => {\n                const resp = await file.download({\n                    start: chunkStart,\n                    end: chunkEnd,\n                    [_nodejs_common_util_js__WEBPACK_IMPORTED_MODULE_9__.GCCL_GCS_CMD_KEY]: GCCL_GCS_CMD_FEATURE.DOWNLOAD_SHARDED,\n                });\n                const result = await fileToWrite.write(resp[0], 0, resp[0].length, chunkStart);\n                if (noReturnData)\n                    return;\n                return result.buffer;\n            }));\n            start += chunkSize;\n        }\n        let chunks;\n        try {\n            chunks = await Promise.all(promises);\n        }\n        finally {\n            await fileToWrite.close();\n        }\n        if (options.validation === 'crc32c' && fileInfo[0].metadata.crc32c) {\n            const downloadedCrc32C = await _crc32c_js__WEBPACK_IMPORTED_MODULE_4__.CRC32C.fromFile(filePath);\n            if (!downloadedCrc32C.validate(fileInfo[0].metadata.crc32c)) {\n                const mismatchError = new _file_js__WEBPACK_IMPORTED_MODULE_0__.RequestError(_file_js__WEBPACK_IMPORTED_MODULE_0__.FileExceptionMessages.DOWNLOAD_MISMATCH);\n                mismatchError.code = 'CONTENT_DOWNLOAD_MISMATCH';\n                throw mismatchError;\n            }\n        }\n        if (noReturnData)\n            return;\n        return [Buffer.concat(chunks, size)];\n    }\n    /**\n     * @typedef {object} UploadFileInChunksOptions\n     * @property {number} [concurrencyLimit] The number of concurrently executing promises\n     * to use when uploading the file.\n     * @property {number} [chunkSizeBytes] The size in bytes of each chunk to be uploaded.\n     * @property {string} [uploadName] Name of the file when saving to GCS. If ommitted the name is taken from the file path.\n     * @property {number} [maxQueueSize] The number of chunks to be uploaded to hold in memory concurrently. If not specified\n     * defaults to the specified concurrency limit.\n     * @property {string} [uploadId] If specified attempts to resume a previous upload.\n     * @property {Map} [partsMap] If specified alongside uploadId, attempts to resume a previous upload from the last chunk\n     * specified in partsMap\n     * @property {object} [headers] headers to be sent when initiating the multipart upload.\n     * See {@link https://cloud.google.com/storage/docs/xml-api/post-object-multipart#request_headers| Request Headers: Initiate a Multipart Upload}\n     * @property {boolean} [autoAbortFailure] boolean to indicate if an in progress upload session will be automatically aborted upon failure. If not set,\n     * failures will be automatically aborted.\n     *\n     */\n    /**\n     * Upload a large file in chunks utilizing parallel upload opertions. If the upload fails, an uploadId and\n     * map containing all the successfully uploaded parts will be returned to the caller. These arguments can be used to\n     * resume the upload.\n     *\n     * @param {string} [filePath] The path of the file to be uploaded\n     * @param {UploadFileInChunksOptions} [options] Configuration options.\n     * @param {MultiPartHelperGenerator} [generator] A function that will return a type that implements the MPU interface. Most users will not need to use this.\n     * @returns {Promise<void>} If successful a promise resolving to void, otherwise a error containing the message, uploadid, and parts map.\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('my-bucket');\n     * const transferManager = new TransferManager(bucket);\n     *\n     * //-\n     * // Upload a large file in chunks utilizing parallel operations.\n     * //-\n     * const response = await transferManager.uploadFileInChunks('large-file.txt');\n     * // Your bucket now contains:\n     * // - \"large-file.txt\"\n     * ```\n     *\n     *\n     */\n    async uploadFileInChunks(filePath, options = {}, generator = defaultMultiPartGenerator) {\n        const chunkSize = options.chunkSizeBytes || UPLOAD_IN_CHUNKS_DEFAULT_CHUNK_SIZE;\n        const limit = p_limit__WEBPACK_IMPORTED_MODULE_1__(options.concurrencyLimit || DEFAULT_PARALLEL_CHUNKED_UPLOAD_LIMIT);\n        const maxQueueSize = options.maxQueueSize ||\n            options.concurrencyLimit ||\n            DEFAULT_PARALLEL_CHUNKED_UPLOAD_LIMIT;\n        const fileName = options.uploadName || path__WEBPACK_IMPORTED_MODULE_2__.basename(filePath);\n        const mpuHelper = generator(this.bucket, fileName, options.uploadId, options.partsMap);\n        let partNumber = 1;\n        let promises = [];\n        try {\n            if (options.uploadId === undefined) {\n                await mpuHelper.initiateUpload(options.headers);\n            }\n            const startOrResumptionByte = mpuHelper.partsMap.size * chunkSize;\n            const readStream = (0,fs__WEBPACK_IMPORTED_MODULE_3__.createReadStream)(filePath, {\n                highWaterMark: chunkSize,\n                start: startOrResumptionByte,\n            });\n            // p-limit only limits the number of running promises. We do not want to hold an entire\n            // large file in memory at once so promises acts a queue that will hold only maxQueueSize in memory.\n            for await (const curChunk of readStream) {\n                if (promises.length >= maxQueueSize) {\n                    await Promise.all(promises);\n                    promises = [];\n                }\n                promises.push(limit(() => mpuHelper.uploadPart(partNumber++, curChunk, options.validation)));\n            }\n            await Promise.all(promises);\n            return await mpuHelper.completeUpload();\n        }\n        catch (e) {\n            if ((options.autoAbortFailure === undefined || options.autoAbortFailure) &&\n                mpuHelper.uploadId) {\n                try {\n                    await mpuHelper.abortUpload();\n                    return;\n                }\n                catch (e) {\n                    throw new MultiPartUploadError(e.message, mpuHelper.uploadId, mpuHelper.partsMap);\n                }\n            }\n            throw new MultiPartUploadError(e.message, mpuHelper.uploadId, mpuHelper.partsMap);\n        }\n    }\n    async *getPathsFromDirectory(directory) {\n        const filesAndSubdirectories = await fs__WEBPACK_IMPORTED_MODULE_3__.promises.readdir(directory, {\n            withFileTypes: true,\n        });\n        for (const curFileOrDirectory of filesAndSubdirectories) {\n            const fullPath = path__WEBPACK_IMPORTED_MODULE_2__.join(directory, curFileOrDirectory.name);\n            curFileOrDirectory.isDirectory()\n                ? yield* this.getPathsFromDirectory(fullPath)\n                : yield fullPath;\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/build/esm/src/transfer-manager.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/build/esm/src/util.js":
/*!******************************************************************!*\
  !*** ./node_modules/@google-cloud/storage/build/esm/src/util.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PassThroughShim: () => (/* binding */ PassThroughShim),\n/* harmony export */   convertObjKeysToSnakeCase: () => (/* binding */ convertObjKeysToSnakeCase),\n/* harmony export */   encodeURI: () => (/* binding */ encodeURI),\n/* harmony export */   fixedEncodeURIComponent: () => (/* binding */ fixedEncodeURIComponent),\n/* harmony export */   formatAsUTCISO: () => (/* binding */ formatAsUTCISO),\n/* harmony export */   getDirName: () => (/* binding */ getDirName),\n/* harmony export */   getModuleFormat: () => (/* binding */ getModuleFormat),\n/* harmony export */   getRuntimeTrackingString: () => (/* binding */ getRuntimeTrackingString),\n/* harmony export */   getUserAgentString: () => (/* binding */ getUserAgentString),\n/* harmony export */   normalize: () => (/* binding */ normalize),\n/* harmony export */   objectEntries: () => (/* binding */ objectEntries),\n/* harmony export */   objectKeyToLowercase: () => (/* binding */ objectKeyToLowercase),\n/* harmony export */   qsStringify: () => (/* binding */ qsStringify),\n/* harmony export */   unicodeJSONStringify: () => (/* binding */ unicodeJSONStringify)\n/* harmony export */ });\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var querystring__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! querystring */ \"querystring\");\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! stream */ \"stream\");\n/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! url */ \"url\");\n/* harmony import */ var _package_json_helper_cjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./package-json-helper.cjs */ \"(rsc)/./node_modules/@google-cloud/storage/build/esm/src/package-json-helper.cjs\");\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\n\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\n\n// Done to avoid a problem with mangling of identifiers when using esModuleInterop\nconst fileURLToPath = url__WEBPACK_IMPORTED_MODULE_3__.fileURLToPath;\nconst isEsm = true;\nfunction normalize(optionsOrCallback, cb) {\n    const options = (typeof optionsOrCallback === 'object' ? optionsOrCallback : {});\n    const callback = (typeof optionsOrCallback === 'function' ? optionsOrCallback : cb);\n    return { options, callback };\n}\n/**\n * Flatten an object into an Array of arrays, [[key, value], ..].\n * Implements Object.entries() for Node.js <8\n * @internal\n */\nfunction objectEntries(obj) {\n    return Object.keys(obj).map(key => [key, obj[key]]);\n}\n/**\n * Encode `str` with encodeURIComponent, plus these\n * reserved characters: `! * ' ( )`.\n *\n * See {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent| MDN: fixedEncodeURIComponent}\n *\n * @param {string} str The URI component to encode.\n * @return {string} The encoded string.\n */\nfunction fixedEncodeURIComponent(str) {\n    return encodeURIComponent(str).replace(/[!'()*]/g, c => '%' + c.charCodeAt(0).toString(16).toUpperCase());\n}\n/**\n * URI encode `uri` for generating signed URLs, using fixedEncodeURIComponent.\n *\n * Encode every byte except `A-Z a-Z 0-9 ~ - . _`.\n *\n * @param {string} uri The URI to encode.\n * @param [boolean=false] encodeSlash If `true`, the \"/\" character is not encoded.\n * @return {string} The encoded string.\n */\nfunction encodeURI(uri, encodeSlash) {\n    // Split the string by `/`, and conditionally rejoin them with either\n    // %2F if encodeSlash is `true`, or '/' if `false`.\n    return uri\n        .split('/')\n        .map(fixedEncodeURIComponent)\n        .join(encodeSlash ? '%2F' : '/');\n}\n/**\n * Serialize an object to a URL query string using util.encodeURI(uri, true).\n * @param {string} url The object to serialize.\n * @return {string} Serialized string.\n */\nfunction qsStringify(qs) {\n    return querystring__WEBPACK_IMPORTED_MODULE_1__.stringify(qs, '&', '=', {\n        encodeURIComponent: (component) => encodeURI(component, true),\n    });\n}\nfunction objectKeyToLowercase(object) {\n    const newObj = {};\n    for (let key of Object.keys(object)) {\n        const value = object[key];\n        key = key.toLowerCase();\n        newObj[key] = value;\n    }\n    return newObj;\n}\n/**\n * JSON encode str, with unicode \\u+ representation.\n * @param {object} obj The object to encode.\n * @return {string} Serialized string.\n */\nfunction unicodeJSONStringify(obj) {\n    return JSON.stringify(obj).replace(/[\\u0080-\\uFFFF]/g, (char) => '\\\\u' + ('0000' + char.charCodeAt(0).toString(16)).slice(-4));\n}\n/**\n * Converts the given objects keys to snake_case\n * @param {object} obj object to convert keys to snake case.\n * @returns {object} object with keys converted to snake case.\n */\nfunction convertObjKeysToSnakeCase(obj) {\n    if (obj instanceof Date || obj instanceof RegExp) {\n        return obj;\n    }\n    if (Array.isArray(obj)) {\n        return obj.map(convertObjKeysToSnakeCase);\n    }\n    if (obj instanceof Object) {\n        return Object.keys(obj).reduce((acc, cur) => {\n            const s = cur[0].toLocaleLowerCase() +\n                cur.slice(1).replace(/([A-Z]+)/g, (match, p1) => {\n                    return `_${p1.toLowerCase()}`;\n                });\n            acc[s] = convertObjKeysToSnakeCase(obj[cur]);\n            return acc;\n        }, Object());\n    }\n    return obj;\n}\n/**\n * Formats the provided date object as a UTC ISO string.\n * @param {Date} dateTimeToFormat date object to be formatted.\n * @param {boolean} includeTime flag to include hours, minutes, seconds in output.\n * @param {string} dateDelimiter delimiter between date components.\n * @param {string} timeDelimiter delimiter between time components.\n * @returns {string} UTC ISO format of provided date obect.\n */\nfunction formatAsUTCISO(dateTimeToFormat, includeTime = false, dateDelimiter = '', timeDelimiter = '') {\n    const year = dateTimeToFormat.getUTCFullYear();\n    const month = dateTimeToFormat.getUTCMonth() + 1;\n    const day = dateTimeToFormat.getUTCDate();\n    const hour = dateTimeToFormat.getUTCHours();\n    const minute = dateTimeToFormat.getUTCMinutes();\n    const second = dateTimeToFormat.getUTCSeconds();\n    let resultString = `${year.toString().padStart(4, '0')}${dateDelimiter}${month\n        .toString()\n        .padStart(2, '0')}${dateDelimiter}${day.toString().padStart(2, '0')}`;\n    if (includeTime) {\n        resultString = `${resultString}T${hour\n            .toString()\n            .padStart(2, '0')}${timeDelimiter}${minute\n            .toString()\n            .padStart(2, '0')}${timeDelimiter}${second.toString().padStart(2, '0')}Z`;\n    }\n    return resultString;\n}\n/**\n * Examines the runtime environment and returns the appropriate tracking string.\n * @returns {string} metrics tracking string based on the current runtime environment.\n */\nfunction getRuntimeTrackingString() {\n    if (\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    globalThis.Deno &&\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        globalThis.Deno.version &&\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        globalThis.Deno.version.deno) {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        return `gl-deno/${globalThis.Deno.version.deno}`;\n    }\n    else {\n        return `gl-node/${process.versions.node}`;\n    }\n}\n/**\n * Looks at package.json and creates the user-agent string to be applied to request headers.\n * @returns {string} user agent string.\n */\nfunction getUserAgentString() {\n    const pkg = (0,_package_json_helper_cjs__WEBPACK_IMPORTED_MODULE_4__.getPackageJSON)();\n    const hyphenatedPackageName = pkg.name\n        .replace('@google-cloud', 'gcloud-node') // For legacy purposes.\n        .replace('/', '-'); // For UA spec-compliance purposes.\n    return hyphenatedPackageName + '/' + pkg.version;\n}\nfunction getDirName() {\n    let dirToUse = '';\n    try {\n        dirToUse = __dirname;\n    }\n    catch (e) {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        dirToUse = path__WEBPACK_IMPORTED_MODULE_0__.dirname(fileURLToPath(\"file:///Users/lucassantos/Downloads/vitriny-web-ll/node_modules/@google-cloud/storage/build/esm/src/util.js\"));\n    }\n    return dirToUse;\n}\nfunction getModuleFormat() {\n    return isEsm ? 'ESM' : 'CJS';\n}\nclass PassThroughShim extends stream__WEBPACK_IMPORTED_MODULE_2__.PassThrough {\n    constructor() {\n        super(...arguments);\n        this.shouldEmitReading = true;\n        this.shouldEmitWriting = true;\n    }\n    _read(size) {\n        if (this.shouldEmitReading) {\n            this.emit('reading');\n            this.shouldEmitReading = false;\n        }\n        super._read(size);\n    }\n    _write(chunk, encoding, callback) {\n        if (this.shouldEmitWriting) {\n            this.emit('writing');\n            this.shouldEmitWriting = false;\n        }\n        // Per the nodejs documention, callback must be invoked on the next tick\n        process.nextTick(() => {\n            super._write(chunk, encoding, callback);\n        });\n    }\n    _final(callback) {\n        // If the stream is empty (i.e. empty file) final will be invoked before _read / _write\n        // and we should still emit the proper events.\n        if (this.shouldEmitReading) {\n            this.emit('reading');\n            this.shouldEmitReading = false;\n        }\n        if (this.shouldEmitWriting) {\n            this.emit('writing');\n            this.shouldEmitWriting = false;\n        }\n        callback(null);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@google-cloud/storage/build/esm/src/util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@google-cloud/storage/package.json":
/*!*********************************************************!*\
  !*** ./node_modules/@google-cloud/storage/package.json ***!
  \*********************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"name":"@google-cloud/storage","description":"Cloud Storage Client Library for Node.js","version":"7.16.0","license":"Apache-2.0","author":"Google Inc.","engines":{"node":">=14"},"repository":"googleapis/nodejs-storage","main":"./build/cjs/src/index.js","types":"./build/cjs/src/index.d.ts","type":"module","exports":{".":{"import":{"types":"./build/esm/src/index.d.ts","default":"./build/esm/src/index.js"},"require":{"types":"./build/cjs/src/index.d.ts","default":"./build/cjs/src/index.js"}}},"files":["build/cjs/src","build/cjs/package.json","!build/cjs/src/**/*.map","build/esm/src","!build/esm/src/**/*.map"],"keywords":["google apis client","google api client","google apis","google api","google","google cloud platform","google cloud","cloud","google storage","storage"],"scripts":{"all-test":"npm test && npm run system-test && npm run samples-test","benchwrapper":"node bin/benchwrapper.js","check":"gts check","clean":"rm -rf build/","compile:cjs":"tsc -p ./tsconfig.cjs.json","compile:esm":"tsc -p .","compile":"npm run compile:cjs && npm run compile:esm","conformance-test":"mocha --parallel build/cjs/conformance-test/ --require build/cjs/conformance-test/globalHooks.js","docs-test":"linkinator docs","docs":"jsdoc -c .jsdoc.json","fix":"gts fix","lint":"gts check","postcompile":"cp ./src/package-json-helper.cjs ./build/cjs/src && cp ./src/package-json-helper.cjs ./build/esm/src","postcompile:cjs":"babel --plugins gapic-tools/build/src/replaceImportMetaUrl,gapic-tools/build/src/toggleESMFlagVariable build/cjs/src/util.js -o build/cjs/src/util.js && cp internal-tooling/helpers/package.cjs.json build/cjs/package.json","precompile":"rm -rf build/","preconformance-test":"npm run compile:cjs -- --sourceMap","predocs-test":"npm run docs","predocs":"npm run compile:cjs -- --sourceMap","prelint":"cd samples; npm link ../; npm install","prepare":"npm run compile","presystem-test:esm":"npm run compile:esm","presystem-test":"npm run compile -- --sourceMap","pretest":"npm run compile -- --sourceMap","samples-test":"npm link && cd samples/ && npm link ../ && npm test && cd ../","system-test:esm":"mocha build/esm/system-test --timeout 600000 --exit","system-test":"mocha build/cjs/system-test --timeout 600000 --exit","test":"c8 mocha build/cjs/test"},"dependencies":{"@google-cloud/paginator":"^5.0.0","@google-cloud/projectify":"^4.0.0","@google-cloud/promisify":"<4.1.0","abort-controller":"^3.0.0","async-retry":"^1.3.3","duplexify":"^4.1.3","fast-xml-parser":"^4.4.1","gaxios":"^6.0.2","google-auth-library":"^9.6.3","html-entities":"^2.5.2","mime":"^3.0.0","p-limit":"^3.0.1","retry-request":"^7.0.0","teeny-request":"^9.0.0","uuid":"^8.0.0"},"devDependencies":{"@babel/cli":"^7.22.10","@babel/core":"^7.22.11","@google-cloud/pubsub":"^4.0.0","@grpc/grpc-js":"^1.0.3","@grpc/proto-loader":"^0.7.0","@types/async-retry":"^1.4.3","@types/duplexify":"^3.6.4","@types/mime":"^3.0.0","@types/mocha":"^9.1.1","@types/mockery":"^1.4.29","@types/node":"^22.0.0","@types/node-fetch":"^2.1.3","@types/proxyquire":"^1.3.28","@types/request":"^2.48.4","@types/sinon":"^17.0.0","@types/tmp":"0.2.6","@types/uuid":"^8.0.0","@types/yargs":"^17.0.10","c8":"^9.0.0","form-data":"^4.0.0","gapic-tools":"^0.4.0","gts":"^5.0.0","jsdoc":"^4.0.0","jsdoc-fresh":"^3.0.0","jsdoc-region-tag":"^3.0.0","linkinator":"^3.0.0","mocha":"^9.2.2","mockery":"^2.1.0","nock":"~13.5.0","node-fetch":"^2.6.7","pack-n-play":"^2.0.0","proxyquire":"^2.1.3","sinon":"^18.0.0","nise":"6.0.0","path-to-regexp":"6.3.0","tmp":"^0.2.0","typescript":"^5.1.6","yargs":"^17.3.1"}}');

/***/ })

};
;